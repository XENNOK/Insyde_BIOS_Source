/** @file

;******************************************************************************
;* Copyright (c) 2013, Insyde Software Corp. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;******************************************************************************
*/

Scope (\_SB.PCI0)
{
	// The OEM SLI Approval Cookie
    Name (SLIC, Buffer() {
        // Necessary key data here
        // "374937846529Genuine NVIDIA Certified SLI Ready Motherboard for ALIENWARE SANDYBRIDG2684-Copyright 2010 NVIDIA Corporation All Rights Reserved-458103946203(R)"
        0x33,0x37,0x34,0x39,0x33,0x37,0x38,0x34,0x36,0x35,0x32,0x39,0x47,0x65,
        0x6e,0x75,0x69,0x6e,0x65,0x20,0x4e,0x56,0x49,0x44,0x49,0x41,0x20,0x43,
        0x65,0x72,0x74,0x69,0x66,0x69,0x65,0x64,0x20,0x53,0x4c,0x49,0x20,0x52,
        0x65,0x61,0x64,0x79,0x20,0x4d,0x6f,0x74,0x68,0x65,0x72,0x62,0x6f,0x61,
        0x72,0x64,0x20,0x66,0x6f,0x72,0x20,0x41,0x4c,0x49,0x45,0x4e,0x57,0x41,
        0x52,0x45,0x20,0x53,0x41,0x4e,0x44,0x59,0x42,0x52,0x49,0x44,0x47,0x32,
        0x36,0x38,0x34,0x2d,0x43,0x6f,0x70,0x79,0x72,0x69,0x67,0x68,0x74,0x20,
        0x32,0x30,0x31,0x30,0x20,0x4e,0x56,0x49,0x44,0x49,0x41,0x20,0x43,0x6f,
        0x72,0x70,0x6f,0x72,0x61,0x74,0x69,0x6f,0x6e,0x20,0x41,0x6c,0x6c,0x20,
        0x52,0x69,0x67,0x68,0x74,0x73,0x20,0x52,0x65,0x73,0x65,0x72,0x76,0x65,
        0x64,0x2d,0x34,0x35,0x38,0x31,0x30,0x33,0x39,0x34,0x36,0x32,0x30,0x33,
        0x28,0x52,0x29
    })

    Device (WMI1)
    {
        Name (_HID, "PNP0C14")
        Name (_UID, "MXM2")
        Name (_WDG, Buffer() { // Description of data and events supported
            // Methods GUID {F6CB5C3C-9CAE-4ebd-B577-931EA32A2CC0}
            0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xbd, 0x4e, 0xB5, 0x77, 0x93, 0x1E,
            0xA3, 0x2A, 0x2C, 0xC0,
            0x4D, 0x58, // Object ID "MX" = method "WMMX"
            1,          // Instance Count
            0x02,       // Flags (WMIACPI_REGFLAG_METHOD)

            // MOF data {05901221-D566-11d1-B2F0-00A0C9062910}
            0x21, 0x12, 0x90, 0x05, 0x66, 0xd5, 0xd1, 0x11, 0xb2, 0xf0,
            0x00, 0xa0, 0xc9, 0x06, 0x29, 0x10,
            0x58, 0x4D, // Object ID "XM"
            1,          // Instance Count = 1
            0x00,       // Flags

            // NVHG_DISPLAY_HOTKEY, ACPI_NOTIFY_PANEL_SWITCH GUID
            // Notify event 80 (fixed) - Hot-Key, use _DGS, _DCS ? etc. 
            // GUID {E06BDE62-EE75-48F4-A583-B23E69ABF891}
            0x62, 0xDE, 0x6B, 0xE0, 0x75, 0xEE, 0xF4, 0x48, 0xA5, 0x83, 0xB2, 0x3E, 0x69, 0xAB, 0xFB, 0x91,
            0x80, 0x00, 0x01, 0x08,

            // NVHG_DISPLAY_HOTplug, ACPI_NOTIFY_DEVICE_HOTPLUG
            // Notify event 81 (fixed) - Hot-Plug, query _DCS 
            // GUID {3ADEBD0F-0C5F-46ED-AB2E-04962B4FDCBC}
            0x0F, 0xBD, 0xDe, 0x3A, 0x5F, 0x0C, 0xED, 0x46, 0xAB, 0x2E, 0x04, 0x96, 0x2B, 0x4F, 0xDC, 0xBC,
            0x81, 0x00, 0x01, 0x08,

            // NVHG_BRIGHTNESS_INC, ACPI_NOTIFY_INC_BRIGHTNESS_HOTKEY
            // Notify event 86 (fixed) - Backlight Increase 
            // GUID {1E519311-3E75-4208-B05E-EBE17E3FF41F}
            0x11, 0x93, 0x51, 0x1E, 0x75, 0x3E, 0x08, 0x42, 0xB0, 0x5E, 0xEB, 0xE1, 0x7E, 0x3F, 0xF4, 0x1F,
            0x86, 0x00, 0x01, 0x08,

            // NVHG_BRIGHTNESS_DEC, ACPI_NOTIFY_DEC_BRIGHTNESS_HOTKEY
            // Notify event 87 (fixed) - Backlight Decrease 
            // GUID {37F85341-4418-4F24-8533-38FFC7295542}
            0x41, 0x53, 0xF8, 0x37, 0x18, 0x44, 0x24, 0x4F, 0x85, 0x33, 0x38, 0xFF, 0xC7, 0x29, 0x55, 0x42,
            0x87, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_POLICYCHANGE 
            // WMI Notify - Hybrid Policy Request D0
            // GUID {921A2F40-0DC4-402d-AC18-B48444EF9ED2}
            0x40, 0x2F, 0x1A, 0x92, 0xC4, 0x0D, 0x2D, 0x40, 0xAC, 0x18, 0xB4, 0x84, 0x44, 0xEF, 0x9E, 0xD2,
            0xD0, 0x00, 0x01, 0x08,

            // ACPI_NOTIFY_POWER_LEVEL_D1
            // Notify event D1 - Power State P0 
            // GUID {93263095-DA5F-46a0-8B1C-DB2F1F7D66AF}
            0x95, 0x30, 0x26, 0x93, 0x5F, 0xDA, 0xA0, 0x46, 0x8B, 0x1C, 0xDB, 0x2F, 0x1F, 0x7D, 0x66, 0xAF,
            0xD1, 0x00, 0x01, 0x08,

            // ACPI_NOTIFY_POWER_LEVEL_D2
            // Notify event D2 - Power State P1
            // GUID {BE907006-D603-4714-9AE2-9DBA8997A805}
            0x06, 0x70, 0x90, 0xBE, 0x03, 0xD6, 0x14, 0x47, 0x9A, 0xE2, 0x9D, 0xBA, 0x89, 0x97, 0xA8, 0x05,
            0xD2, 0x00, 0x01, 0x08,

            // ACPI_NOTIFY_POWER_LEVEL_D3
            // Notify event D3 - Power State P2
            // GUID {21D355E1-498D-4c1f-AE01-05CEF8DD053F}
            0xE1, 0x55, 0xD3, 0x21, 0x8D, 0x49, 0x1F, 0x4C, 0xAE, 0x01, 0x05, 0xCE, 0xF8, 0xDD, 0x05, 0x3F,
            0xD3, 0x00, 0x01, 0x08,

            // ACPI_NOTIFY_POWER_LEVEL_D4
            // Notify event D4 - Power State P3
            // GUID {EDBCEDF1-BBC9-420e-A3C0-322B1D37C3AA}
            0xF1, 0xED, 0xBC, 0xED, 0xC9, 0xBB, 0x0E, 0x42, 0xA3, 0xC0, 0x32, 0x2B, 0x1D, 0x37, 0xC3, 0xAA,
            0xD4, 0x00, 0x01, 0x08,

            // ACPI_NOTIFY_POWER_LEVEL_D5
            // Notify event D5 - Power State P4
            // GUID {377E84E1-13DE-41fb-A096-0F08528BA689}
            0xE1, 0x84, 0x7E, 0x37, 0xDE, 0x13, 0xFB, 0x41, 0xA0, 0x96, 0x0F, 0x08, 0x52, 0x8B, 0xA6, 0x89,
            0xD5, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_POLICYSET
            // WMI Notify D9 - Hybrid Policy Set 
            // GUID  {C12AD361-9FA9-4C74-901F-95CB0945CF3E}
            0x61, 0xD3, 0x2A, 0xC1, 0xA9, 0x9F, 0x74, 0x4C, 0x90, 0x1F, 0x95, 0xCB, 0x09, 0x45, 0xCF, 0x3E,
            0xD9, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_HYBRIDEC
            // Notify event DA - Hybrid EC event Set 
            // GUID {154BE4DE-1C0A-480d-B237-FC5DA9FAD26F}
            0xDE, 0xE4, 0x4B, 0x15, 0x0A, 0x1C, 0x0D, 0x48, 0xB2, 0x37, 0xFC, 0x5D, 0xA9, 0xFA, 0xD2, 0x6F,
            0xDA, 0x00, 0x01, 0x08,

            // NVHG_DISPLAY_SCALING
            // Notify event DB - Display scaling change
            // GUID {42848006-8886-490E-8C72-2BDCA93A8A09}
            0x06, 0x80, 0x84, 0x42, 0x86, 0x88, 0x0E, 0x49, 0x8C, 0x72, 0x2B, 0xDC, 0xA9, 0x3A, 0x8A, 0x09,
            0xDB, 0x00, 0x01, 0x08,

            // NVHG_ALS
            // Notify event DC - Ambient Light Sensor
            // GUID {B7175ED9-C995-4d93-8F71-EA25B3A47562}
            0xD9, 0x5E, 0x17, 0xB7, 0x95, 0xC9, 0x93, 0x4D, 0x8F, 0x71, 0xEA, 0x25, 0xB3, 0xA4, 0x75, 0x62,
            0xDC, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_HOTPLUG_LIDSTATE
            // Notify event DD - Hotplug (lid state)
            // GUID {A7CB2C50-8979-4990-B51A-095042F884DD}
            0x50, 0x2C, 0xCB, 0xA7, 0x79, 0x89, 0x90, 0x49, 0xB5, 0x1A, 0x09, 0x50, 0x42, 0xF8, 0x84, 0xDD,
            0xDD, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID0
            // Notify event E0 - DDC Ready for _DOD ID#0
            // GUID {92714CC4-BEC7-48ee-9907-5B6AB2954FD0}
            0xC4, 0x4C, 0x71, 0x92, 0xC7, 0xBE, 0xEE, 0x48, 0x99, 0x07, 0x5B, 0x6A, 0xB2, 0x95, 0x4F, 0xD0,
            0xE0, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID1
            // Notify event E1 - DDC Ready for _DOD ID#1
            // GUID {8F40FFBA-B41B-47fe-8274-003AFAB5D8AA}
            0xBA, 0xFF, 0x40, 0x8F, 0x1B, 0xB4, 0xFE, 0x47, 0x82, 0x74, 0x00, 0x3A, 0xFA, 0xB5, 0xD8, 0xAA,
            0xE1, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID2
            // Notify event E2 - DDC Ready for _DOD ID#2
            // GUID {33735367-1120-47f4-B60B-191A8E718A4E}
            0x67, 0x53, 0x73, 0x33, 0x20, 0x11, 0xF4, 0x47, 0xB6, 0x0B, 0x19, 0x1A, 0x8E, 0x71, 0x8A, 0x4E,
            0xE2, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID3
            // Notify event E3 - DDC Ready for _DOD ID#3
            // GUID {373F54E4-5350-4f0b-A877-85896CD14F2F}
            0xE4, 0x54, 0x3F, 0x37, 0x50, 0x53, 0x0B, 0x4F, 0xA8, 0x77, 0x85, 0x89, 0x6C, 0xD1, 0x4F, 0x2F,
            0xE3, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID4
            // Notify event E4 - DDC Ready for _DOD ID#4
            // GUID {5F83F520-D9C3-4d6a-8DE7-676A0DCBDDF7}
            0x20, 0xF5, 0x83, 0x5F, 0xC3, 0xD9, 0x6A, 0x4D, 0x8D, 0xE7, 0x67, 0x6A, 0x0D, 0xCB, 0xDD, 0xF7,
            0xE4, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID5
            // Notify event E5 - DDC Ready for _DOD ID#5
            // GUID {8E0F5CEB-6969-4c2b-B5C3-7A1FF2B3BBC5}
            0xEB, 0x5C, 0x0F, 0x8E, 0x69, 0x69, 0x2B, 0x4C, 0xB5, 0xC3, 0x7A, 0x1F, 0xF2, 0xB3, 0xBB, 0xC5,
            0xE5, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID6
            // Notify event E6 - DDC Ready for _DOD ID#6
            // GUID {08FE9118-840F-4884-82D7-4A0A28C2549F}
            0x18, 0x91, 0xFE, 0x08, 0x0F, 0x84, 0x84, 0x48, 0x82, 0xD7, 0x4A, 0x0A, 0x28, 0xC2, 0x54, 0x9F,
            0xE6, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID7
            // Notify event E7 - DDC Ready for _DOD ID#7
            // GUID {FB29FB39-B36D-442a-B351-337FD6DD97EE}
            0x39, 0xFB, 0x29, 0xFB, 0x6D, 0xB3, 0x2A, 0x44, 0xB3, 0x51, 0x33, 0x7F, 0xD6, 0xDD, 0x97, 0xEE,
            0xE7, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID8
            // Notify event E8 - DDC Ready for _DOD ID#8
            // GUID {BBD32CC3-B9E3-4765-AEF6-86067AB1B1D5}
            0xC3, 0x2C, 0xD3, 0xBB, 0xE3, 0xB9, 0x64, 0x47, 0xAE, 0xF6, 0x86, 0x06, 0x7A, 0xB1, 0xB1, 0xD5,
            0xE8, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPID9
            // Notify event E9 - DDC Ready for _DOD ID#9
            // GUID {A056839F-44E9-4542-9C0F-9CFA88579FA6}
            0x9F, 0x83, 0x56, 0xA0, 0xE9, 0x44, 0x42, 0x45, 0x9C, 0x0F, 0x9C, 0xFA, 0x88, 0x57, 0x9F, 0xA6,
            0xE9, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPIDA
            // Notify event EA - DDC Ready for _DOD ID#A
            // GUID {B2CBE89D-1BAD-4d29-857B-CB7BCFF86EA6}
            0x9D, 0xE8, 0xCB, 0xB2, 0xAD, 0x1B, 0x29, 0x4D, 0x85, 0x7B, 0xCB, 0x7B, 0xCF, 0xF8, 0x6E, 0xA6,
            0xEA, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_DDCREADY_DISPIDB
            // Notify event EB - DDC Ready for _DOD ID#B
            // GUID {A5AC3B57-CC31-4238-B0FE-AD3B07EC1213}
            0x57, 0x3B, 0xAC, 0xA5, 0x31, 0xCC, 0x38, 0x42, 0xB0, 0xFE, 0xAD, 0x3B, 0x07, 0xEC, 0x12, 0x13,
            0xEB, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_REEVAL_PLATPOLICY
            // Notify event EF - Reevaluate PLATPOLICY
            // GUID {B3E485D2-3CC1-4b94-8F31-77BA2FDC9EBE}
            0xD2, 0x85, 0xE4, 0xB3, 0xC1, 0x3C, 0x94, 0x4B, 0x8F, 0x31, 0x77, 0xBA, 0x2F, 0xDC, 0x9E, 0xBE, 
            0xEF, 0x00, 0x01, 0x08,

            // NVHG_NOTIFY_REEVAL_DISPSTATUS
            // Notify event F0 - Reevaluate DISPLAYSTATUS
            // GUID {360D6FB6-1D4E-4fa6-B848-1BE33DD8EC7B}
            0xB6, 0x6F, 0x0D, 0x36, 0x4E, 0x1D, 0xA6, 0x4F, 0xB8, 0x48, 0x1B, 0xE3, 0x3D, 0xD8, 0xEC, 0x7B,
            0xF0, 0x00, 0x01, 0x08
        })

        //
        // Method Execution
        // Arg1 = 0x10 indicates mGPU, 0x0~0x0F for dGPU's. (MXM 2.xx)
        // Arg1 = if bit 8 set then Arg1[7:0] has bus number.
        //
        Method (WMMX, 3)
        {
            CreateDWordField (Arg2, 0, FUNC) // Get function name.
            If (LGreaterEqual (SizeOf (Arg2), 4)) 
            {
                CreateDWordField (Arg2, 4, ARGA) // Get generic first argument.
            }
            If (LGreaterEqual (SizeOf (Arg2), 8)) 
            {
                CreateDWordField (Arg2, 8, ARGB) // Get generic second argument.
            }
            If (LEqual (FUNC, 0x41494c53)) // "SLIA"
            {
                Return (\_SB.PCI0.SLIC)
            }
            If (LEqual (FUNC, 0x4C43425F)) // "_BCL"
            {
                If (Lequal (EDPE, One))
                {
                    Return (DGPU_SCOPE.DSP1._BCL())
                }
                Else
                {
                    Return (DGPU_SCOPE.LCD0._BCL())
                }
            }
            If (LEqual (FUNC, 0x4D43425F)) //"_BCM"
            {
//                Return (DGPU_SCOPE.LCD0._BCM())
            }
            If (LEqual (FUNC, 0x444F445F)) // "_DOD"
            {
                If (And (Arg1, 0x100)) { // Use Bus number to ID GPU?
                    If (LEqual (And (Arg1, 0xFF), DGPU_SCOPE.GBUS())) {
                        Return (DGPU_SCOPE._DOD())           
                    }
                    If (LEqual (And (Arg1, 0xFF), DGPU2_SCOPE.GBUS())) {
                        If (LEqual (DGPU_SCOPE.SLVS, 1))
                        {
                            Return (DGPU2_SCOPE._DOD())
                        }
                    }
                } Else { // Else use older ID scheme.
                    If (LEqual (Arg1, 0x0)) {
                        Return (DGPU_SCOPE._DOD())
                    }
                    If (LEqual (Arg1, 0x1)) {
                        If (LEqual (DGPU_SCOPE.SLVS, 1))
                        {
                            Return (DGPU2_SCOPE._DOD())
                        }
                    }
                } 
            }
            If (LEqual (FUNC, 0x534F445F)) // "_DOS"
            {
                // Fill out if _DOS is used
            }
            If (LEqual (FUNC, 0x5343445F)) // "_DCS"
            {
                // ARGA is _DOD/ADR ID necessary when accessing through WMI
                // ARGB is the actual args
                // Fill out if _DCS is used
            }
            If (LEqual (FUNC, 0x4D4F525F)) // "_ROM"
            {
                // ARGA is the offset of the ROM data
                // ARGB is the size of the buffer to fill up
                // Fill out if _ROM is used
            }
            If (LEqual (FUNC, 0x4D53445F)) // "_DSM"
            {      
                If (LGreaterEqual (SizeOf (Arg2), 24))
                {
                    CreateField (Arg2, 32, 128, MUID)
                    CreateDWordField (Arg2, 20, REVI)
                    CreateDWordField (Arg2, 24, SFNC)
                    CreateDWordField (Arg2, 28, ARGD)
                    If (And (Arg1, 0x100)) { // Use Bus number to ID GPU?
                        If (LEqual (And (Arg1, 0xFF), DGPU_SCOPE.GBUS())) {
                            Return (DGPU_SCOPE._DSM (MUID, REVI, SFNC, ARGD))
                        }
                        If (LEqual (And (Arg1, 0xFF), DGPU2_SCOPE.GBUS())) {
                            If (LEqual (DGPU_SCOPE.SLVS, 1))
                            {
                                Return (DGPU2_SCOPE._DSM (MUID, REVI, SFNC, ARGD))
                            }
                        }
                    } Else { // Else use older ID scheme.
                        If (LEqual (Arg1, 0x0)) {
                            Return (DGPU_SCOPE._DSM (MUID, REVI, SFNC, ARGD))
                        }
                        If (LEqual (Arg1, 0x1)) {
                            If (LEqual (DGPU_SCOPE.SLVS, 1))
                            {
                                Return (DGPU2_SCOPE._DSM (MUID, REVI, SFNC, ARGD))
                            }
                        }
                    }
                }
            }
            If (LEqual (FUNC, 0x584D584D)) // "MXMX"
            {
                // ARGA is _DOD/ADR ID necessary when accessing through WMI
                // ARGB is the actual args
                // Fill out if MXMX is used
            }
            If (LEqual (FUNC, 0x5344584D)) // "MXDS"
            {
                // ARGA is _DOD/ADR ID necessary when accessing through WMI
                // ARGB is the actual args
                // Fill out if MXDS is used
            }
            If (LEqual (FUNC, 0x494D584D)) // "MXMI"
            {
                Return (DGPU_SCOPE.MXMI (ARGA))
            }
            If (LEqual (FUNC, 0x534D584D))// "MXMS"
            {
                If (And (Arg1, 0x100)) { // Use Bus number to ID GPU?
                    If (LEqual (And (Arg1, 0xFF), DGPU_SCOPE.GBUS())) {
                        Return (DGPU_SCOPE.MXMS(ARGA))
                    }
                    If (LEqual (And (Arg1, 0xFF), DGPU2_SCOPE.GBUS())) {
                        If (LEqual (DGPU_SCOPE.SLVS, 1))
                        {
                            Return (DGPU2_SCOPE.MXMS (ARGA))
                        }
                    }
                } Else { // Else use older ID scheme.
                    If (LEqual (Arg1, 0x0)) {
                        Return (DGPU_SCOPE.MXMS (ARGA))
                    }
                    If (LEqual (Arg1, 0x1)) {
                        If (LEqual (DGPU_SCOPE.SLVS, 1))
                        {
                            Return (DGPU2_SCOPE.MXMS (ARGA))
                        }
                    }
                }
            }
            Return (0)
	    }

        // This is compiled form of the associated MOF declaration
        Name (WQXM, Buffer() {
            0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00, 0x70, 0x05, 0x00, 0x00, 0xE4, 0x2C, 0x00, 0x00, 
            0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54, 0x18, 0xD2, 0x95, 0x00, 0x01, 0x06, 0x18, 0x42, 
            0x10, 0x17, 0x10, 0x8A, 0xE6, 0x80, 0x42, 0x04, 0x92, 0x43, 0xA4, 0x30, 0x30, 0x28, 0x0B, 0x20, 
            0x86, 0xA4, 0x04, 0x16, 0x01, 0x21, 0xAF, 0x02, 0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21, 
            0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01, 0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D, 
            0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0, 0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5, 
            0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02, 0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x60, 0x68, 0x1C, 
            0x1A, 0x3B, 0x0C, 0xCB, 0x04, 0xD3, 0x20, 0x0E, 0xA3, 0x6C, 0x64, 0x11, 0x18, 0xB7, 0x53, 0x01, 
            0x72, 0x05, 0x08, 0x13, 0x20, 0x1E, 0x55, 0x18, 0xCD, 0x41, 0x11, 0xB8, 0xD0, 0x18, 0x19, 0x10, 
            0xF2, 0x28, 0xC0, 0xEA, 0x28, 0x34, 0xA9, 0x04, 0x76, 0x2F, 0x40, 0xA3, 0x00, 0x6D, 0x02, 0x1C, 
            0x0A, 0x50, 0x28, 0xC0, 0x1A, 0x86, 0x9C, 0x41, 0xC8, 0x16, 0xB6, 0x30, 0x1A, 0x14, 0x60, 0x11, 
            0x45, 0x23, 0x38, 0x8B, 0x8A, 0xE7, 0x24, 0x94, 0x80, 0xF6, 0x86, 0x20, 0x3C, 0x63, 0x36, 0x86, 
            0x27, 0xC4, 0x20, 0x95, 0x61, 0x08, 0x22, 0x6E, 0x84, 0x63, 0x69, 0x7F, 0x10, 0x44, 0xBE, 0x82, 
            0x71, 0xB3, 0x48, 0xA3, 0x41, 0x8D, 0x35, 0xC1, 0xB1, 0x7B, 0x34, 0x27, 0xDC, 0xB9, 0x00, 0xE9, 
            0x73, 0x13, 0xC8, 0xD1, 0x9D, 0x46, 0x9D, 0x83, 0x26, 0xC3, 0x63, 0x58, 0x09, 0xFE, 0x03, 0x7C, 
            0x0A, 0xC0, 0xBB, 0x06, 0xD4, 0xF4, 0x0F, 0x9E, 0x09, 0x82, 0x43, 0x0D, 0xD1, 0xA3, 0x0E, 0x77, 
            0x02, 0xE7, 0x75, 0x24, 0x0C, 0xE2, 0x88, 0x8E, 0x1B, 0x3B, 0xAB, 0x93, 0x39, 0xE8, 0x52, 0x05, 
            0x98, 0x3D, 0x00, 0x68, 0x70, 0x09, 0x4E, 0xFB, 0x4C, 0x42, 0xBF, 0x07, 0x9C, 0x4F, 0xCF, 0x63, 
            0x63, 0x83, 0x40, 0x8D, 0xCC, 0xFF, 0x7F, 0x68, 0x0F, 0xF2, 0xB4, 0x62, 0x86, 0x7C, 0x16, 0x38, 
            0x2C, 0x26, 0x16, 0x42, 0x9B, 0xD4, 0x78, 0x80, 0xC0, 0x01, 0xE0, 0xD1, 0x20, 0xC2, 0x9B, 0x81, 
            0xE7, 0x6B, 0x82, 0x41, 0x21, 0xE4, 0x64, 0x3C, 0x28, 0x31, 0xE7, 0x03, 0x32, 0x97, 0x10, 0x0F, 
            0x01, 0xC7, 0x10, 0x23, 0xE8, 0x19, 0x15, 0x8D, 0xAC, 0x89, 0xF8, 0x0C, 0xE0, 0x71, 0x5B, 0x16, 
            0x08, 0x25, 0x30, 0xB0, 0xCF, 0x0D, 0xEF, 0x10, 0x86, 0xC5, 0x8D, 0x26, 0xB0, 0xCF, 0x17, 0x16, 
            0x38, 0x28, 0x14, 0xAC, 0xEF, 0x0A, 0x31, 0x9F, 0x07, 0x8E, 0xF3, 0x80, 0x2D, 0x7C, 0xA2, 0x04, 
            0xF8, 0x90, 0x3C, 0x1A, 0x78, 0x83, 0x84, 0x6F, 0xFD, 0x08, 0x40, 0x80, 0x9F, 0x18, 0x4C, 0x60, 
            0x79, 0xC0, 0xE8, 0x51, 0xDA, 0xAF, 0x00, 0x84, 0xE0, 0x2F, 0x16, 0x4F, 0x01, 0xAF, 0x03, 0x11, 
            0x8E, 0x05, 0xA6, 0xC8, 0xB1, 0xA1, 0xE1, 0xF9, 0xC1, 0x21, 0x7A, 0xD4, 0x73, 0x09, 0x7F, 0x34, 
            0x51, 0x4E, 0xE1, 0x70, 0x7C, 0xE4, 0x30, 0x42, 0xF8, 0x27, 0x8D, 0x27, 0x0F, 0x6B, 0xBE, 0x03, 
            0x68, 0x4A, 0x6F, 0x01, 0xEF, 0x0F, 0x1E, 0x01, 0x46, 0x80, 0x84, 0xA3, 0x09, 0x26, 0xF2, 0xE9, 
            0x04, 0x54, 0xFF, 0xFF, 0xD3, 0x09, 0x60, 0x6A, 0xCA, 0x41, 0xDF, 0x4E, 0x9E, 0x22, 0x02, 0x45, 
            0x09, 0xF2, 0x12, 0xF0, 0x56, 0x12, 0x24, 0xC2, 0x7B, 0xC9, 0x93, 0xC9, 0xD3, 0x89, 0xC5, 0x9D, 
            0x52, 0x84, 0x11, 0xE5, 0xE8, 0x03, 0x85, 0x79, 0x31, 0x78, 0x3F, 0x31, 0x64, 0x90, 0xB0, 0x9E, 
            0x47, 0xAC, 0x38, 0x01, 0x83, 0x45, 0x79, 0x43, 0x79, 0x3A, 0x61, 0x21, 0x1F, 0x1A, 0xD2, 0x70, 
            0x3A, 0x01, 0x28, 0xF0, 0xFF, 0x3F, 0x9D, 0xC0, 0x8F, 0x7A, 0x3A, 0x41, 0x0F, 0xD7, 0xA7, 0x0C, 
            0x0C, 0xF2, 0x01, 0xF9, 0xD4, 0xE1, 0x73, 0xC0, 0x69, 0xF8, 0x78, 0x82, 0x11, 0x75, 0x3C, 0x41, 
            0x9D, 0x1E, 0x7C, 0x3C, 0x61, 0xE7, 0x83, 0xB3, 0x78, 0x0C, 0xF0, 0xE9, 0x04, 0x73, 0x4F, 0xF0, 
            0xE9, 0x04, 0x6C, 0xA3, 0x81, 0x71, 0x3C, 0x01, 0xDF, 0xD1, 0x05, 0x77, 0x3C, 0x01, 0xC3, 0x60, 
            0x60, 0x9C, 0x4F, 0x80, 0xC7, 0x78, 0x71, 0xC7, 0x00, 0x0F, 0x81, 0x0F, 0xE0, 0x71, 0xE3, 0xF4, 
            0xAC, 0x74, 0x52, 0xC8, 0x93, 0x08, 0x1F, 0x14, 0xE6, 0xC0, 0x02, 0x1C, 0xFE, 0xFF, 0x07, 0x16, 
            0xC0, 0xD4, 0xFD, 0xE0, 0x94, 0x9F, 0x57, 0x7C, 0x61, 0x31, 0xF2, 0x3B, 0xCA, 0x8B, 0x4A, 0x8C, 
            0x03, 0x7F, 0x57, 0x89, 0xE2, 0x11, 0xBC, 0xA9, 0x44, 0x0B, 0xF6, 0xC0, 0xE2, 0xE3, 0x8A, 0x8F, 
            0x68, 0xC6, 0x8B, 0x75, 0x18, 0xAF, 0x2E, 0x46, 0x8A, 0x12, 0x33, 0xDE, 0xCB, 0x9A, 0x21, 0x1E, 
            0x58, 0x00, 0x36, 0xFC, 0xFF, 0x0F, 0x2C, 0xC0, 0xE4, 0x1A, 0xF4, 0xC0, 0x02, 0x8C, 0x47, 0xC3, 
            0x0E, 0x2C, 0xC0, 0x74, 0x30, 0xEC, 0xC0, 0x02, 0xB8, 0xFC, 0xFF, 0x1F, 0x58, 0x00, 0x53, 0x07, 
            0x52, 0xDF, 0x55, 0x62, 0x3C, 0x93, 0x32, 0x84, 0x17, 0x95, 0xF7, 0x34, 0x1F, 0xD8, 0xF8, 0xD5, 
            0xC0, 0x07, 0x83, 0xB7, 0x35, 0x83, 0x44, 0x7A, 0x60, 0xF1, 0xD5, 0xC5, 0x10, 0x41, 0x23, 0xC6, 
            0x88, 0xFA, 0xC0, 0xF2, 0xE0, 0x66, 0x9C, 0x18, 0x0F, 0x2C, 0x00, 0x1B, 0xFE, 0xFF, 0x07, 0x16, 
            0x60, 0x72, 0x15, 0x7A, 0x60, 0x01, 0xC6, 0xA3, 0x61, 0x07, 0x16, 0x60, 0x3A, 0x18, 0x76, 0x60, 
            0x01, 0x5C, 0xFE, 0xFF, 0x0F, 0x6C, 0x80, 0xAB, 0x2B, 0xCA, 0x13, 0xAA, 0xEF, 0x29, 0x51, 0x5E, 
            0x51, 0x7C, 0x5B, 0x31, 0x88, 0x6F, 0x2B, 0x3E, 0xA8, 0xF9, 0x6C, 0xF0, 0xC0, 0x6A, 0x40, 0x76, 
            0x60, 0x35, 0xC4, 0x53, 0xAB, 0x11, 0x9E, 0x00, 0x82, 0x87, 0x3B, 0x91, 0x60, 0x11, 0x1E, 0x5D, 
            0x7C, 0x60, 0x01, 0xD8, 0xF0, 0xFF, 0x3F, 0xB0, 0x00, 0x93, 0x9B, 0xC0, 0x03, 0x0B, 0x30, 0x1E, 
            0x0D, 0x3B, 0xB0, 0x00, 0xD3, 0xC1, 0xB0, 0x03, 0x0B, 0xE0, 0xF2, 0xFF, 0x7F, 0x60, 0x01, 0x4C, 
            0x41, 0xBE, 0x13, 0xBC, 0xAB, 0x9C, 0x73, 0x8C, 0x57, 0x34, 0x43, 0xBF, 0xA8, 0xFA, 0x94, 0xEA, 
            0xDB, 0x8A, 0x81, 0x0C, 0x76, 0x4E, 0x0F, 0xAC, 0x46, 0x7A, 0x6A, 0x61, 0xB7, 0x55, 0x83, 0x3C, 
            0xB9, 0x18, 0xE1, 0xE8, 0x43, 0x1F, 0xC0, 0x8B, 0xAB, 0x0F, 0x2C, 0x00, 0x1F, 0xFE, 0xFF, 0x07, 
            0x16, 0xE0, 0x71, 0x2A, 0xF6, 0x81, 0x05, 0xF8, 0x8E, 0x86, 0x1F, 0x58, 0x80, 0xE7, 0x60, 0xF8, 
            0x81, 0x05, 0x70, 0xF9, 0xFF, 0x3F, 0xB0, 0x00, 0xAE, 0x0E, 0x08, 0xBE, 0x10, 0xC6, 0x08, 0xEC, 
            0xDB, 0xAA, 0xD1, 0x8E, 0xFB, 0x81, 0x1D, 0x33, 0x8E, 0xA7, 0x16, 0x5F, 0x56, 0x5E, 0x30, 0x1E, 
            0x58, 0x0E, 0x3F, 0x9E, 0xAF, 0xEC, 0xC6, 0x7B, 0x5A, 0xF5, 0xF1, 0x28, 0x4E, 0xC4, 0x08, 0x81, 
            0x1F, 0x58, 0x01, 0x3E, 0xFC, 0xFF, 0x0F, 0x2C, 0xC0, 0xE4, 0xC0, 0x0E, 0x8C, 0x47, 0xC3, 0x0F, 
            0x2C, 0xC0, 0xF4, 0xC0, 0x0E, 0x18, 0xFD, 0xFF, 0x1F, 0x58, 0x00, 0x53, 0x77, 0x74, 0x83, 0x86, 
            0x7D, 0x46, 0x09, 0x11, 0xE1, 0x19, 0xE5, 0x45, 0xC5, 0x18, 0x51, 0x9E, 0x55, 0x3D, 0x82, 0x58, 
            0xCF, 0x05, 0xAF, 0x6C, 0x46, 0x3C, 0xF8, 0xA0, 0x8F, 0x07, 0x51, 0x7C, 0x61, 0x31, 0xCE, 0x4B, 
            0x4B, 0x94, 0x08, 0x01, 0xA3, 0xF8, 0xDC, 0xEE, 0x03, 0x0B, 0xC0, 0x86, 0xFF, 0xFF, 0x81, 0x05, 
            0x98, 0x9C, 0x43, 0xD8, 0x81, 0x05, 0xD8, 0x8E, 0x86, 0x1D, 0x58, 0x80, 0xE9, 0x00, 0xD8, 0x81, 
            0x05, 0x70, 0xF9, 0xFF, 0x3F, 0xB0, 0x00, 0xA6, 0xEE, 0xAB, 0x86, 0x79, 0x42, 0x78, 0x44, 0xF7, 
            0x88, 0x1F, 0xD8, 0x19, 0xF8, 0x53, 0x4A, 0xA8, 0x28, 0x1E, 0x47, 0xA4, 0xF7, 0x80, 0x07, 0x56, 
            0xC3, 0x1D, 0x44, 0x3C, 0x9F, 0x55, 0x7C, 0x22, 0xF0, 0xE9, 0xDD, 0x90, 0xCF, 0x87, 0xBE, 0xB6, 
            0xFB, 0xC0, 0x06, 0xF0, 0xE1, 0xFF, 0x7F, 0x60, 0x01, 0x26, 0xE7, 0x80, 0x07, 0x16, 0x60, 0x3C, 
            0x1A, 0x76, 0x60, 0x01, 0xA6, 0x83, 0x61, 0x07, 0x16, 0xC0, 0xE5, 0xFF, 0xFF, 0xC0, 0x02, 0x98, 
            0xBA, 0x9F, 0xFB, 0x5E, 0xF1, 0x16, 0x60, 0x90, 0xB7, 0x54, 0x5F, 0xD4, 0x0D, 0x64, 0xF8, 0x07, 
            0x16, 0x5F, 0x0D, 0x3C, 0x8D, 0x07, 0x16, 0x9F, 0x0C, 0x42, 0xBD, 0xB2, 0xFA, 0xAE, 0x60, 0x84, 
            0x77, 0x56, 0x1F, 0x0F, 0x7C, 0x60, 0x8B, 0x15, 0x23, 0x5E, 0x84, 0x07, 0x16, 0x80, 0x0D, 0xFF, 
            0xFF, 0x03, 0x0B, 0x30, 0xB9, 0x2C, 0xF8, 0xC0, 0x02, 0x7C, 0x47, 0xC3, 0x0E, 0x2C, 0xC0, 0x74, 
            0x30, 0xEC, 0xC0, 0x02, 0xB8, 0xFC, 0xFF, 0x1F, 0x58, 0x00, 0x53, 0x27, 0x14, 0x23, 0x9C, 0xEF, 
            0x3B, 0x5A, 0xE4, 0x07, 0x36, 0x06, 0x11, 0x2A, 0x5E, 0x98, 0x07, 0x16, 0xDF, 0xD7, 0xAC, 0xF8, 
            0xC0, 0x42, 0xE6, 0xE0, 0x7B, 0xAB, 0x41, 0xDE, 0x5C, 0x42, 0xC4, 0x7D, 0x5B, 0x7B, 0x43, 0x78, 
            0x6B, 0x37, 0x5A, 0xAC, 0x67, 0x56, 0x1F, 0x58, 0x00, 0x36, 0xFC, 0xFF, 0x0F, 0x2C, 0xC0, 0xE4, 
            0x28, 0xF0, 0xC0, 0x02, 0x8C, 0x47, 0xC3, 0x0E, 0x2C, 0xC0, 0x74, 0x30, 0xEC, 0xC0, 0x02, 0x38, 
            0x51, 0x68, 0xD3, 0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3, 0xA0, 0x56, 0x9F, 0x4A, 
            0x8D, 0x19, 0x33, 0x04, 0xA5, 0x80, 0x0F, 0x01, 0x9D, 0x08, 0x2C, 0xEF, 0xD9, 0x20, 0x10, 0xCB, 
            0xA0, 0x10, 0x88, 0xA5, 0xBF, 0x5A, 0x04, 0xE2, 0xE0, 0x20, 0xFA, 0xFF, 0x83, 0x38, 0xE2, 0x93, 
            0x43, 0x60, 0xC4, 0x04, 0x18, 0x05, 0xA1, 0x11, 0x55, 0x80, 0x51, 0x1B, 0x60, 0x14, 0x84, 0x46, 
            0xD4, 0x01, 0x46, 0x8D, 0x80, 0x51, 0x10, 0x1A, 0x51, 0x09, 0x18, 0xB5, 0x02, 0x46, 0x41, 0x68, 
            0x44, 0x2D, 0x60, 0xD4, 0x0C, 0x18, 0x05, 0xA1, 0x11, 0xD5, 0x80, 0x51, 0x3B, 0x60, 0x14, 0x84, 
            0x46, 0xD4, 0x03, 0x46, 0x57, 0x28, 0x30, 0x02, 0x42, 0x23, 0x2A, 0x02, 0xA3, 0x96, 0xC0, 0x28, 
            0x08, 0x8D, 0xA8, 0x09, 0x8C, 0x9A, 0x02, 0xA3, 0x20, 0x34, 0xA2, 0x2A, 0x10, 0xF6, 0xFF, 0x07
        })
	}
}
