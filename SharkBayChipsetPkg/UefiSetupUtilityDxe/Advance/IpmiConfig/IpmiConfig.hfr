/** @file
 IPMI BMC Configuration HFR implementation.

;******************************************************************************
;* Copyright (c) 2013, Insyde Software Corporation. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;******************************************************************************
*/

//
// IPMI BMC Configuration Form
//
form
  formid = IPMI_CONFIG_FORM_ID,
  title  = STRING_TOKEN(STR_IPMI_CONFIG_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_IPMI_CONFIG_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;

    //
    // Enable/Disable IPMI Support
    //
    oneof
      varid       = SystemConfig.IpmiEnable,
      prompt      = STRING_TOKEN(STR_IPMI_SUPPORT),
      help        = STRING_TOKEN(STR_IPMI_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
    endoneof;

    subtitle text = STRING_TOKEN(STR_BLANK_STRING);

    suppressif
      ideqval SystemConfig.IpmiEnable == 0;

      //
      // IPMI Interface Type
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_IPMI_INTERFACE_TYPE),
        text  = STRING_TOKEN(STR_CURRENT_IPMI_INTERFACE_TYPE),
        flags = 0,
        key   = 0;

      //
      // Three Base Address (OS, FW, SMM)
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_IPMI_OS_BASE_ADDRESS),
        text  = STRING_TOKEN(STR_CURRENT_IPMI_OS_BASE_ADDRESS),
        flags = 0,
        key   = 0;

      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_IPMI_POST_BASE_ADDRESS),
        text  = STRING_TOKEN(STR_CURRENT_IPMI_POST_BASE_ADDRESS),
        flags = 0,
        key   = 0;

      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_IPMI_SMM_BASE_ADDRESS),
        text  = STRING_TOKEN(STR_CURRENT_IPMI_SMM_BASE_ADDRESS),
        flags = 0,
        key   = 0;

      subtitle text = STRING_TOKEN(STR_BLANK_STRING);

      //
      // BMC Status
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_BMC_STATUS),
        text  = STRING_TOKEN(STR_CURRENT_BMC_STATUS),
        flags = 0,
        key   = 0;

      //
      // BMC Firmware Version
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_BMC_FIRMWARE_VERSION),
        text  = STRING_TOKEN(STR_CURRENT_BMC_FIRMWARE_VERSION),
        flags = 0,
        key   = 0;

      //
      // BMC Support IPMI Version
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_IPMI_SPEC_VERSION),
        text  = STRING_TOKEN(STR_CURRENT_IPMI_SPEC_VERSION),
        flags = 0,
        key   = 0;

      //
      // BMC MAC Address
      //
      text
        help  = STRING_TOKEN(STR_BLANK_STRING),
        text  = STRING_TOKEN(STR_BMC_MAC_ADDRESS),
        text  = STRING_TOKEN(STR_CURRENT_BMC_MAC_ADDRESS),
        flags = 0,
        key   = 0;

      subtitle text = STRING_TOKEN(STR_BLANK_STRING);

      //
      // BMC Warmup time in seconds
      //
      numeric
        varid   = SystemConfig.BmcWarmupTime,
        prompt  = STRING_TOKEN(STR_BMC_WARMUP_TIME),
        help    = STRING_TOKEN(STR_BMC_WARMUP_TIME_HELP),
        minimum = 0,
        maximum = 240,
        step    = 3,
        default = 0,
      endnumeric;

    endif;

    suppressif
      ideqvallist SystemConfig.BmcStatus == 0 2 3 4
      OR
      ideqval SystemConfig.IpmiEnable == 0;

      //
      // ACPI SPMI Enable/Disable
      //
      oneof
        varid       = SystemConfig.IpmiSpmiEnable,
        prompt      = STRING_TOKEN(STR_IPMI_SPMI_TABLE),
        help        = STRING_TOKEN(STR_IPMI_SPMI_TABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;

      //
      // Boot Option Support
      //
      oneof
        varid       = SystemConfig.IpmiBootOption,
        prompt      = STRING_TOKEN(STR_IPMI_BOOT_OPTION),
        help        = STRING_TOKEN(STR_IPMI_BOOT_OPTION_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
      endoneof;

      //
      // Set BIOS Version to BMC option
      //
      oneof
        varid       = SystemConfig.IpmiSetBiosVersion,
        prompt      = STRING_TOKEN(STR_IPMI_SEND_BIOS_VERSION),
        help        = STRING_TOKEN(STR_IPMI_SEND_BIOS_VERSION_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
      endoneof;

      subtitle text = STRING_TOKEN(STR_BLANK_STRING);

      //
      // BMC Configuration Subform
      //
      goto BMC_CONFIG_FORM_ID,
        prompt = STRING_TOKEN(STR_BMC_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_BMC_CONFIG_FORM_HELP);

      //
      // SDR List Subform
      //
      goto IPMI_SDR_LIST_FORM_ID,
        prompt = STRING_TOKEN(STR_IPMI_SDR_LIST_TITLE),
        help   = STRING_TOKEN(STR_IPMI_SDR_LIST_HELP);

      subtitle text = STRING_TOKEN(STR_BLANK_STRING);

      //
      // "Execute IPMI Utiltiy" Option
      //
      text
        help  = STRING_TOKEN(STR_EXECUTE_IPMI_UTILITY_HELP),
        text  = STRING_TOKEN(STR_EXECUTE_IPMI_UTILITY),
        text  = STRING_TOKEN(STR_BLANK_STRING),
        flags = INTERACTIVE,
        key   = KEY_EXECUTE_IPMI_UTILITY;

    endif;

  endif;

endform;


//
// BMC Configuration Page
//
form
  formid = BMC_CONFIG_FORM_ID,
  title  = STRING_TOKEN(STR_BMC_CONFIG_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_BMC_CONFIG_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // Watchdog Timer Support
  //
  oneof
    varid       = SystemConfig.BmcWdtEnable,
    prompt      = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER),
    help        = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
  endoneof;

  grayoutif
    ideqval SystemConfig.BmcWdtEnable == 0;

    //
    // Watchdog Timer Timeout
    //
    numeric
      varid   = SystemConfig.BmcWdtTimeout,
      prompt  = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_TIMEOUT),
      help    = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_TIMEOUT_HELP),
      minimum = 2,
      maximum = 8,
      step    = 1,
      default = 5,
    endnumeric;

    //
    // Watchdog Timer Expire Action
    //
    oneof
      varid       = SystemConfig.BmcWdtAction,
      prompt      = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_ACTION),
      help        = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_ACTION_HELP),
      option text = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_NO_ACTION),   value = 0, flags = 0;
      option text = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_HARD_RESET),  value = 1, flags = DEFAULT;
      option text = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_POWER_DOWN),  value = 2, flags = 0;
      option text = STRING_TOKEN(STR_BMC_WATCHDOG_TIMER_POWER_CYCLE), value = 3, flags = 0;
    endoneof;

  endif;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // Power Cycle Time Support
  //
  oneof
    varid       = SystemConfig.BmcPowerCycleTimeEnable,
    prompt      = STRING_TOKEN(STR_BMC_POWER_CYCLE_SUPPORT),
    help        = STRING_TOKEN(STR_BMC_POWER_CYCLE_SUPPORT_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
  endoneof;

  grayoutif
    ideqval SystemConfig.BmcPowerCycleTimeEnable == 0;

    //
    // Power Cycle Time Value
    //
    numeric
      varid   = SystemConfig.BmcPowerCycleTime,
      prompt  = STRING_TOKEN(STR_BMC_POWER_CYCLE_TIME),
      help    = STRING_TOKEN(STR_BMC_POWER_CYCLE_TIME_HELP),
      minimum = 0,
      maximum = 255,
      step    = 1,
      default = 10,
    endnumeric;

  endif;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // Power Button Disable/Enable
  //
  oneof
    varid       = SystemConfig.BmcFrontPanelPwrBtn,
    prompt      = STRING_TOKEN(STR_BMC_FRONTPANEL_POWER_BUTTON),
    help        = STRING_TOKEN(STR_BMC_FRONTPANEL_POWER_BUTTON_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
  endoneof;

  //
  // Reset Button Disable/Enable
  //
  oneof
    varid       = SystemConfig.BmcFrontPanelRstBtn,
    prompt      = STRING_TOKEN(STR_BMC_FRONTPANEL_RESET_BUTTON),
    help        = STRING_TOKEN(STR_BMC_FRONTPANEL_RESET_BUTTON_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
  endoneof;

  //
  // NMI Button Disable/Enable
  //
  oneof
    varid       = SystemConfig.BmcFrontPanelNmiBtn,
    prompt      = STRING_TOKEN(STR_BMC_FRONTPANEL_NMI_BUTTON),
    help        = STRING_TOKEN(STR_BMC_FRONTPANEL_NMI_BUTTON_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
  endoneof;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // Create "BMC Lan port config"
  //
  oneof
    varid       = SystemConfig.BmcLanPortConfig,
    prompt      = STRING_TOKEN(STR_BMC_LAN_PORT_CONFIG),
    help        = STRING_TOKEN(STR_BMC_LAN_PORT_CONFIG_HELP),
    option text = STRING_TOKEN(STR_BMC_LAN_PORT_DEDICATED), value = 2, flags = DEFAULT;
    option text = STRING_TOKEN(STR_BMC_LAN_PORT_SHARED),    value = 3, flags = 0;
  endoneof;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // Create "BMC LAN Channel" option
  //
  numeric
    varid   = SystemConfig.BmcLanChannel,
    prompt  = STRING_TOKEN(STR_BMC_LAN_CHANNEL),
    help    = STRING_TOKEN(STR_BMC_LAN_CHANNEL_HELP),
    flags   = INTERACTIVE,
    key     = KEY_SET_BMC_LAN_CHANNEL_NUM,
    minimum = 0,
    maximum = 15,
    step    = 0,
    default = 1,
  endnumeric;

  //
  // Create "BMC DHCP enable/disable" option
  //
  oneof
    varid       = SystemConfig.BmcIPv4Source,
    prompt      = STRING_TOKEN(STR_BMC_IPV4_SOURCE),
    help        = STRING_TOKEN(STR_BMC_IPV4_SOURCE_HELP),
    option text = STRING_TOKEN(STR_BMC_IPV4_SOURCE_STATIC), value = 1, flags = 0;
    option text = STRING_TOKEN(STR_BMC_IPV4_SOURCE_DHCP),   value = 2, flags = DEFAULT;
  endoneof;

  //
  // If DHCP is enabled, grayout the manual IP configuration
  //
  grayoutif
    ideqval SystemConfig.BmcIPv4Source == 2;

    //
    // Create "Set BMC Ip Address"
    //
    text
       help  = STRING_TOKEN(STR_BMC_IPV4_IP_ADDRESS_HELP),
       text  = STRING_TOKEN(STR_BMC_IPV4_IP_ADDRESS),
       text  = STRING_TOKEN(STR_CURRENT_BMC_IPV4_IP_ADDRESS),
       flags = INTERACTIVE,
       key   = KEY_SET_BMC_IPV4_IP_ADDRESS;

    //
    // Create "Set BMC Subnet Mask"
    //
    text
       help  = STRING_TOKEN(STR_BMC_IPV4_SUBNET_MASK_HELP),
       text  = STRING_TOKEN(STR_BMC_IPV4_SUBNET_MASK),
       text  = STRING_TOKEN(STR_CURRENT_BMC_IPV4_SUBNET_MASK),
       flags = INTERACTIVE,
       key   = KEY_SET_BMC_IPV4_SUBNET_MASK;

    //
    // Create "Set BMC Default gateway"
    //
    text
       help  = STRING_TOKEN(STR_BMC_IPV4_GATEWAY_ADDRESS_HELP),
       text  = STRING_TOKEN(STR_BMC_IPV4_GATEWAY_ADDRESS),
       text  = STRING_TOKEN(STR_CURRENT_BMC_IPV4_GATEWAY_ADDRESS),
       flags = INTERACTIVE,
       key   = KEY_SET_BMC_IPV4_GATEWAY_ADDRESS;

  endif;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // IPv6 Disable/Enable Option
  //
  oneof
    varid       = SystemConfig.BmcIPv6Mode,
    prompt      = STRING_TOKEN(STR_BMC_IPV6_MODE),
    help        = STRING_TOKEN(STR_BMC_IPV6_MODE_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
  endoneof;

  grayoutif
    ideqval SystemConfig.BmcIPv6Mode == 0;

    //
    // IPv6 AutoConfig
    //
    oneof
      varid       = SystemConfig.BmcIPv6AutoConfig,
      prompt      = STRING_TOKEN(STR_BMC_IPV6_AUTOCONFIG),
      help        = STRING_TOKEN(STR_BMC_IPV6_AUTOCONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
    endoneof;

  endif;

  //
  // If IPv6 AutoConfig is enabled, grayout the manual IP configuration
  //
  grayoutif
    ideqval SystemConfig.BmcIPv6AutoConfig == 1
    OR
    ideqval SystemConfig.BmcIPv6Mode == 0;

    //
    // IPv6 Prefix Length
    //
    numeric
      varid   = SystemConfig.BmcIPv6PrefixLength,
      prompt  = STRING_TOKEN(STR_BMC_IPV6_PREFIX_LENGTH),
      help    = STRING_TOKEN(STR_BMC_IPV6_PREFIX_LENGTH_HELP),
      minimum = 0,
      maximum = 255,
      step    = 1,
      default = 0,
    endnumeric;

    //
    // IPv6 IP Address
    //
    text
      help  = STRING_TOKEN(STR_BMC_IPV6_IP_ADDRESS_HELP),
      text  = STRING_TOKEN(STR_BMC_IPV6_IP_ADDRESS),
      text  = STRING_TOKEN(STR_CURRENT_BMC_IPV6_IP_ADDRESS),
      flags = INTERACTIVE,
      key   = KEY_SET_BMC_IPV6_IP_ADDRESS;

    //
    // IPv6 GateWay Address
    //
    text
      help  = STRING_TOKEN(STR_BMC_IPV6_GATEWAY_ADDRESS_HELP),
      text  = STRING_TOKEN(STR_BMC_IPV6_GATEWAY_ADDRESS),
      text  = STRING_TOKEN(STR_CURRENT_BMC_IPV6_GATEWAY_ADDRESS),
      flags = INTERACTIVE,
      key   = KEY_SET_BMC_IPV6_GATEWAY_ADDRESS;

  endif;

endform;


//
// SDR List Page
//
form
  formid = IPMI_SDR_LIST_FORM_ID,
  title  = STRING_TOKEN(STR_IPMI_SDR_LIST_TITLE);

  subtitle text = STRING_TOKEN(STR_IPMI_SDR_LIST_TITLE);

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  //
  // "SDR List Support" Option
  //
  oneof
    varid       = SystemConfig.IpmiSdrListEnable,
    questionid  = KEY_IPMI_SDR_LIST_SUPPORT,
    prompt      = STRING_TOKEN(STR_IPMI_SDR_LIST_SUPPORT),
    help        = STRING_TOKEN(STR_IPMI_SDR_LIST_SUPPORT_HELP),
    option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = INTERACTIVE;
  endoneof;

  subtitle text = STRING_TOKEN(STR_BLANK_STRING);

  suppressif
    ideqval SystemConfig.IpmiSdrListEnable == 0;

    subtitle text = STRING_TOKEN(STR_IPMI_SDR_LIST_FIELD_TITLE);

    label IPMI_SDR_LIST_LABEL;

    label IPMI_SDR_LIST_END_LABEL;

  endif;

endform;

