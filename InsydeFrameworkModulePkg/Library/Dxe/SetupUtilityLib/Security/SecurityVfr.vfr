//;******************************************************************************
//;* Copyright (c) 1983-2012, Insyde Software Corporation. All Rights Reserved.
//;*
//;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
//;* transmit, broadcast, present, recite, release, license or otherwise exploit
//;* any part of this publication in any form, by any means, without the prior
//;* written permission of Insyde Software Corporation.
//;*
//;******************************************************************************
//;
//; Module Name:
//;
//;   SecurityVfr.vfr
//;
//; Abstract:
//;
//;   The Vfr component for Security menu
//;

//
// Define this to include compiler fail-cases in the code
//
#include "SetupUtilityLibStrDefs.h"
#include "SetupConfig.h"

//
//          Form 3: Security Menu
//

formset
  guid     = SYSTEM_CONFIGURATION_GUID,
  title    = STRING_TOKEN(STR_SECURITY_TITLE),
  help     = STRING_TOKEN(STR_BLANK_STRING),
  class    = SETUP_UTILITY_CLASS,
  subclass = EFI_USER_ACCESS_TWO,

  form
    formid = ROOT_FORM_ID,

    title = STRING_TOKEN(STR_SECURITY_TITLE);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

#ifdef TPM_SUPPORT
    grayoutif  vareqval var(VAR_EQ_GRAY_TEXT) == 0x1;
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_TPM_STATUS_STRING),
        text   = STRING_TOKEN(STR_TPM_STATUS_STRING2),
        flags  = 0,
        key    = 0;
    endif;

    grayoutif
      ideqval SYSTEM_CONFIGURATION.TpmDeviceOk == 0
      OR
      ideqval SYSTEM_CONFIGURATION.GrayoutTpmOperation == 1
      OR
      ideqval SYSTEM_CONFIGURATION.UserAccessLevel == 2
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
      oneof
        varid   = SYSTEM_CONFIGURATION.TpmOperation,
        prompt  = STRING_TOKEN(STR_TPM_OPERATION_STRING),
        help    = STRING_TOKEN(STR_TPM_OPERATION_HELP),
        option text = STRING_TOKEN(STR_NO_OPERATION_TEXT), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_AND_DEACTIVATE_TEXT),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE_AND_ACTIVATE_TEXT),     value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif
      ideqval SYSTEM_CONFIGURATION.UserAccessLevel == 2
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
    suppressif
      ideqval SYSTEM_CONFIGURATION.TpmDeviceOk == 0
      OR
      ideqval SYSTEM_CONFIGURATION.SupressTpmClear == 1
      AND
      ideqval SYSTEM_CONFIGURATION.TpmOperation == 0
      OR
      ideqval SYSTEM_CONFIGURATION.TpmOperation == 1;
      oneof
        varid   = SYSTEM_CONFIGURATION.TpmClear,
        prompt  = STRING_TOKEN(STR_TPM_CLEAR_TEXT),
        help    = STRING_TOKEN(STR_TPM_CLEAR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0 | INTERACTIVE | RESET_REQUIRED, key = KEY_TPM_CLEAR;
      endoneof;
    endif;
#endif

    grayoutif  vareqval var(VAR_EQ_GRAY_TEXT) == 0x1;
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_SUPERVISOR_PASSWORD_STRING),
        text   = STRING_TOKEN(STR_SUPERVISOR_PASSWORD_STRING2),
        flags  = 0,
        key    = 0;
#ifdef SUPPORT_USER_PASSWORD
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_USER_PASSWORD_STRING),
        text   = STRING_TOKEN(STR_USER_PASSWORD_STRING2),
        flags  = 0,
        key    = 0;
#endif
    endif;

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    //
    // If Supervisor Password is set, display User Access Level and
    // set supervisor password text is "Installed", else Hidden it.
    //
    suppressif
      ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 1 3 4
      OR
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 0;
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_BLANK_STRING),
        flags  = INTERACTIVE,
        key    = 0;
    endif;

    grayoutif
      ideqval SYSTEM_CONFIGURATION.UserAccessLevel == 2
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
    suppressif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 3 4
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
    password
      varid    = SYSTEM_CONFIGURATION.SupervisorPassword,
      prompt   = STRING_TOKEN(STR_SUPERVISOR_PASSWORD_PROMPT),
      help     = STRING_TOKEN(STR_PASSWORD_HELP),
      flags    = INTERACTIVE,
      key      = KEY_SUPERVISOR_PASSWORD,
      minsize  = MIN_PASSWORD_NUMBER,
      maxsize  = MAX_PASSWORD_NUMBER,
      encoding = 1,
    endpassword;
    endif;

    //
    //Power on password
    //
    suppressif
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1
      OR
      ideqval SYSTEM_CONFIGURATION.SupervisorFlag == 0;
    oneof
      varid       = SYSTEM_CONFIGURATION.PowerOnPassword,
      prompt      = STRING_TOKEN(STR_PASSWORD_POWERON_STRING),
      help        = STRING_TOKEN(STR_PASSWORD_POWERON_HELP),
      option text = STRING_TOKEN(STR_ENABLED_TEXT),    value = 2, flags = 0;
      option text = STRING_TOKEN(STR_DISABLED_TEXT),   value = 1, flags = DEFAULT;
    endoneof;
    endif;
#ifdef SUPPORT_USER_PASSWORD
    //
    //User Access Level
    //
    suppressif
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1
      OR
      ideqval SYSTEM_CONFIGURATION.SupervisorFlag == 0;
    oneof
      varid       = SYSTEM_CONFIGURATION.UserAccessLevel,
      prompt      = STRING_TOKEN(STR_USER_ACCESS_LEVEL_STRING),
      help        = STRING_TOKEN(STR_USER_ACCESS_LEVEL_HELP),
      option text = STRING_TOKEN(STR_VIEW_ONLY_TEXT),  value = 2, flags = 0;
      option text = STRING_TOKEN(STR_LIMITED_TEXT),    value = 3, flags = 0;
      option text = STRING_TOKEN(STR_FULL_TEXT),       value = 4, flags = DEFAULT;
    endoneof;
    endif;

    //
    //Set User password
    //
    grayoutif
      ideqval SYSTEM_CONFIGURATION.SupervisorFlag == 0;
    password
      varid    = SYSTEM_CONFIGURATION.UserPassword,
      prompt   = STRING_TOKEN(STR_USER_PASSWORD_PROMPT),
      help     = STRING_TOKEN(STR_PASSWORD_HELP),
      flags    = INTERACTIVE,
      key      = KEY_USER_PASSWORD,
      minsize  = MIN_PASSWORD_NUMBER,
      maxsize  = MAX_PASSWORD_NUMBER,
      encoding = 1,
    endpassword;
    endif;

    //
    //Clear User password
    //
    suppressif
      ideqval SYSTEM_CONFIGURATION.UserFlag == 0;
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_CLEAR_USER_PASSWORD_STRING),
        text   = STRING_TOKEN(STR_BLANK_STRING),
        flags  = INTERACTIVE,
        key    = KEY_CLEAR_USER_PASSWORD;
    endif;
#endif
    //
    //Set All Hdd password
    //
    suppressif
      ideqval SYSTEM_CONFIGURATION.SetAllHddPasswordFlag == 0;
    grayoutif
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1
      AND
      ideqval SYSTEM_CONFIGURATION.UserAccessLevel == 3;
    password
      varid    = SYSTEM_CONFIGURATION.SetAllHddPassword,
      prompt   = STRING_TOKEN(STR_CHG_HDD_PASSWORD_PROMPT),
      help     = STRING_TOKEN(STR_HDD_SECURITY_TITLE_HELP),
      flags    = INTERACTIVE,
      key      = KEY_LOCK_ALL_HDD_SECURITY,
      minsize  = MIN_PASSWORD_NUMBER,
      maxsize  = HDD_PASSWORD_MAX_LENGTH,
      encoding = 2,
    endpassword;
    endif;

    //
    //Set All Msater Hdd password
    //
    suppressif
      ideqval SYSTEM_CONFIGURATION.SetAllHddPasswordFlag == 0
      OR
      ideqval SYSTEM_CONFIGURATION.UseMasterPassword == 0;
    grayoutif
      ideqval SYSTEM_CONFIGURATION.SetAllHddPasswordFlag == 1
      AND
      ideqval SYSTEM_CONFIGURATION.SetAllMasterHddPasswordFlag == 0
      OR
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1
      AND
      ideqval SYSTEM_CONFIGURATION.UserAccessLevel == 3;
    password
      varid    = SYSTEM_CONFIGURATION.SetAllMasterHddPassword,
      prompt   = STRING_TOKEN(STR_CHG_MASTER_HDD_PASSWORD_PROMPT),
      help     = STRING_TOKEN(STR_HDD_MASTER_SECURITY_TITLE_HELP),
      flags    = INTERACTIVE,
      key      = KEY_LOCK_ALL_MASTER_HDD_SECURITY,
      minsize  = MIN_PASSWORD_NUMBER,
      maxsize  = HDD_PASSWORD_MAX_LENGTH,
      encoding = 2,
    endpassword;
    endif;

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

  endform;

endformset;
