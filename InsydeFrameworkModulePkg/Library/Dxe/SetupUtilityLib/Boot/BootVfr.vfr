//;******************************************************************************
//;* Copyright (c) 1983-2011, Insyde Software Corporation. All Rights Reserved.
//;*
//;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
//;* transmit, broadcast, present, recite, release, license or otherwise exploit
//;* any part of this publication in any form, by any means, without the prior
//;* written permission of Insyde Software Corporation.
//;*
//;******************************************************************************
//;
//; Module Name:
//;
//;   BootVfr.vfr
//;
//; Abstract:
//;
//;   The Vfr component for Boot menu
//;

//
// Define this to include compiler fail-cases in the code
//
#include "SetupUtilityLibStrDefs.h"
#include "SetupConfig.h"

//
//          Form 5: Boot Menu
//
formset
  guid     = SYSTEM_CONFIGURATION_GUID,
  title    = STRING_TOKEN(STR_BOOT_TITLE),
  help     = STRING_TOKEN(STR_BLANK_STRING),
  class    = SETUP_UTILITY_CLASS,
  subclass = SETUP_UTILITY_SUBCLASS,

  form
    formid = ROOT_FORM_ID,

    title = STRING_TOKEN(STR_BOOT_TITLE);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
    oneof
      varid       = SYSTEM_CONFIGURATION.BootType,
      prompt      = STRING_TOKEN(STR_BOOT_TYPE_STRING),
      help        = STRING_TOKEN(STR_BOOT_TYPE_HELP),
      option text = STRING_TOKEN(STR_DUAL_BOOT_TYPE_TEXT),   value = 0, flags = DEFAULT;
      option text = STRING_TOKEN(STR_LEGACY_BOOT_TYPE_TEXT), value = 1, flags = 0;
      option text = STRING_TOKEN(STR_EFI_BOOT_TYPE_TEXT),    value = 2, flags = 0;
    endoneof;

    oneof
      varid       = SYSTEM_CONFIGURATION.QuickBoot,
      prompt      = STRING_TOKEN(STR_QUICK_BOOT_STRING),
      help        = STRING_TOKEN(STR_QUICK_BOOT_HELP),
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
    endoneof;

    oneof
      varid       = SYSTEM_CONFIGURATION.QuietBoot,
      prompt      = STRING_TOKEN(STR_QUIET_BOOT_STRING),
      help        = STRING_TOKEN(STR_QUIET_BOOT_HELP),
      option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      option text = STRING_TOKEN(STR_DISABLED_TEXT),   value = 0, flags = 0;
    endoneof;
    oneof
      varid       = SYSTEM_CONFIGURATION.PxeBootToLan,
      prompt      = STRING_TOKEN(STR_PXE_BOOT_TO_LAN_STRING),
      help        = STRING_TOKEN(STR_PXE_BOOT_TO_LAN_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = 0;
    endoneof;

    oneof
      varid       = SYSTEM_CONFIGURATION.NewPositionPolicy,
      prompt      = STRING_TOKEN(STR_ADDPOSITION_TEXT),
      help        = STRING_TOKEN(STR_ADDPOSITION_TEXT_HELP),
      option text = STRING_TOKEN(STR_ADDPOSITION_FIRST), value = 0, flags = INTERACTIVE, key = KEY_NEW_POSITION_POLICY;
      option text = STRING_TOKEN(STR_ADDPOSITION_LAST), value = 1, flags = INTERACTIVE, key = KEY_NEW_POSITION_POLICY;
      option text = STRING_TOKEN(STR_ADDPOSITION_AUTO), value = 2, flags = DEFAULT | INTERACTIVE, key = KEY_NEW_POSITION_POLICY;
    endoneof;

    endif;

#ifdef SUPPORT_64BITS_AML
    grayoutif
      ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
      oneof
        varid       = SYSTEM_CONFIGURATION.AcpiVer,
        prompt      = STRING_TOKEN(STR_ACPIVER_BOOT_STRING),
        help        = STRING_TOKEN(STR_ACPIVER_BOOT_HELP),
        option text = STRING_TOKEN(STR_ACPI40_TEXT), value = 2, flags = 0;
        option text = STRING_TOKEN(STR_ACPI50_TEXT), value = 3, flags = DEFAULT;
      endoneof;
    endif;
#else
    grayoutif
      ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
      oneof
        varid       = SYSTEM_CONFIGURATION.AcpiVer,
        prompt      = STRING_TOKEN(STR_ACPIVER_BOOT_STRING),
        help        = STRING_TOKEN(STR_ACPIVER_BOOT_HELP),
        option text = STRING_TOKEN(STR_ACPI10B_TEXT),  value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ACPI30_TEXT), value = 1, flags = 0;
        option text = STRING_TOKEN(STR_ACPI40_TEXT), value = 2, flags = 0;
        option text = STRING_TOKEN(STR_ACPI50_TEXT), value = 3, flags = DEFAULT;
      endoneof;
    endif;
#endif

    grayoutif
      ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
      AND
      ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;

      oneof
        varid   = SYSTEM_CONFIGURATION.UsbBoot,
        prompt      = STRING_TOKEN(STR_USB_BOOT_STRING),
        help        = STRING_TOKEN(STR_USB_BOOT_HELP),
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 1, flags = 0;
      endoneof;

      oneof
        varid       = SYSTEM_CONFIGURATION.BootNormalPriority,
        prompt      = STRING_TOKEN(STR_EFI_DEVICE_FIRST_STRING),
        help        = STRING_TOKEN(STR_EFI_DEVICE_FIRST_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 1, flags = DEFAULT | INTERACTIVE, key = KEY_NORMAL_BOOT_PRIORITY;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 0, flags = 0 | INTERACTIVE, key = KEY_NORMAL_BOOT_PRIORITY;
      endoneof;

      oneof
        varid       = SYSTEM_CONFIGURATION.BootDelayTime,
        prompt      = STRING_TOKEN(STR_BOOT_DELAY_TIME),
        help        = STRING_TOKEN(STR_BOOT_DELAY_TIME_HELP),
        option text = STRING_TOKEN(STR_BOOT_DELAY_TIME_0_SEC),  value = 0,  flags = DEFAULT;
        option text = STRING_TOKEN(STR_BOOT_DELAY_TIME_3_SEC),  value = 3,  flags = 0;
        option text = STRING_TOKEN(STR_BOOT_DELAY_TIME_5_SEC),  value = 5,  flags = 0;
        option text = STRING_TOKEN(STR_BOOT_DELAY_TIME_10_SEC), value = 10, flags = 0;
      endoneof;
    endif;


    subtitle
     text = STRING_TOKEN(STR_BLANK_STRING);

    label UPDATE_EFI_OPTION_LABEL;

    suppressif
      ideqval SYSTEM_CONFIGURATION.BootType == 2
      OR
      ideqval SYSTEM_CONFIGURATION.NoLegacyBootDev == 0;

      goto BOOT_OPTION_FORM_ID,
      prompt = STRING_TOKEN(STR_LEGACY),
      help = STRING_TOKEN(STR_LEGACY_HELP);
    endif;
  endform;


     //
     //  Sub Form BOOT_DEVICE_EFI_FORM_ID
     //
     form
       formid = BOOT_DEVICE_EFI_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_EFI);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
      grayoutif
           (ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
           AND
           ideqval SYSTEM_CONFIGURATION.SetUserPass == 1)
           OR
          ideqval SYSTEM_CONFIGURATION.NewPositionPolicy == 2;
       label EFI_BOOT_DEVICE_LABEL;
       text
         help   = STRING_TOKEN(STR_BLANK_STRING),
         text   = STRING_TOKEN(STR_BLANK_STRING);
        endif;
     endform;

     //
     //  Sub Form BOOT_OPTION_FORM_ID
     //
     form
       formid = BOOT_OPTION_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_BOOT_OPTIONS);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);

       grayoutif
         ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
         AND
         ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       oneof
         varid       = SYSTEM_CONFIGURATION.LegacyNormalMenuType,
         prompt      = STRING_TOKEN(STR_LEGACY_NORMAL_OPTIONS),
         help        = STRING_TOKEN(STR_LEGACY_NORMAL_HELP),
         option text = STRING_TOKEN(STR_NORMAL),     value = 0, flags = INTERACTIVE | DEFAULT , key = KEY_LEGACY_NORMAL_BOOT_MENU;
         option text = STRING_TOKEN(STR_ADVANCE),    value = 1, flags = INTERACTIVE | 0       , key = KEY_LEGACY_NORMAL_BOOT_MENU;
       endoneof;
       endif;

       subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);
       suppressif
         ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
         OR
         ideqval SYSTEM_CONFIGURATION.NoBootTypeOrder == 0;
         goto BOOT_DEVICE_LEG_NOR_BOOT_ID,
         prompt = STRING_TOKEN(STR_BOOT_TYPE_ORDER_OPTIONS),
         help = STRING_TOKEN(STR_BOOT_TYPE_ORDER_HELP);
       endif;
       suppressif
         ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
         OR
         ideqval SYSTEM_CONFIGURATION.NoBootDevs[1] == 0;
         goto BOOT_DEVICE_FDD_FORM_ID,
         prompt = STRING_TOKEN(STR_FLOPPY_BOOT),
         help = STRING_TOKEN(STR_BLANK_STRING);
       endif;
       suppressif
        ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
        OR
        ideqval SYSTEM_CONFIGURATION.NoBootDevs[2] == 0;
        goto BOOT_DEVICE_HDD_FORM_ID,
        prompt = STRING_TOKEN(STR_HDD_BOOT),
        help = STRING_TOKEN(STR_BLANK_STRING);
      endif;
   suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
      ideqval SYSTEM_CONFIGURATION.NoBootDevs[3] == 0;
     goto BOOT_DEVICE_CD_FORM_ID,
        prompt = STRING_TOKEN(STR_CD_BOOT),
        help = STRING_TOKEN(STR_CD_BOOT_HELP);
   endif;
   suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
     ideqval SYSTEM_CONFIGURATION.NoBootDevs[4] == 0;
     goto BOOT_DEVICE_PCMCIA_FORM_ID,
        prompt = STRING_TOKEN(STR_PCMCIA_BOOT),
        help = STRING_TOKEN(STR_PCMCIA_BOOT_HELP);
   endif;
  suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
     ideqval SYSTEM_CONFIGURATION.NoBootDevs[5] == 0;
     goto BOOT_DEVICE_USB_FORM_ID,
        prompt = STRING_TOKEN(STR_USB_BOOT),
        help = STRING_TOKEN(STR_USB_BOOT_HELP);
   endif;
   suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
     ideqval SYSTEM_CONFIGURATION.NoBootDevs[6] == 0;
     goto BOOT_EMBED_NETWORK_FORM_ID,
        prompt = STRING_TOKEN(STR_EMBED_NETWORK_BOOT),
        help = STRING_TOKEN(STR_EMBED_NETWORK_BOOT_HELP);
   endif;
   suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
     ideqval SYSTEM_CONFIGURATION.NoBootDevs[7] == 0;
     goto BOOT_DEVICE_BEV_FORM_ID,
        prompt = STRING_TOKEN(STR_BEV_BOOT),
        help = STRING_TOKEN(STR_BEV_BOOT_HELP);
   endif;
   suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 1
      OR
     ideqval SYSTEM_CONFIGURATION.NoBootDevs[8] == 0;
      goto BOOT_DEVICE_OTHER_FORM_ID,
        prompt = STRING_TOKEN(STR_OTHER_DRIVE_BOOT),
        help = STRING_TOKEN(STR_OTHER_DRIVE_BOOT);
   endif;
    suppressif
      ideqval SYSTEM_CONFIGURATION.LegacyNormalMenuType == 0
      OR
      ideqval SYSTEM_CONFIGURATION.NoLegacyBootDev == 0;

      label BOOT_LEGACY_ADV_BOOT_LABEL;
    endif;
  endform;

     //
     //  Sub Form BOOT_DEVICE_LEG_NOR_BOOT_ID
     //
      form
          formid = BOOT_DEVICE_LEG_NOR_BOOT_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

          subtitle
            text = STRING_TOKEN(STR_BOOT_TYPE_ORDER_OPTIONS);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);
          grayoutif
           ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
           AND
           ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
          label BOOT_ORDER_LABEL;
        endif;
        endform;

     //
     //  Sub Form BOOT_DEVICE_HDD_FORM_ID
     //
     form
       formid = BOOT_DEVICE_HDD_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_HDD_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label HDD_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_CD_FORM_ID
     //
     form
       formid = BOOT_DEVICE_CD_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_CD_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label CD_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_FDD_FORM_ID
     //
     form
       formid = BOOT_DEVICE_FDD_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_FLOPPY_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif

        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label FDD_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_OTHER_FORM_ID
     //
     form
       formid = BOOT_DEVICE_OTHER_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_OTHER_DRIVE_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
    grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label OTHER_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_PCMCIA_FORM_ID
     //
     form
       formid = BOOT_DEVICE_PCMCIA_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_PCMCIA_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label PCMCIA_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_USB_FORM_ID
     //
     form
       formid = BOOT_DEVICE_USB_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_USB_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
    grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label USB_BOOT_DEVICE_LABEL;
      endif;
     endform;

     //
     //  Sub Form BOOT_EMBED_NETWORK_FORM_ID
     //
     form
       formid = BOOT_EMBED_NETWORK_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_EMBED_NETWORK_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label EMBED_NETWORK_BOOT_DEVICE_LABEL;
        endif;
     endform;

     //
     //  Sub Form BOOT_DEVICE_BEV_FORM_ID
     //
     form
       formid = BOOT_DEVICE_BEV_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

       subtitle
         text = STRING_TOKEN(STR_BEV_BOOT);

       subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);
    grayoutif
        ideqvallist SYSTEM_CONFIGURATION.UserAccessLevel == 2 3
        AND
        ideqval SYSTEM_CONFIGURATION.SetUserPass == 1;
       label BEV_BOOT_DEVICE_LABEL;
        endif;
     endform;
endformset;
