#;******************************************************************************
#;* Copyright (c) 1983-2014, Insyde Software Corporation. All Rights Reserved.
#;*
#;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
#;* transmit, broadcast, present, recite, release, license or otherwise exploit
#;* any part of this publication in any form, by any means, without the prior
#;* written permission of Insyde Software Corporation.
#;*
#;******************************************************************************
#
# This file contains 'Framework Code' and is licensed as such
# under the terms of your license agreement with Intel or your
# vendor.  This file may not be modified, except as allowed by
# additional terms of your license agreement.
#
#/*++
#
#  Copyright (c) 1999 - 2006 Intel Corporation. All rights reserved
#  This software and associated documentation (if any) is furnished
#  under a license and may only be used or copied in accordance
#  with the terms of the license. Except as permitted by such
#  license, no part of this software or documentation may be
#  reproduced, stored in a retrieval system, or transmitted in any
#  form or by any means without the express written consent of
#  Intel Corporation.
#
#
#  Module Name:
#
#    CommonTools.env
#
#  Abstract:
#
#    This file should not need to be customized. Customizations should
#    be done in LocalTools.env if at all possible.
#
#    This file can be included by other makefiles.
#
#    It defines variables used by the different toolchains. It first includes
#    the user-customized LocalTools.env, and then uses those defines to
#    define other variables.
#
#    It basically has sections for different toolchains which define variables
#    used to build.
#
#--*/

#
# Everything depends on EFI_SOURCE. Make sure it's defined
#
!IFNDEF EFI_SOURCE
!ERROR EFI_SOURCE environmental variable not set
!ENDIF

!IFNDEF EDK_SOURCE
EDK_SOURCE=$(EFI_SOURCE)\Edk
!ENDIF

#
# Tools depend on BUILD_DIR. Make sure it's defined
#
!IFNDEF BUILD_DIR
!ERROR BUILD_DIR environmental variable not set.  Should be set in PlatformTools.env
!ENDIF

#
# This include file gets customized by the developer. Get the customizations.
#
!INCLUDE $(EFI_SOURCE)\Platform\Generic\LocalTools.env

################################################################################
#
# Define paths for EFI build tools
#
################################################################################
!IFNDEF EFI_TOOLS_PATH
EFI_TOOLS_BIN     = $(EFI_SOURCE)\Tools\Bin
!ELSE
EFI_TOOLS_BIN     = $(EFI_TOOLS_PATH)\Bin
!ENDIF

!IFNDEF EDK_TOOLS_BIN
EDK_TOOLS_BIN     = $(EFI_TOOLS_BIN)
!ENDIF

TIANO_TOOLS_DIR     = $(EFI_SOURCE)\Tools
TIANO_TOOLS_SOURCE  = $(TIANO_TOOLS_DIR)\Source
TIANO_TOOLS_COMMON  = $(TIANO_TOOLS_DIR)\Source\Common
TIANO_TOOLS_OUTPUT  = $(BUILD_DIR)\Tools
EDK_TOOLS_DIR       = $(EDK_SOURCE)\Sample\Tools
EDK_TOOLS_SOURCE    = $(EDK_TOOLS_DIR)\Source
EDK_TOOLS_COMMON    = $(EDK_TOOLS_DIR)\Source\Common
EDK_TOOLS_OUTPUT    = $(BUILD_DIR)\Tools
PCCTS_DIR           = $(EDK_SOURCE)\Other\Maintained\Tools\Pccts

#
# These include files get some version info.
#
!INCLUDE $(EDK_SOURCE)\Sample\Version.env
!INCLUDE $(EFI_SOURCE)\Platform\Generic\Version.env

#
# This include file gets tools binary version.
#
!IF EXIST("$(EFI_TOOLS_BIN)\ToolsVersion.env")
!INCLUDE $(EFI_TOOLS_BIN)\ToolsVersion.env
!ENDIF

!IF "$(EFI_SPECIFICATION_VERSION)" == "0x0001000A"
BIOS_VERSION = Tiano.$(EFI_BUILD_VERSION).EFI1.10
!ELSEIF "$(EFI_SPECIFICATION_VERSION)" == "0x00020000"
BIOS_VERSION = Tiano.$(EFI_BUILD_VERSION).UEFI2.0
!ELSE
BIOS_VERSION = Tiano.$(EFI_BUILD_VERSION).UNKNOWNEFI
!ENDIF

#
# Macros to define the build tools
#
ANTLR           = $(PCCTS_DIR)\bin\antlr
BIN2ARRAY       = $(TIANO_TOOLS_OUTPUT)\DrvDump
CREATEJUNKFILE  = $(TIANO_TOOLS_OUTPUT)\CreateJunkFile
DLG             = $(PCCTS_DIR)\bin\dlg
FWIMAGE         = $(TIANO_TOOLS_OUTPUT)\FwImage
ENTRY           = $(TIANO_TOOLS_OUTPUT)\Entry
EXE2BIN         = $(TIANO_TOOLS_OUTPUT)\Strip
FLASHMAP        = $(TIANO_TOOLS_OUTPUT)\FlashMap
UPDATETOKEN     = $(TIANO_TOOLS_OUTPUT)\RenewToken
GENACPITABLE    = $(TIANO_TOOLS_OUTPUT)\GenAcpiTable
GENAPRIORI      = $(TIANO_TOOLS_OUTPUT)\GenAprioriFile
GENBSFFIXUP     = $(TIANO_TOOLS_OUTPUT)\GenBsfFixup
GENBSFIMAGE     = $(TIANO_TOOLS_OUTPUT)\GenBsfImage
GENCAPSULEHDR   = $(TIANO_TOOLS_OUTPUT)\GenCapsuleHdr
GENDEPEX        = $(TIANO_TOOLS_OUTPUT)\GenDepex
GENFDIMAGE      = $(TIANO_TOOLS_OUTPUT)\GenFdImage
GENFFSFILE      = $(TIANO_TOOLS_OUTPUT)\GenFfsFile
GENFVIMAGE      = $(TIANO_TOOLS_OUTPUT)\GenFvImage
GENHELP         = $(TIANO_TOOLS_OUTPUT)\GenHelp
GENSECTION      = $(TIANO_TOOLS_OUTPUT)\GenSection
GENTEIMAGE      = $(TIANO_TOOLS_OUTPUT)\GenTEImage
GENSETUPFONT    = $(TIANO_TOOLS_OUTPUT)\GenScuFont
GUIDCHK         = $(TIANO_TOOLS_OUTPUT)\GuidChk
MAKEDEPS        = $(TIANO_TOOLS_OUTPUT)\MakeDeps
MODIFYINF       = $(TIANO_TOOLS_OUTPUT)\ModifyInf
PEIREBASE       = $(TIANO_TOOLS_OUTPUT)\PeiRebase
PE2BIN          = $(TIANO_TOOLS_OUTPUT)\Pe2Bin
PE2SYM          = $(TIANO_TOOLS_OUTPUT)\Pe2Sym
PREFIX          = $(TIANO_TOOLS_OUTPUT)\Prefix
PROCESSDSC      = $(TIANO_TOOLS_OUTPUT)\ProcessDsc
SECFIXUP        = $(TIANO_TOOLS_OUTPUT)\SecFixup
SPLITFILE       = $(TIANO_TOOLS_OUTPUT)\Splitfile
STRGATHER       = $(TIANO_TOOLS_OUTPUT)\StrGather
STRIP           = $(TIANO_TOOLS_OUTPUT)\Strip
SETSTAMP        = $(TIANO_TOOLS_OUTPUT)\SetStamp
VFRCOMPILE      = $(TIANO_TOOLS_OUTPUT)\VfrCompile
ZERODEBUGDATA   = $(TIANO_TOOLS_OUTPUT)\ZeroDebugData
GENSLICTABLE    = $(TIANO_TOOLS_OUTPUT)\GenSlicTable
GENTIMER        = $(TIANO_TOOLS_OUTPUT)\GenTimer
GENCHECKSUM     = $(TIANO_TOOLS_OUTPUT)\GenChecksum
GENGUID         = $(TIANO_TOOLS_OUTPUT)\GenGuid
SETGUID         = $(TIANO_TOOLS_OUTPUT)\SetGuid
BIN2OBJ         = $(TIANO_TOOLS_OUTPUT)\Bin2Obj
ANIGATHER       = $(EDK_TOOLS_OUTPUT)\AniGather
ALIGNCHECK      = $(TIANO_TOOLS_OUTPUT)\AlignCheck
MAKE            = nmake -nologo -s

#
# Everything else requires that TOOLCHAIN be defined. This should be defined
# by the calling makefile.
#
!IFNDEF TOOLCHAIN
!ERROR TOOLCHAIN not defined for $(EFI_SOURCE)\CommonTools.env
!ENDIF

###############################################################################
#
# Specify the path and macros for IA32 tools
#
###############################################################################

!IF "$(TOOLCHAIN)" == "TOOLCHAIN_IA32"

#
# These settings are independent of the target processor architecture.
# Included are compiler, linker, lib, and EBC compiler, linker and lib options.
# Options not appropriate for all builds may be appropriate in the processor
# architecture specific macros (xxx_ARCH_FLAGS) or in the platform specific
# macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = /X
C_STD_FLAGS         = /nologo /W4 /WX /Gy /c /Fo$@ $(INC)
#
# EFI_GENERATE_INTERMEDIATE_FILE produces .SBR and the detail infomation for ASM list file
#
!IF "$(EFI_GENERATE_INTERMEDIATE_FILE)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /Fa$* /FAsc /FR$(@R).SBR
!ENDIF
#
# The complier options for VC8/VC9
#
!IF "$(USE_VC8)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /wd4819 /wd4334 /EHsc /GS- /D USE_VC8
!ELSE
C_STD_FLAGS         = $(C_STD_FLAGS) /GX
!ENDIF
ASM_STD_FLAGS       = $(INC)
LINK_STD_FLAGS      = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF $(BUILD_DIR)\IA32\CompilerStub.lib
LIB_STD_FLAGS       = /NOLOGO
ASL_CPP_STD_FLAGS   = /nologo /C /EP /TC $(INC)
ASL_STD_FLAGS       =
ASL_CPP_ARCH_FLAGS  =
ASL_ARCH_FLAGS      =
#
# Build type specific flags.  Globally relevant flags belong in the standard
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_STD_FLAGS           = $(C_STD_FLAGS) /D UNICODE
C_ARCH_FLAGS          = /D EFI32
ASM_ARCH_FLAGS        = /nologo /W3 /WX /c /coff /Fo$@ /DEFI32
LINK_ARCH_FLAGS       = /MACHINE:I386
LIB_ARCH_FLAGS        =

#
# Build tools
#
CC                  = cl
LINK                = link
LIB                 = lib
BSCMAKE             = bscmake

!IF "$(EFI_ASSEMBLER_NAME)" == ""
ASM               = $(MASMPATH)\bin\ml
ASMLINK           = $(MASMPATH)\bin\link
ASMLINK16         = $(MASMPATH)\bin\link16
!ELSE
ASM               = $(EFI_TOOLS_BIN)\Ia32\$(EFI_ASSEMBLER_NAME)\bin\ml
ASMLINK           = $(EFI_TOOLS_BIN)\Ia32\$(EFI_ASSEMBLER_NAME)\bin\link
ASMLINK16         = $(EFI_TOOLS_BIN)\Ia32\$(EFI_ASSEMBLER_NAME)\bin\link16
!ENDIF

!IF "$(USE_VC8)" == "NO"
ASMLINK16         = $(ASMLINK)
!ENDIF

ASL               = $(ASLPATH)\Acpi5.0\Iasl

!IF "$(EFI_SYMBOLIC_DEBUG)" == "YES"
ASM_ARCH_FLAGS      = $(ASM_ARCH_FLAGS) /Zi /DDEBUG
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)\$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
!ENDIF

# END OF TOOLCHAIN_IA32
###############################################################################

###############################################################################
#
# Specify the path and macros for the X64 (also called x86-64, EM64T, AMD64) tools
#
###############################################################################

!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_X64"

#
# These settings are independent of the target processor architecture.
# Included are compiler, linker, lib, and EBC compiler, linker and lib options.
# Options not appropriate for all builds may be appropriate in the processor
# architecture specific macros (xxx_ARCH_FLAGS) or in the platform specific
# macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = /X
!IF "$(EFI_GENERATE_INTERMEDIATE_FILE)" == "YES"
C_STD_FLAGS         = /nologo /W4 /WX /wd4366 /wd4334 /wd4819 /Gy /c /GS- /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC)
!ELSE
C_STD_FLAGS         = /nologo /W4 /WX /wd4366 /wd4334 /wd4819 /Gy /c /GS- /Fo$@ /D EFIX64 $(INC)
!ENDIF
ASM_STD_FLAGS       = $(INC)
LINK_STD_FLAGS      = /NOLOGO /NODEFAULTLIB /OPT:REF /OPT:NOICF $(BUILD_DIR)\X64\CompilerStub.lib
LIB_STD_FLAGS       = /NOLOGO
ASL_CPP_STD_FLAGS   = /nologo /C /EP /TC $(INC)
ASL_STD_FLAGS       =
ASL_CPP_ARCH_FLAGS  =
ASL_ARCH_FLAGS      =

#
# Build type specific flags.  Globally relevant flags belong in the standard
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = /D EFIX64
ASM_ARCH_FLAGS        = /nologo /W3 /WX /c /Fo$@ /DEFI32
LINK_ARCH_FLAGS       = /Machine:AMD64 /ALIGN:32
LIB_ARCH_FLAGS        =

#
# Build tools
#
!IF "$(EFI_COMPILER_X64_NAME)" == ""
CC                  = "$(WIN_DDK_X64_PATH)\cl"
LINK                = "$(WIN_DDK_X64_PATH)\link"
LIB                 = lib
ASM                 = "$(WIN_DDK_X64_PATH)\ml64"
!ELSE
CC                  = $(EFI_TOOLS_BIN)\X64\$(EFI_COMPILER_X64_NAME)\cl
LINK                = $(EFI_TOOLS_BIN)\X64\$(EFI_COMPILER_X64_NAME)\link
LIB                 = $(EFI_TOOLS_BIN)\X64\$(EFI_COMPILER_X64_NAME)\lib
ASM                 = $(EFI_TOOLS_BIN)\X64\$(EFI_COMPILER_X64_NAME)\ml64
!ENDIF

!IF "$(EFI_ASSEMBLER_NAME)" == ""
ASMLINK           = $(MASMPATH)\bin\link
!ELSE
ASMLINK           = $(EFI_TOOLS_BIN)\Ia32\$(EFI_ASSEMBLER_NAME)\bin\link
!ENDIF

BSCMAKE             = bscmake

!IF "$(EFI_ASL_LOCAL)" == "YES"
ASL               = $(ASLPATH)\Acpi5.0\Iasl
!ELSE
ASL               = $(EFI_TOOLS_BIN)\Iasl
!ENDIF

!IF "$(EFI_SYMBOLIC_DEBUG)" == "YES"
ASM_ARCH_FLAGS      = $(ASM_ARCH_FLAGS) /Zi /DDEBUG
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)\$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
!ENDIF

# END OF TOOLCHAIN_X64
###############################################################################

###############################################################################
#
# Specify the path and macros for the IPF tools
#
###############################################################################

!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_IPF"

#
# These settings are independent of the target processor architecture.
# Included are compiler, linker, lib, and EBC compiler, linker and lib options.
# Options not appropriate for all builds may be appropriate in the processor
# architecture specific macros (xxx_ARCH_FLAGS) or in the platform specific
# macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = /X
!IF "$(EFI_GENERATE_INTERMEDIATE_FILE)" == "YES"
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC)
!ELSE
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fo$@ $(INC)
!ENDIF
ASM_STD_FLAGS       = $(INC)
LINK_STD_FLAGS      = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF
LIB_STD_FLAGS       = /NOLOGO

#
# Build type specific flags.  Globally relevant flags belong in the standard
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = /D EFI64
ASM_ARCH_FLAGS        = -N us -X explicit -M ilp64 -N so -W4 -o $@
LINK_ARCH_FLAGS       = /MACHINE:IA64
LIB_ARCH_FLAGS        =

#
# This is used for preprocessing IPF Assembly files
#
C_FLAGS_PRO       = -EP -C $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE)

!IF "$(EFI_DEBUG)" == "YES"
ASM_ARCH_FLAGS   = $(ASM_ARCH_FLAGS) -d debug
!ENDIF

#
# Build tools
#
!IF "$(EFI_COMPILER_NAME)" == ""
CC                = $(EFI_IA64TOOLPATH)\cl
LINK              = $(EFI_IA64TOOLPATH)\link
LIB               = $(EFI_IA64TOOLPATH)\lib
!ELSE
CC                = $(EFI_TOOLS_BIN)\Ipf\$(EFI_COMPILER_NAME)\cl
LINK              = $(EFI_TOOLS_BIN)\Ipf\$(EFI_COMPILER_NAME)\link
LIB               = $(EFI_TOOLS_BIN)\Ipf\$(EFI_COMPILER_NAME)\lib
!ENDIF

!IF "$(EFI_ASSEMBLER_NAME)" == ""
ASM               = $(EFI_IA64ASMPATH)\ias
ASMLINK           = $(EFI_IA64ASMPATH)\link
!ELSE
ASM               = $(EFI_TOOLS_BIN)\Ipf\$(EFI_ASSEMBLER_NAME)\ias
ASMLINK           = $(EFI_TOOLS_BIN)\Ipf\$(EFI_ASSEMBLER_NAME)\link
!ENDIF

BSCMAKE           = bscmake

!IF "$(EFI_ASL_LOCAL)" == "YES"
ASL               = $(ASLPATH)\Acpi5.0\Iasl
!ELSE
ASL               = $(EFI_TOOLS_BIN)\Iasl
!ENDIF

!IF "$(EFI_SYMBOLIC_DEBUG)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)\$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
!ENDIF

# END TOOLCHAIN_IPF
###############################################################################

###############################################################################
#
# Define toolchain for building the EFI tools on an IA32 system.
#
###############################################################################

!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSVC"

#
# These settings are independent of the target processor architecture.
# Included are compiler, linker, lib, and EBC compiler, linker and lib options.
# Options not appropriate for all builds may be appropriate in the processor
# architecture specific macros (xxx_ARCH_FLAGS) or in the platform specific
# macros (xxx_PROJ_FLAGS)
#
C_STD_FLAGS         = /nologo /W4 /WX /Gy /c /Fo$@ $(INC)
#
# EFI_GENERATE_INTERMEDIATE_FILE produces .SBR and the detail infomation for ASM list file
#
!IF "$(EFI_GENERATE_INTERMEDIATE_FILE)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /Fa$* /FAsc /FR$(@R).SBR
!ENDIF
#
# The complier options for VC8/VC9
#
!IF "$(USE_VC8)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /wd4819 /wd4334 /EHsc /GS- /D _CRT_SECURE_NO_DEPRECATE /D USE_VC8
!ELSE
C_STD_FLAGS         = $(C_STD_FLAGS) /GX
!ENDIF
ASM_STD_FLAGS       = $(INC)
LINK_STD_FLAGS      = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF
LIB_STD_FLAGS       = /NOLOGO

MSVS_LINK_LIBPATHS =

#
# Build type specific flags.  Globally relevant flags belong in the standard
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#

#
# Add a define to skip inclusion of Microsoft include file rpcasync.h, which
# results in a compile warning at W4.
#
C_ARCH_FLAGS          = /Od /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /D __RPCASYNC_H__
ASM_ARCH_FLAGS        =
LINK_ARCH_FLAGS       = /MACHINE:i386 /NODEFAULTLIB:library
LIB_ARCH_FLAGS        =

#
# Always turn on debug for the build tools so that we can debug problems
# quickly.
# NOTE: Ideally all the tools makefiles should be updated to use LINK_FLAGS_EXE
#       instead of L_FLAGS for linking. When this happens we can get rid of
#       the L_FLAGS definition here.
#

C_STD_FLAGS       = $(C_STD_FLAGS) /Zi /Gm /Fd$(EDK_TOOLS_OUTPUT)\$(TARGET_NAME)Obj
LINK_ARCH_FLAGS   = $(LINK_ARCH_FLAGS) /DEBUG /DEBUGTYPE:CV
L_FLAGS           = $(L_FLAGS) /DEBUG /DEBUGTYPE:CV

#
# Clear any project flags when building tools
#
C_PROJ_FLAGS          =
ASM_PROJ_FLAGS        =
LINK_PROJ_FLAGS       =
LIB_PROJ_FLAGS        =
EBC_C_PROJ_FLAGS      =
EBC_LINK_PROJ_FLAGS   =
EBC_LIB_PROJ_FLAGS    =

#
# Build tools
#
CC                = cl
LINK              = link
BSCMAKE           = bscmake
ASM               = ml
ASMLINK           = link
#
# Use a different macro name for tools build to avoid conflict with environment
# variable LIB
#
LIB_EXE           = lib

INC = $(INC)                                               \
      -I $(EDK_SOURCE)\Foundation                          \
      -I $(EDK_SOURCE)\Foundation\Efi                      \
      -I $(EDK_SOURCE)\Foundation\Framework                \
      -I $(EDK_SOURCE)\Sample\Platform\Nt32                \
      -I $(EDK_SOURCE)\Foundation\Core\Dxe                 \
      -I $(EDK_SOURCE)\Foundation\Include                  \
      -I $(EDK_SOURCE)\Foundation\Efi\Include              \
      -I $(EDK_SOURCE)\Foundation\Framework\Include        \
      -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard \
      -I $(EDK_SOURCE)\Foundation\Include\Ia32             \
      -I $(EDK_SOURCE)\Foundation\Include\Pei              \
      -I $(EDK_SOURCE)\Foundation\Library\Pei\Include      \
      -I $(EDK_SOURCE)\Sample\Include                      \
      -I "$(EDK_TOOLS_COMMON)"

# END TOOLCHAIN_MSVC
###############################################################################

###############################################################################
#
# Specify the path and macros for the EBC tools
#
###############################################################################

!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_EBC"

C_STD_INCLUDE       = /X
!IF "$(EFI_GENERATE_INTERMEDIATE_FILE)" == "YES"
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC)
!ELSE
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fo$@ $(INC)
!ENDIF
ASM_STD_FLAGS       = $(INC)
LINK_STD_FLAGS      = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF
LIB_STD_FLAGS       = /NOLOGO
EBC_C_STD_FLAGS     = -nologo -FAcs -c -W3 -WX
EBC_LINK_STD_FLAGS  = /NOLOGO /MACHINE:EBC /OPT:REF /NODEFAULTLIB
EBC_LIB_STD_FLAGS   = /NOLOGO /MACHINE:EBC

#
# Build type specific flags.  Globally relevant flags belong in the standard
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          =
ASM_ARCH_FLAGS        =
LINK_ARCH_FLAGS       =
LIB_ARCH_FLAGS        =

#
# EBC tools path should be defined in LocalTools.env.
#
EBC_CC            = $(EBC_TOOLS_PATH)\Bin\Iec
EBC_LINK          = $(EBC_TOOLS_PATH)\Bin\Link
EBC_LIB           = $(EBC_TOOLS_PATH)\Bin\Link -lib

!IF "$(EFI_SYMBOLIC_DEBUG)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)\$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) /Zd /Zi
EBC_LINK_STD_FLAGS  = $(EBC_LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
!ENDIF

#  END TOOLCHAIN_EBC

###############################################################################
#
# Let the caller define a NULL toolchain if they don't care. This way you can
# pick up at least some defines.
#
###############################################################################

!ELSEIF "$(TOOLCHAIN)" == ""

###############################################################################
#
# You get this if the calling makefile did not define TOOLCHAIN_xxx before
# including this file.
#
###############################################################################

!ELSE
!ERROR Unknown toolchain $(TOOLCHAIN) defined for $(EFI_SOURCE)\CommonTools.env use
!ENDIF


###############################################################################
#
# These are standard settings for all tool chains
#
###############################################################################

#
# Set common include path
#
INC = $(INC)                                                          \
      -I $(EFI_SOURCE)\Include                                        \
      -I $(EFI_SOURCE)\Chipset\Include                                \
      -I $(EFI_SOURCE)\Chipset\Include\$(DEMOBOARD_NAME)              \
      -I $(EFI_SOURCE)\Chipset\Common\Include                         \
      -I $(EDK_SOURCE)\Foundation                                     \
      -I $(EDK_SOURCE)\Foundation\Core\Dxe                            \
      -I $(EDK_SOURCE)\Foundation\Efi                                 \
      -I $(EDK_SOURCE)\Foundation\Efi\Include                         \
      -I $(EDK_SOURCE)\Foundation\Framework                           \
      -I $(EDK_SOURCE)\Foundation\Framework\Include                   \
      -I $(EDK_SOURCE)\Foundation\Include                             \
      -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard            \
      -I $(EDK_SOURCE)\Foundation\Include\Pei                         \
      -I $(EDK_SOURCE)\Foundation\Include\$(PROCESSOR)                \
      -I $(EDK_SOURCE)\Foundation\Library\Pei\Include                 \
      -I $(EDK_SOURCE)\Foundation\Library\Dxe\Include                 \
      -I $(EDK_SOURCE)\Foundation\Library\Dxe\Include\$(PROCESSOR)    \
      -I $(EDK_SOURCE)\Sample\Include
#
# These are standard build options
#
VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
C_STD_FLAGS         = $(C_STD_FLAGS) $(VERSION_FLAGS)
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) $(VERSION_FLAGS)
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "$(VERSION_FLAGS)"

!IF "$(EFI_DEBUG)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D EFI_DEBUG
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) /D EFI_DEBUG
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D EFI_DEBUG"
!ENDIF

!IF "$(EFI_DEBUG_CLEAR_MEMORY)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_DEBUG_CLEAR_MEMORY
!ENDIF

!IF "$(EFI_ADDTIONAL_DRIVERS)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_ADDTIONAL_DRIVERS
!ENDIF

!IF "$(EFI_UNLOCK_FWH)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_UNLOCK_FWH
!ENDIF

!IF "$(EFI_DEBUG_SERIAL_PRINT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_DEBUG_SERIAL_PRINT
!ENDIF

!IF "$(EFI_S3_RESUME)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_S3_RESUME
!ENDIF

!IF "$(EFI_SIZE_REDUCTION_APPLIED)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_SIZE_REDUCTION_APPLIED
!ENDIF

!IF "$(EFI_NO_MEMORY_TEST)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_NO_MEMORY_TEST
!ENDIF

!IF "$(EFI_PEI_REPORT_STATUS_CODE)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_PEI_REPORT_STATUS_CODE_ON
!ENDIF

!IF "$(SIZE_REDUCTION_ISA_COMBINED)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SIZE_REDUCTION_ISA_COMBINED
!ENDIF

!IF "$(EFI_PORT_80_DEBUG)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_PORT_80_DEBUG
ASM_STD_FLAGS         = $(ASM_STD_FLAGS) /D EFI_PORT_80_DEBUG
ASL_CPP_STD_FLAGS     = $(ASL_CPP_STD_FLAGS) /D EFI_PORT_80_DEBUG
!ENDIF

!IF "$(H2O_PORT_80_DEBUG)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D H2O_PORT_80_DEBUG
ASM_STD_FLAGS         = $(ASM_STD_FLAGS) /D H2O_PORT_80_DEBUG
ASL_CPP_STD_FLAGS     = $(ASL_CPP_STD_FLAGS) /D H2O_PORT_80_DEBUG
!ENDIF

!IF "$(H2O_DRIVER_CODE_DEBUG)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D H2O_DRIVER_CODE_DEBUG
!ENDIF

!IF "$(INSYDE_DEBUGGER)" == "YES"
ASM_STD_FLAGS         = $(ASM_STD_FLAGS) /D INSYDE_DEBUG
C_STD_FLAGS         = $(C_STD_FLAGS) /D INSYDE_DEBUG
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) /D INSYDE_DEBUG
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D INSYDE_DEBUG"

#
# When INSYDE_DEBUGGER="YES", treat EFI_SYMBOLIC_DEBUG as "YES"
#
ASM_ARCH_FLAGS      = $(ASM_ARCH_FLAGS) /Zi /DDEBUG
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)\$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG /DEBUGTYPE:CV
!ENDIF

!IF "$(EC_SHARED_FLASH_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D EC_SHARED_FLASH_SUPPORT
!ENDIF

!IF "$(TPM_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D TPM_SUPPORT
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D TPM_SUPPORT"
TCG_SUPPORT         = 1
!ENDIF

!IF "$(TPM2_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D TPM2_SUPPORT
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D TPM2_SUPPORT"
!ENDIF

!IF "$(TPM_AUTO_DETECTION)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D TPM_AUTO_DETECTION
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D TPM_AUTO_DETECTION"
!ENDIF

!IF "$(TCG_SERVER_PLATFORM_CLASS)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D TCG_SERVER_PLATFORM_CLASS
!ENDIF

!IF "$(SET_MTC_TO_CMOS)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SET_MTC_TO_CMOS
!ENDIF
!IF "$(SMM_INT10_ENABLE)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SMM_INT10_ENABLE
ASM_STD_FLAGS   = $(ASM_STD_FLAGS) /D SMM_INT10_ENABLE
!ENDIF
!IF "$(MULTIPLE_PEI_FV_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D MULTIPLE_PEI_FV_SUPPORT
!ENDIF

!IF "$(EFI_BUILD_TARGET_X64)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EFI_BUILD_TARGET_X64
!ENDIF

!IF "$(SYS_PASSWORD_IN_CMOS)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SYS_PASSWORD_IN_CMOS
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SYS_PASSWORD_IN_CMOS"
!ENDIF

!IF "$(SECURE_SYS_PASSWORD_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SECURE_SYS_PASSWORD_SUPPORT
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SECURE_SYS_PASSWORD_SUPPORT"
!ENDIF

!IF "$(SUPPORT_USER_PASSWORD)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SUPPORT_USER_PASSWORD
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SUPPORT_USER_PASSWORD"
!ENDIF

!IF "$(RETURN_DIALOG_CYCLE)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D RETURN_DIALOG_CYCLE
!ENDIF

!IF "$(USE_FAST_CRISIS_RECOVERY)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D USE_FAST_CRISIS_RECOVERY
!ENDIF

!IF "$(PEI_CRISIS_RECOVERY)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D PEI_CRISIS_RECOVERY
!ENDIF

!IF "$(MULTI_SUPER_IO_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D MULTI_SUPER_IO_SUPPORT
!ENDIF

!IF "$(SEAMLESS_USB_SUPPORT)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SEAMLESS_USB_SUPPORT"
!ENDIF

!IF "$(EC_IDLE_PER_WRITE_BLOCK)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D EC_IDLE_PER_WRITE_BLOCK
!ENDIF

!IF "$(FRONTPAGE_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D FRONTPAGE_SUPPORT
!ENDIF

!IF "$(EVENT_LOG_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D EVENT_LOG_SUPPORT
!ENDIF

!IF "$(ENABLE_CONSOLE_EX)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D ENABLE_CONSOLE_EX
!ENDIF

!IF "$(SEAMLESS_SDHC_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SEAMLESS_SDHC_SUPPORT
!ENDIF
!IF "$(CONSOLE_REDIRECTION_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D CONSOLE_REDIRECTION_SUPPORT
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D CONSOLE_REDIRECTION_SUPPORT"
!ENDIF



!IF "$(SUPPORT_64BITS_AML)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SUPPORT_64BITS_AML
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SUPPORT_64BITS_AML"
ASL_CPP_STD_FLAGS   = $(ASL_CPP_STD_FLAGS) /D SUPPORT_64BITS_AML
!ENDIF
!IF "$(H2OIPMI_SUPPORT)" == "YES"
!IF "$(H2OIPMI_TYPE)" != "KCS" && "$(H2OIPMI_TYPE)" != "BT" && "$(H2OIPMI_TYPE)" != "SMIC"
H2OIPMI_TYPE        = KCS
!ENDIF
OTHER_DEFINE_MACRO  = $(OTHER_DEFINE_MACRO) -d H2O_IPMI_TYPE=$(H2OIPMI_TYPE)
VERSION_FLAGS       = $(VERSION_FLAGS) /D H2OIPMI_SUPPORT=1
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D H2OIPMI_SUPPORT"
C_STD_FLAGS         = $(C_STD_FLAGS) $(VERSION_FLAGS) /D H2OIPMI_SUPPORT /D H2O_IPMI_OEM_TYPE=H2O_IPMI_$(H2OIPMI_TYPE)
ASL_CPP_STD_FLAGS   = $(ASL_CPP_STD_FLAGS) /D H2OIPMI_SUPPORT
!IF "$(H2OIPMI_SCU_UTILITY_SUPPORT)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D H2OIPMI_SCU_UTILITY_SUPPORT"
C_STD_FLAGS         = $(C_STD_FLAGS) /D H2OIPMI_SCU_UTILITY_SUPPORT=1
!ENDIF
!ENDIF

!IF "$(Q2LSERVICE_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D Q2LSERVICE_SUPPORT
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D Q2LSERVICE_SUPPORT"
!ENDIF
!IF "$(SEAMLESS_AHCI_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SEAMLESS_AHCI_SUPPORT
ASM_STD_FLAGS         = $(ASM_STD_FLAGS) /D SEAMLESS_AHCI_SUPPORT
ASL_CPP_STD_FLAGS     = $(ASL_CPP_STD_FLAGS) /D SEAMLESS_AHCI_SUPPORT
!ENDIF
!IF "$(SEAMLESS_IDE_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SEAMLESS_IDE_SUPPORT
ASM_STD_FLAGS         = $(ASM_STD_FLAGS) /D SEAMLESS_IDE_SUPPORT
ASL_CPP_STD_FLAGS     = $(ASL_CPP_STD_FLAGS) /D SEAMLESS_IDE_SUPPORT
!ENDIF

#
# This is used for preprocessing dependency files
#
C_FLAGS_DPX       = /nologo /EP $(INC) $(C_FLAGS)

!IF "$(EFI_DEBUG)" == "YES"
!IF "$(USB_DEBUG_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D USB_DEBUG_SUPPORT
!ENDIF
!ENDIF
!IF "$(SETUP_SUPPORT)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D SETUP_SUPPORT
!ENDIF

!IF "$(UEFI_NETWORK_SUPPORT)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D UEFI_NETWORK_SUPPORT"
C_STD_FLAGS         = $(C_STD_FLAGS) /D UEFI_NETWORK_SUPPORT
!IF "$(DUAL_NETWORK_ENABLE)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D DUAL_NETWORK_ENABLE"
C_STD_FLAGS         = $(C_STD_FLAGS) /D DUAL_NETWORK_ENABLE
!ENDIF
!ENDIF
!IF "$(CSM_E820_RICOH_NETBDS_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D CSM_E820_RICOH_NETBDS_SUPPORT
!ENDIF
!IF "$(FIRMWARE_PERFORMANCE)" == "YES"
C_STD_FLAGS     = $(C_STD_FLAGS) /D FIRMWARE_PERFORMANCE
!ENDIF

!IF "$(SECURE_FLASH_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SECURE_FLASH_SUPPORT
!ENDIF

!IF "$(UNSIGNED_FV_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D UNSIGNED_FV_SUPPORT
!ENDIF

!IF "$(COMMON_SPI_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D COMMON_SPI_SUPPORT
!ENDIF

!IF "$(UEFI_PAUSE_KEY_FUNCTION_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D UEFI_PAUSE_KEY_FUNCTION_SUPPORT
!ENDIF

!IF "$(BACKUP_SECURE_BOOT_SETTINGS_SUPPORT)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D BACKUP_SECURE_BOOT_SETTINGS_SUPPORT"
C_STD_FLAGS         = $(C_STD_FLAGS) /D BACKUP_SECURE_BOOT_SETTINGS_SUPPORT
!ENDIF
!IF "$(SECURE_BOOT_SUPPORT)" == "YES"
VFRCOMPILE_FLAGS    = $(VFRCOMPILE_FLAGS) -ppflag "/D SECURE_BOOT_SUPPORT"
C_STD_FLAGS         = $(C_STD_FLAGS) /D SECURE_BOOT_SUPPORT
!ENDIF
!IF "$(MEMORY_MAP_CONSISTENCY_CHECK)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D MEMORY_MAP_CONSISTENCY_CHECK
!ENDIF
!IF "$(RUNTIME_RECLAIM_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D RUNTIME_RECLAIM_SUPPORT=1
!ELSEIF "$(RUNTIME_RECLAIM_SUPPORT)" == "NO"
C_STD_FLAGS         = $(C_STD_FLAGS) /D RUNTIME_RECLAIM_SUPPORT=0
!ENDIF
C_PROJ_FLAGS        = $(C_PROJ_FLAGS) /D SUPPORT_DEPRECATED_PCI_CFG_PPI

!IF "$(AUTO_CREATE_DUMMY_BOOT_OPTION)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D AUTO_CREATE_DUMMY_BOOT_OPTION
!ENDIF

!IF "$(WIN_8_FAST_BOOT_ERROR_MESSAGE_SUPPORT)" == "YES"
C_STD_FLAGS         = $(C_STD_FLAGS) /D WIN_8_FAST_BOOT_ERROR_MESSAGE_SUPPORT
!ENDIF

###############################################################################

###############################################################################
#
# Collect final build flags for components.  These flags are used to build
# any standard component and some non-standard components.
#
###############################################################################
C_FLAGS           = $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE)
ASM_FLAGS         = $(ASM_STD_FLAGS) $(ASM_ARCH_FLAGS) $(ASM_PROJ_FLAGS)
LINK_FLAGS_DLL    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS) /DLL
LINK_FLAGS_EXE    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS)
LIB_FLAGS         = $(LIB_STD_FLAGS) $(LIB_ARCH_FLAGS) $(LIB_PROJ_FLAGS)
EBC_C_FLAGS       = $(EBC_C_STD_FLAGS) $(EBC_C_ARCH_FLAGS) $(EBC_C_PROJ_FLAGS)
EBC_LINK_FLAGS    = $(EBC_LINK_STD_FLAGS) $(EBC_LINK_ARCH_FLAGS) $(EBC_LINK_PROJ_FLAGS)
EBC_LIB_FLAGS     = $(EBC_LIB_STD_FLAGS) $(EBC_LIB_ARCH_FLAGS) $(EBC_LIB_PROJ_FLAGS)
ASL_CPP_FLAGS     = $(ASL_CPP_STD_FLAGS) $(ASL_CPP_ARCH_FLAGS) $(ASL_CPP_PROJ_FLAGS)
ASL_FLAGS         = $(ASL_STD_FLAGS) $(ASL_ARCH_FLAGS) $(ASL_PROJ_FLAGS)

!IF "$(SWITCHABLE_GRAPHICS_SUPPORT)" == "YES"
C_STD_FLAGS             = $(C_STD_FLAGS) /D SWITCHABLE_GRAPHICS_SUPPORT
ASL_CPP_FLAGS		        = $(ASL_CPP_FLAGS) /D SWITCHABLE_GRAPHICS_SUPPORT
VFRCOMPILE_FLAGS    		= $(VFRCOMPILE_FLAGS) -ppflag "/D SWITCHABLE_GRAPHICS_SUPPORT"
!ENDIF
!IF "$(MXM_SUPPORT)" == "YES"
C_STD_FLAGS           = $(C_STD_FLAGS) /D MXM_SUPPORT
ASL_CPP_FLAGS         = $(ASL_CPP_FLAGS) /D MXM_SUPPORT
VFRCOMPILE_FLAGS      = $(VFRCOMPILE_FLAGS) -ppflag "/D MXM_SUPPORT"
!ENDIF
###############################################################################
#
# define X64 denpendant driver files
#
###############################################################################
!IF "$(EFI_BUILD_TARGET_X64)" == "YES"
BUILD_TARGET_PROCESSOR = X64
PPIS_NEEDED_BY_DXECORE = Universal\PpisNeededByDxeCore\PpisNeededByDxeCore.inf
DXE_IPL                = DxeIplX64
!ELSE
BUILD_TARGET_PROCESSOR = IA32
PPIS_NEEDED_BY_DXECORE =
DXE_IPL                = DxeIpl
!ENDIF
###############################################################################
#
# define EFI specification denpendant driver files
#
###############################################################################
!IF "$(UEFI_MODE)" == "YES"
UEFI_PREFIX = Uefi
!IF "$(CAPSULE_INF)" == ""
CAPSULE_INF = Edk\Sample\Universal\Capsule\RuntimeDxe\Capsule.inf
!ENDIF
!ELSE
UEFI_PREFIX =
CAPSULE_INF =
!ENDIF
###############################################################################
#
# define shell source and binary for different build
#
###############################################################################
!IF "$(EFI_USE_NEW_SHELL_BIN)" == "YES"
!IF "$(EFI_SPECIFICATION_VERSION)" >= "0x0002000A"
SHELL_INF        = Edk\Other\Maintained\Application\$(UEFI_PREFIX)Shell\bin
!ELSE
SHELL_INF        = Edk\Other\Maintained\Application\Shell\bin
!ENDIF
!ELSEIF "$(EFI_USE_SHELL_BIN)" == "YES"
SHELL_INF        = Application\Shell\Bin\$(PROJECT_NAME)
!ELSE
SHELL_INF        = Application\Shell
!ENDIF
###############################################################################
#
# define size reduction suffix for .inf files
#
###############################################################################
!IF "$(EFI_SIZE_REDUCTION_APPLIED)" == "YES"
SIZE_INF_SUFFIX  = Lite.inf
!ELSE
SIZE_INF_SUFFIX  = .inf
!ENDIF

C_STD_FLAGS       = $(C_STD_FLAGS) /D EFI_BUILD_VERSION="L\"$(EFI_BUILD_VERSION)\"" /D EFI_FIRMWARE_VENDOR="L\"INSYDE Corp.\""
C_FLAGS           = $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE)
###############################################################################
#
# define Custom Compress
#
###############################################################################
!IF "$(EFI_USE_CUSTOM_COMPRESS)" == "YES"
CUSTOMIZEDCOMPRESS_MAKEFILE     = $(TIANO_TOOLS_SOURCE)\CustomizedCompress\Makefile
CUSTOMIZEDDECOMPRESS_INF        = Library\CustomizedDecompress\CustomizedDecompress.inf
COMPRESS_METHOD                 = LZMA
!ELSE
CUSTOMIZEDCOMPRESS_MAKEFILE     = $(EDK_TOOLS_SOURCE)\CustomizedCompress\Makefile
CUSTOMIZEDDECOMPRESS_INF        = Edk\Foundation\Library\CustomizedDecompress\CustomizedDecompress.inf
COMPRESS_METHOD                 = Dummy
!ENDIF
###############################################################################
#
# define Debug Port
#
###############################################################################
!IF "$(PLATFORM_DEBUG_PORT_NUMBER)" != ""
C_STD_FLAGS          = $(C_STD_FLAGS) /D PLATFORM_DEBUG_PORT_NUMBER=$(PLATFORM_DEBUG_PORT_NUMBER)
ASM_STD_FLAGS        = $(ASM_STD_FLAGS) /D PLATFORM_DEBUG_PORT_NUMBER=$(PLATFORM_DEBUG_PORT_NUMBER)
ASL_CPP_STD_FLAGS    = $(ASL_CPP_STD_FLAGS) /D PLATFORM_DEBUG_PORT_NUMBER=$(PLATFORM_DEBUG_PORT_NUMBER)
!ENDIF

###############################################################################
#
# define Graphics Setup
#
###############################################################################
!IF "$(GRAPHICS_SETUP_SUPPORT)" == "YES"
C_STD_FLAGS           = $(C_STD_FLAGS) /D GRAPHICS_SETUP_SUPPORT
VFRCOMPILE_FLAGS      = $(VFRCOMPILE_FLAGS) -ppflag "/D GRAPHICS_SETUP_SUPPORT"
!ENDIF

###############################################################################
#
# define Text mode 0 and 1 to be full screen
#
###############################################################################
!IF "$(TEXT_MODE_FULL_SCREEN_SUPPORT)" == "YES"
C_STD_FLAGS           = $(C_STD_FLAGS) /D TEXT_MODE_FULL_SCREEN_SUPPORT
!ENDIF

###############################################################################
#
# define not support multiple edid case
#
###############################################################################
!IF "$(ONLY_USE_PRIMARY_MONITOR_TO_DISPLAY)" == "YES"
C_STD_FLAGS           = $(C_STD_FLAGS) /D ONLY_USE_PRIMARY_MONITOR_TO_DISPLAY
!ENDIF
