/** @file

;******************************************************************************
;* Copyright (c) 2012 - 2014, Insyde Software Corporation. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;******************************************************************************
*/

#include <Facp.h>
#include <ChipsetSmiTable.h>
#include <IndustryStandard/Acpi50.h>

EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE FACP = {
  {
    EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,
    sizeof (EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE),
    EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_REVISION,
  0,                // to make sum of entire table == 0

  // OEM identification
  EFI_ACPI_OEM_ID,

  // OEM table identification
  EFI_ACPI_OEM_TABLE_ID,

  // OEM revision number
  EFI_ACPI_OEM_REVISION, 

  // ASL compiler vendor ID
  EFI_ACPI_CREATOR_ID,
  
  // ASL compiler revision number
  EFI_ACPI_CREATOR_REVISION,
  },
  0,                    // Physical addesss of FACS
  0,                    // Physical address of DSDT
  INT_MODEL,            // System Interrupt Model
//  EFI_ACPI_3_0_PM_PROFILE_UNSPECIFIED
  EFI_ACPI_3_0_PM_PROFILE_MOBILE,

  SCI_INT_VECTOR,       // System vector of SCI interrupt
  FixedPcdGet16(PcdSoftwareSmiPort),      // Port address of SMI command port
  ACPI_ENABLE,          // Value to write to port smi_cmd to enable ACPI
  ACPI_DISABLE,         // Value to write to port smi_cmd to disable ACPI
  S4BIOS_REQ,           // Value to write to SMI CMD port to enter the S4BIOS state
  0x80,//PSTATE_CNT,
  PM1a_EVT_BLK,         // Port address of Power Mgt 1a Event Reg Blk
  PM1b_EVT_BLK,         // Port address of Power Mgt 1b Event Reg Blk
  PM1a_CNT_BLK,         // Port address of Power Mgt 1a Ctrl Reg Blk
  PM1b_CNT_BLK,         // Port address of Power Mgt 1b Ctrl Reg Blk
  PM2_CNT_BLK,          // Port address of Power Mgt 2  Ctrl Reg Blk
  PM_TMR_BLK,           // Port address of Power Mgt Timer Ctrl Reg Blk
  GPE0_BLK,             // Port addr of General Purpose Event 0 Reg Blk
  GPE1_BLK,             // Port addr of General Purpose Event 1 Reg Blk
  PM1_EVT_LEN,          // Byte Length of ports at pm1X_evt_blk
  PM1_CNT_LEN,          // Byte Length of ports at pm1X_cnt_blk
  PM2_CNT_LEN,          // Byte Length of ports at pm2_cnt_blk
  PM_TM_LEN,            // Byte Length of ports at pm_tm_blk
  GPE0_BLK_LEN,         // Byte Length of ports at gpe0_blk
  GPE1_BLK_LEN,         // Byte Length of ports at gpe1_blk
  GPE1_BASE,            // Offset in gpe model where gpe1 events start

  0x85,//CST_CNT,
  P_LVL2_LAT,           // Worst case HW latency to enter/exit C2 state
  P_LVL3_LAT,           // Worst case HW latency to enter/exit C3 state
  FLUSH_SIZE,           // Size of area read to flush caches
  FLUSH_STRIDE,         // Stride used in flushing caches
  DUTY_OFFSET,          // Bit location of duty cycle field in p_cnt reg
  DUTY_WIDTH,           // Bit width of duty cycle field in p_cnt reg
  DAY_ALRM,             // Index to day-of-month alarm in RTC CMOS RAM
  MON_ALRM,             // Index to month-of-year alarm in RTC CMOS RAM
  CENTURY,              // Index to century in RTC CMOS RAM

  //RESERVED,             // Reserved
  EFI_ACPI_3_0_LEGACY_DEVICES|EFI_ACPI_3_0_8042|(1 << 4),       
  RESERVED,             // Reserved1
   0x00386A5,	  

  //
  //ResetReg;
  //     
  {
    0,
    0,
    0,
    0,
    0xCF9
  },
  //
  //ResetValue;
  //
  0x06,
  //   
  //Reserved2[3]; 
  //
  {
    RESERVED,
    RESERVED,
    RESERVED
  },
  //
  //XFirmwareCtrl;
  //
  0,
  //
  //XDsdt;
  //
  0,  
  //      
  //XPm1aEvtBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },  
  //
  //XPm1bEvtBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },  
  //
  //XPm1aCntBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  }, 
  // 
  //XPm1bCntBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //  
  //XPm2CntBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //   
  //XPmTmrBlk;
  // 
  {
    0,
    0,
    0,
    0,
    0
  },
  //   
  //XGpe0Blk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //     
  //XGpe1Blk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  //SleepControlReg
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  //SleepStatusReg
  //
  {
    0,
    0,
    0,
    0,
    0
  }         
};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the exeutable
  //
  return (VOID *)&FACP;
}
