/** @file

;******************************************************************************
;* Copyright (c) 2012 - 2014, Insyde Software Corporation. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;******************************************************************************
*/

//
// Statements that include other files
//
#include <Base.h>
#include <Wdat.h>
#include <ChipsetCmos.h>
#include <PchRegs.h>

//
// Watchdog Action Table
//
EFI_ACPI_WATCHDOG_ACTION_1_0_DESCRIPTION_TABLE Wdat = {
  {
    //
    //==========================
    //  Standard ACPI Header 
    //==========================
    //
    {
      SIGNATURE_32 ('W', 'D', 'A', 'T'),
      sizeof (EFI_ACPI_WATCHDOG_ACTION_1_0_DESCRIPTION_TABLE),
      EFI_ACPI_WATCHDOG_ACTION_1_0_TABLE_REVISION,
      0,
      EFI_ACPI_OEM_ID,
      EFI_ACPI_OEM_TABLE_ID,
      EFI_ACPI_OEM_REVISION,
      EFI_ACPI_CREATOR_ID,
      EFI_ACPI_CREATOR_REVISION
    },
    //
    //===================
    //  Watchdog Header
    //===================
    //
    sizeof (EFI_ACPI_WATCHDOG_ACTION_1_0_TABLE) - sizeof (EFI_ACPI_DESCRIPTION_HEADER),  // WatchdogHeaderLength;
    0xFF,                                // PCISegment;
    0xFF,                                // PCIBusNumber;
    0xFF,                                // PCIDeviceNumber;
    0xFF,                                // PCIFunctionNumber;
    0x0, 0x0, 0x0,                       // Reserved_45[3];
    600,                                 // TimerPeriod;
    1023,                                // MaxCount;
    2,                                   // MinCount;
    EFI_ACPI_WDAT_1_0_WATCHDOG_ENABLED | EFI_ACPI_WDAT_1_0_WATCHDOG_STOPPED_IN_SLEEP_STATE,  // WatchdogFlags;
    0x0, 0x0, 0x0,                       // Reserved_61[3];
    MAX_NUMBER_ACTION_ENTRIES            // NumberWatchdogInstructionEntries
  },
  //
  //==================
  //  Action Tables
  //==================
  //
  {
    //
    //================================================================
    //                   Reset
    //================================================================
    // 
    // Restarts the watchdog timer's countdown. This action is required.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_RESET,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE,
      0,        // Reserved x 2
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO_RLD },
      0x0,      // value, write any value will reset counter
      0x03FF    // Mask
    },
    //
    //================================================================
    //                   Query Current Countdown Period - (optional)
    //================================================================
    // 
    // Returns the current countdown value of the watchdog hardware (in count intervals).
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_CURRENT_COUNTDOWN_PERIOD,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_COUNTDOWN,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO_RLD },
      0x0,
      0x03FF
    },
    //
    //================================================================
    //                   Query Countdown Period - (optional)
    //================================================================
    // 
    // Returns the countdown value the watchdog hardware 
    // is configured to use when reset
    // (in count intervals).
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_COUNTDOWN_PERIOD,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_COUNTDOWN,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO_TMR },
      0x0,
      0x03FF
    },
    //
    //================================================================
    //                   Set Countdown Period List
    //================================================================
    //
    // Sets the countdown value (in count intervals) 
    // to be used when the watchdog timer is reset.
    // This action is required if WATCHDOG_ACTION_RESET does not explicitly 
    // write a new countdown value to a register during a reset. 
    // Otherwise, this action is optional.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_COUNTDOWN_PERIOD,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_COUNTDOWN | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO_TMR },
      0x0,
      0x03FF
    },
    //
    //================================================================
    //                   Query Running State List
    //================================================================
    //
    // Determines if the watchdog hardware is currently in enabled/running 
    // state. The same result must occur when performed from both 
    // from enabled/stopped state and enabled/running state.
    // If the watchdog hardware is disabled, results are indeterminate.
    // This action is required.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_RUNNING_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_VALUE,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 11, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO1_CNT },
      0x0,
      0x1
    },
    //
    //================================================================
    //                   Set Running State List
    //================================================================
    //
    // Starts the watchdog, if not already in running state.
    // If the watchdog hardware is disabled, results are indeterminate.
    // This action is required.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_RUNNING_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO1_CNT },
      (0x0 << 11),
      (0x1 << 11)
    },
    // set CMOS 0x45[0] to 1
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_RUNNING_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosIndexPort)},
      TcoWatchdogTimerStatus,
      0xFF
    },
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_RUNNING_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosDataPort)},
      0x1,
      0x1
    },
    //
    //================================================================
    //                  Query Stopped State List
    //================================================================
    //
    // Determines if the watchdog hardware is currently in enabled/stopped 
    // state. The sameresult must occur when performed from both the 
    // enabled/stopped state and enabled/running state.
    // If the watchdog hardware is disabled, results are indeterminate.
    // This action is required.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_STOPPED_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_VALUE,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 11, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO1_CNT },
      0x1,
      0x1
    },
    //
    //================================================================
    //                  Set Stopped State List    
    //================================================================
    //
    // Stops the watchdog, if not already in stopped state.
    // If the watchdog hardware is disabled, results are indeterminate.
    // This action is required.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_STOPPED_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO1_CNT },
      (0x1 << 11),
      (0x1 << 11)
    },
    // clear CMOS 0x45[0]
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_STOPPED_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosIndexPort)},
      TcoWatchdogTimerStatus,
      0xFF
    },
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_STOPPED_STATE,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosDataPort)},
      0x0,
      0x1
    },
    //
    //================================================================
    //                   Query Reboot - (optional)
    //================================================================
    //
    // Determines if the watchdog hardware is configured 
    // to perform a reboot when the watchdog is fired.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_REBOOT,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_VALUE,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 8, 4, EFI_ACPI_3_0_BYTE, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO2_CNT },
      0x0,
      0x3
    },
    //
    //================================================================
    //                   Set Reboot - (optional)
    //================================================================
    //
    // Configures the watchdog hardware to perform a reboot  
    // when it is fired.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_REBOOT,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0x0,
      0x0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO2_CNT },
      (0X0 << 4),
      (0X3 << 4)
    },
    //
    //================================================================
    //                   Query Shutdown - (optional)
    //================================================================
    //
    // Determines if the watchdog hardware is configured to perform 
    // a system shutdown when fired.
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_SHUTDOWN,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_VALUE,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 8, 4, EFI_ACPI_3_0_BYTE, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO2_CNT },
      0x1,
      0x3
    },
    //
    //================================================================
    //                   Set Shutdown - (optional)
    //================================================================
    //
    // Configures the watchdog hardware to perform a system shutdown 
    // when fired. 
    //
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_SHUTDOWN,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      { EFI_ACPI_3_0_SYSTEM_IO, 16, 0, EFI_ACPI_3_0_WORD, FixedPcdGet16(PcdPerfPkgAcpiIoPortBaseAddress) + PCH_TCO_BASE + R_PCH_TCO2_CNT },
      (0x1 << 4),
      (0x3 << 4)
    },
    //
    //================================================================
    //                   Query Watchdog Status List
    //================================================================
    //
    // Determines if the current boot was caused by the watchdog firing.
    // The boot status is required to be set if the watchdog fired 
    // and caused a reboot.
    // It is recommended that the Watchdog Status be set if the watchdog
    // fired and causeda shutdown.
    // This action is required.
    //
    // read CMOS 0x45[1]
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_WATCHDOG_STATUS,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosIndexPort)},
      TcoWatchdogTimerStatus,
      0xFF
    },
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_QUERY_WATCHDOG_STATUS,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_READ_VALUE,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosDataPort)},
      0x1,
      0x1
    },
    //
    //================================================================
    //                   Clear Watchdog Status List
    //================================================================
    //
    // Sets the watchdog's boot status to the default value.
    // This action is required.
    //
    // clear CMOS 0x59[1]
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_WATCHDOG_STATUS,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosIndexPort)},
      TcoWatchdogTimerStatus,
      0xFF
    },
    {
      EFI_ACPI_WDAT_1_0_WATCHDOG_ACTION_SET_WATCHDOG_STATUS,
      EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_WRITE_VALUE | EFI_ACPI_WDAT_1_0_WATCHDOG_INSTRUCTION_PRESERVE_REGISTER,
      0,
      0,
      {EFI_ACPI_3_0_SYSTEM_IO, 8, 0, EFI_ACPI_3_0_BYTE, FixedPcdGet8(PcdCmosDataPort)},
      0x0,
      0x1
    },

  } // Action Tables
}; // wdrt

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the exeutable
  //
  return (VOID *)&Wdat;
}
