/** @file

;******************************************************************************
;* Copyright (c) 2012 - 2014, Insyde Software Corp. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;******************************************************************************
*/

#include <ChipsetSetupConfig.h>
//[-start-131129-IB09740048-add]//
#include <CrSetupConfig.h>
//[-end-131129-IB09740048-add]//

//[-start-120316-IB06460376-modify]//
//
//          Form 2: Advanced Menu
//
formset
#if FeaturePcdGet(PcdH2OFormBrowserSupported)
  guid      = FORMSET_ID_GUID_ADVANCE,
#else
  guid     = SYSTEM_CONFIGURATION_GUID,
#endif
  title    = STRING_TOKEN(STR_ADVANCED_TITLE),
  help     = STRING_TOKEN(STR_BLANK_STRING),
  classguid = SETUP_UTILITY_FORMSET_CLASS_GUID,
  class    = SETUP_UTILITY_CLASS,
  subclass = EFI_USER_ACCESS_THREE,
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
  image     = IMAGE_TOKEN (IMAGE_ADVANCE);
#endif
  varstore CHIPSET_CONFIGURATION,            // This is the data structure type
    varid = CONFIGURATION_VARSTORE_ID,      // Optional VarStore ID
    name  = SystemConfig,                    // Define referenced name in vfr
    guid  = SYSTEM_CONFIGURATION_GUID;      // GUID of this buffer storage

//[-start-131002-IB08520088-add]//
  varstore PASSWORD_CONFIGURATION,
    varid = PASSWORD_CONFIGURATION_VARSTORE_ID,
    name  = PasswordConfig,
    guid  = PASSWORD_CONFIGURATION_GUID;
//[-end-131002-IB08520088-add]//

//[-start-131030-IB08520089-add]//
  namevaluevarstore PasswordNameValueVar,                  // Define storage reference name in vfr
    name = STRING_TOKEN(STR_HDD_PASSWORD_VAR_NAME),        // Define Name list of this storage, refer it by PasswordNameValueVar[0]
    name = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_VAR_NAME), // Define Name list of this storage, refer it by PasswordNameValueVar[1]
    guid = PASSWORD_CONFIGURATION_GUID;                    // GUID of this Name/Value storage
//[-end-131030-IB08520089-add]//
//[-start-131129-IB09740048-add]//
  varstore CR_CONFIGURATION,
  varid = CR_CONFIGURATION_VARSTORE_ID,
  name  = CrConfig,
  guid  = CR_CONFIGURATION_GUID;
//[-end-131129-IB09740048-add]//

  form formid = ROOT_FORM_ID,

    title = STRING_TOKEN(STR_ADVANCED_TITLE);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    goto 0x21,
      prompt = STRING_TOKEN(STR_BOOT_CONFIG_STRING),
      help = STRING_TOKEN(STR_BOOT_CONFIG_HELP);
    goto 0x22,
      prompt = STRING_TOKEN(STR_PERIP_CONFIG_STRING),
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
      help = STRING_TOKEN(STR_PERIP_CONFIG_HELP),
      image = IMAGE_TOKEN (IMAGE_PERIPHERAL),;
#else
      help = STRING_TOKEN(STR_PERIP_CONFIG_HELP);
#endif
    goto 0x23,
//[-start-120807-IB02382253-modify]//
      prompt = STRING_TOKEN(STR_SATA_CONFIG_STRING),
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
      help = STRING_TOKEN(STR_SATA_CONFIG_HELP),
      image = IMAGE_TOKEN (IMAGE_SATA_CONFIG),;
#else
      help = STRING_TOKEN(STR_SATA_CONFIG_HELP);
#endif
//[-end-120807-IB02382253-modify]//
    goto 0x24,
      prompt = STRING_TOKEN(STR_THERMAL_CONFIG_STRING),
      help = STRING_TOKEN(STR_THERMAL_CONFIG_HELP);
    goto 0x25,
      prompt = STRING_TOKEN(STR_VIDEO_CONFIG_STRING),
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
      help = STRING_TOKEN(STR_VIDEO_CONFIG_HELP),
      image = IMAGE_TOKEN (IMAGE_VIDEO_CONFIG),;
#else
      help = STRING_TOKEN(STR_VIDEO_CONFIG_HELP);
#endif
    goto 0x26,
      prompt = STRING_TOKEN(STR_USB_CONFIG_STRING),
      help = STRING_TOKEN(STR_USB_CONFIG_HELP);
    goto 0x27,
      prompt = STRING_TOKEN(STR_CHIPSET_CONFIG_STRING),
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
      help = STRING_TOKEN(STR_CHIPSET_CONFIG_HELP),
      image = IMAGE_TOKEN (IMAGE_CHIPSET_CONFIG),;
#else
      help = STRING_TOKEN(STR_CHIPSET_CONFIG_HELP);
#endif
    goto 0x28,
      prompt = STRING_TOKEN(STR_ACPI_TABLE_STRING),
#if defined(SETUP_IMAGE_SUPPORT) && FeaturePcdGet(PcdH2OFormBrowserLocalMetroDESupported)
      help = STRING_TOKEN(STR_ACPI_TABLE_HELP),
      image = IMAGE_TOKEN (IMAGE_ACPI_CONFIG),;
#else
      help = STRING_TOKEN(STR_ACPI_TABLE_HELP);
#endif
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdMe5MbSupported)
//[-end-130812-IB05670190-modify]//
     suppressif
       ideqval SystemConfig.MeFwImageType == FW_IMAGE_TYPE_1_5MB;
     goto 0x29,
       prompt = STRING_TOKEN(STR_AMT_CONFIG_STRING),
       help = STRING_TOKEN(STR_AMT_CONFIG_HELP);
     endif;
#endif
    goto 0x30,
         prompt = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIE_CONFIG_FORM_HELP);

    // my homework
    goto 0x31,
      prompt = STRING_TOKEN(STR_TEST_CONFIG_STRING),
      help = STRING_TOKEN(STR_TEST_CONFIG_HELP);

//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdH2OConsoleRedirectionSupported)
//[-end-130812-IB05670190-modify]//
    goto 0x36,
      prompt = STRING_TOKEN(STR_TERMINAL_TITLE),
      help = STRING_TOKEN(STR_TERMINAL_TITLE_HELP);
#endif
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdAntiTheftSupported)
//[-end-130812-IB05670190-modify]//
     goto 0x38,
       prompt = STRING_TOKEN(STR_AT_CONFIG_STRING),
       help = STRING_TOKEN(STR_AT_CONFIG_HELP);
#endif
//[-start-121201-IB03780468-modify]//
    goto 0x37,
      prompt = STRING_TOKEN(STR_OVERCLOCKING_CONFIG_STRING),
      help = STRING_TOKEN(STR_OVERCLOCKING_CONFIG_HELP),
      flags = INTERACTIVE,
      key = KEY_XTU_ITEM;
//[-end-121201-IB03780468-modify]//
    goto EXTENDED_ICC_FORM_ID,
      prompt = STRING_TOKEN(STR_ICC_CONFIG_STRING),
      help = STRING_TOKEN(STR_ICC_CONFIG_HELP);
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdRapidStartSupported)
//[-end-130812-IB05670190-modify]//
    goto 0x40,
      prompt = STRING_TOKEN(STR_RAPID_START_STRING),    
      help = STRING_TOKEN(STR_RAPID_START_HELP);
#endif
    goto DPTF_FORM_ID,
      prompt = STRING_TOKEN ( STR_DPTF_FORM_STRING ),
      help   = STRING_TOKEN ( STR_DPTF_FORM_HELP );
//[-start-120713-IB06460418-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
//[-start-121115-IB06150259-modify]//
    goto SERIAL_IO_FORM_ID,
      prompt = STRING_TOKEN ( STR_SERIAL_IO_FORM_STRING ),
      help   = STRING_TOKEN ( STR_SERIAL_IO_FORM_HELP );
//[-end-121115-IB06150259-modify]//
//[-start-121002-IB06150249-add]//
    goto ADSP_FORM_ID,
      prompt = STRING_TOKEN ( STR_ADSP_FORM_STRING ),
      help   = STRING_TOKEN ( STR_ADSP_FORM_HELP );
//[-end-121002-IB06150249-add]//
#endif
//[-end-120713-IB06460418-add]//
//[-start-120604-IB06150223-modify]//
//
// ISCT
//
  goto ISCT_FORM_ID,
      prompt = STRING_TOKEN(STR_ISCT_STRING),
      help = STRING_TOKEN(STR_ISCT_HELP);

//[-start-130617-IB04560405-add]//
//[-start-131122-IB08400219-modify]//
//[-start-140318-IB08400253-modify]//
#if FeaturePcdGet(PcdH2OEventLogSupport)
    goto VFR_FORMID_BIOS_EVENT_LOG,
       prompt = STRING_TOKEN(STR_BIOS_EVENT_LOG_TITLE),
       help = STRING_TOKEN(STR_BLANK_STRING);
#endif
//[-end-131122-IB08400219-modify]//

#if FeaturePcdGet(PcdH2OPostMessageSupport)
    goto VFR_FORMID_POST_MESSAGE,
       prompt = STRING_TOKEN(STR_POST_MESSAGE_TITLE),
       help = STRING_TOKEN(STR_BLANK_STRING);
#endif
//[-end-140318-IB08400253-modify]//

//[-start-131225-IB08620313-add]//
#ifdef APEI_SUPPORT
    goto APEI_FORM_ID,
      prompt = STRING_TOKEN(STR_WHEA_TITLE),
      help = STRING_TOKEN(STR_BLANK_STRING);
#endif
//[-end-131225-IB08620313-add]//

//[-start-131122-IB08400219-remove]//
//#if FeaturePcdGet(PcdH2OEventHandlerSupport)
//    text
//      help   = STRING_TOKEN(STR_EVENT_LOG_VIEWER_HELP),
//      text   = STRING_TOKEN(STR_EVENT_LOG_VIEWER_STRING),
//      text   = STRING_TOKEN(STR_BLANK_STRING),
//      flags  = INTERACTIVE,
//      key    = KEY_EVENT_LOG_VIEWER;
//#endif
//[-end-131122-IB08400219-remove]//
//[-end-130617-IB04560405-add]//

//[-start-130611-IB11120016-add]//
    label IPMI_CONFIG_LABEL;
//[-end-130611-IB11120016-add]//

  endform;
//[-end-120604-IB06150223-modify]//

    //
    //  Form 0x20: Pci configuration
    //
    form
      formid = 0x20, title = STRING_TOKEN(STR_PCI_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_PCI_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

      oneof
        varid       = SystemConfig.PciSlot3,
        questionid = KEY_PCI_SLOT3_IRQ_SET,
        prompt      = STRING_TOKEN(STR_PCI_SLOT3_STRING),
        help        = STRING_TOKEN(STR_PCI_SLOT_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),      value = 0, flags = INTERACTIVE | DEFAULT;
        option text = STRING_TOKEN(STR_PCI_IRQ3_TEXT),  value = 3, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ4_TEXT),  value = 4, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ5_TEXT),  value = 5, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ7_TEXT),  value = 7, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ9_TEXT),  value = 9, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ10_TEXT), value = 10, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ11_TEXT), value = 11, flags = INTERACTIVE;
      endoneof;

      oneof
        varid       = SystemConfig.PciSlot4,
        questionid = KEY_PCI_SLOT4_IRQ_SET,
        prompt      = STRING_TOKEN(STR_PCI_SLOT4_STRING),
        help        = STRING_TOKEN(STR_PCI_SLOT_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),      value = 0, flags = INTERACTIVE | DEFAULT;
        option text = STRING_TOKEN(STR_PCI_IRQ3_TEXT),  value = 3, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ4_TEXT),  value = 4, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ5_TEXT),  value = 5, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ7_TEXT),  value = 7, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ9_TEXT),  value = 9, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ10_TEXT), value = 10, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_IRQ11_TEXT), value = 11, flags = INTERACTIVE;
      endoneof;
      endif;


    endform;

    //
    //  Form 0x21: Boot Configuration
    //
    form
      formid = 0x21, title = STRING_TOKEN(STR_BOOT_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BOOT_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.NumLock,
        prompt      = STRING_TOKEN(STR_NUMLOCK_STRING),
        help        = STRING_TOKEN(STR_NUMLOCK_HELP),
        option text = STRING_TOKEN(STR_OFF_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ON_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
//[-start-130812-IB05670190-modify]//
#if !FeaturePcdGet(PcdH2OUsbSupported)
//[-end-130812-IB05670190-modify]//
      //
      // Usb Zip Emulation as FDD or HDD
      //
      oneof
        varid       = SystemConfig.UsbZipEmulation,
        prompt      = STRING_TOKEN(STR_ZIP_EMULATION_STRING),
        help        = STRING_TOKEN(STR_ZIP_EMULATION_HELP),
        option text = STRING_TOKEN(STR_ZIP_EMU_FDDTYPE_TEXT),  value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ZIP_EMU_HDDTYPE_TEXT),  value = 1, flags = 0;
      endoneof;
#endif
      endif;


    endform;

    //
    //  Form 0x22: Peripheral Configuration
    //
    form
      formid = 0x22, title = STRING_TOKEN(STR_PERIP_CONFIG_STRING);


      subtitle
        text = STRING_TOKEN(STR_PERIP_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

//[-start-130606-10630035-remove]//
//      //
//      // If serial port a enable, display Base Io and interrupt,
//      // else hidden them.
//      //
//      grayoutif
//        ideqval SystemConfig.UserAccessLevel == 2
//        AND
//        ideqval SystemConfig.SetUserPass == 1;
//      oneof
//        varid       = SystemConfig.ComPortA,
//        questionid  = KEY_SERIAL_PORTA,
//        prompt      = STRING_TOKEN(STR_SERIAL_PORT_A_STRING),
//        help        = STRING_TOKEN(STR_SERIAL_PORT_A_HELP),
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = INTERACTIVE;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value = 1, flags = INTERACTIVE | DEFAULT;
//        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 2, flags = 0;
//      endoneof;
//      endif;
//
//        //
//        // hide option when Disable or Auto
//        //
//        grayoutif
//        ideqval SystemConfig.UserAccessLevel == 2
//        AND
//        ideqval SystemConfig.SetUserPass == 1;
//        suppressif
//          ideqvallist SystemConfig.ComPortA == 0 1;
//          oneof
//            varid       = SystemConfig.ComPortABaseIo,
//            questionid  = KEY_SERIAL_PORTA_BASE_IO,
//            prompt      = STRING_TOKEN(STR_BASEIO_STRING),
//            help        = STRING_TOKEN(STR_BLANK_STRING),
//            option text = STRING_TOKEN(STR_2E8_TEXT), value = 0x0, flags = INTERACTIVE;
//            option text = STRING_TOKEN(STR_2F8_TEXT), value = 0x1, flags = INTERACTIVE;
//            option text = STRING_TOKEN(STR_3E8_TEXT), value = 0x2, flags = INTERACTIVE;
//            option text = STRING_TOKEN(STR_3F8_TEXT), value = 0x3, flags = INTERACTIVE | DEFAULT;
//          endoneof;
//
//          oneof
//            varid       = SystemConfig.ComPortAInterrupt,
//            questionid  = KEY_SERIAL_PORTA_INTERRUPT,
//            prompt      = STRING_TOKEN(STR_INTERRUPT_STRING),
//            help        = STRING_TOKEN(STR_BLANK_STRING),
//            option text = STRING_TOKEN(STR_PCI_IRQ3_TEXT), value = 3,  flags = INTERACTIVE;
//            option text = STRING_TOKEN(STR_PCI_IRQ4_TEXT), value = 4,  flags = INTERACTIVE | DEFAULT;
//          endoneof;
//        endif;
//        endif;
//[-end-130606-10630035-remove]//

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.ComPortB,
        questionid  = KEY_SERIAL_PORTB,
        prompt      = STRING_TOKEN(STR_INFRARED_PORT_STRING),
        help        = STRING_TOKEN(STR_INFRARED_PORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = INTERACTIVE | DEFAULT;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value = 1, flags = INTERACTIVE;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 2, flags = INTERACTIVE;
      endoneof;
      endif;
        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.ComPortB == 0;
          oneof
            varid       = SystemConfig.ComPortBMode,
            prompt      = STRING_TOKEN(STR_MODE_STRING),
            help        = STRING_TOKEN(STR_MODE_HELP),
            option text = STRING_TOKEN(STR_CIR_TEXT),    value = 1, flags = 0;
            option text = STRING_TOKEN(STR_FIR_TEXT),    value = 2, flags = DEFAULT;
          endoneof;
        endif;
        endif;
        //
        // hide option when Disable or Auto
        //
        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqvallist SystemConfig.ComPortB == 0 1;
          oneof
            varid       = SystemConfig.ComPortBBaseIo,
            questionid  = KEY_SERIAL_PORTB_BASE_IO,
            prompt      = STRING_TOKEN(STR_BASEIO_STRING),
            help        = STRING_TOKEN(STR_BLANK_STRING),
            option text = STRING_TOKEN(STR_2E8_TEXT), value = 0x0, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_2F8_TEXT), value = 0x1, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_3E8_TEXT), value = 0x2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_3F8_TEXT), value = 0x3, flags = INTERACTIVE;
          endoneof;

          oneof
            varid       = SystemConfig.ComPortBInterrupt,
            questionid  = KEY_SERIAL_PORTB_INTERRUPT ,
            prompt      = STRING_TOKEN(STR_INTERRUPT_STRING),
            help        = STRING_TOKEN(STR_BLANK_STRING),
            option text = STRING_TOKEN(STR_PCI_IRQ3_TEXT), value = 3,  flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_PCI_IRQ4_TEXT), value = 4,  flags = INTERACTIVE;
          endoneof;
        endif;
        endif;

        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqvallist SystemConfig.ComPortB == 0 1
            OR
          ideqval SystemConfig.ComPortBMode == 0;
          oneof
          varid       = SystemConfig.ComPortBDma,
          prompt      = STRING_TOKEN(STR_DMA_CHANNEL_STRING),
          help        = STRING_TOKEN(STR_BLANK_STRING),
          option text = STRING_TOKEN(STR_DMA1_TEXT), value = 1,  flags = 0;
          option text = STRING_TOKEN(STR_DMA2_TEXT), value = 2,  flags = 0;
          option text = STRING_TOKEN(STR_DMA3_TEXT), value = 3,  flags = DEFAULT;
          endoneof;
        endif;
        endif;

        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqvallist SystemConfig.ComPortB == 0 1
            OR
          ideqval SystemConfig.ComPortBMode == 1;
          oneof
          varid       = SystemConfig.FirHighSpeed,
          prompt      = STRING_TOKEN(STR_HIGHSPEED_STRING),
          help        = STRING_TOKEN(STR_HIGHSPEED_HELP),
          option text = STRING_TOKEN(STR_NORMALSPEED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_HIGHSPEED_TEXT),     value = 1, flags = 0;
          endoneof;
        endif;
        endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

//[-start-120619-IB10540010-modify]//
        label AZALIA_LABEL;
        oneof
          varid       = SystemConfig.Azalia,
//[-start-120920-IB05330379-add]//
          questionid  = KEY_AZALIA_CHANGE,
//[-end-120920-IB05330379-add]//
          prompt      = STRING_TOKEN ( STR_AZALIA_STRING ),
          help        = STRING_TOKEN ( STR_AZALIA_HELP   ),
//[-start-120705-IB05330352-modify]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
//[-start-120920-IB05330379-modify]//
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_AUTO_TEXT     ), value = 2, flags = 0 | INTERACTIVE;
//[-end-120920-IB05330379-modify]//
#else
//[-start-120920-IB05330379-modify]//
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_AUTO_TEXT     ), value = 2, flags = DEFAULT | INTERACTIVE;
//[-end-120920-IB05330379-modify]//
#endif
//[-end-120705-IB05330352-modify]//

        endoneof;
      endif;
//[-end-120619-IB10540010-modify]//

//[-start-120606-IB04770232-remove]//
//       grayoutif
//         ideqval SystemConfig.UserAccessLevel == 2
//         AND
//         ideqval SystemConfig.SetUserPass == 1;
//         suppressif
//           ideqval SystemConfig.Azalia == 0;
//         oneof
//           varid       = SystemConfig.AzaliaHdmi,
//           prompt      = STRING_TOKEN ( STR_AZALIA_HDMI_CODEC_STRING    ),
//           help        = STRING_TOKEN ( STR_AZALIA_HDMI_CODEC_HELP      ),
//           option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
//           option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
//         endoneof;
//       endif;
//       endif;
//[-end-120606-IB04770232-remove]//

//[-start-120619-IB10540010-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Azalia == 0;
        oneof
          varid       = SystemConfig.AzaliaDockSupport,
          prompt      = STRING_TOKEN ( STR_AZALIA_DOCK_SUPPORT_STRING  ),
          help        = STRING_TOKEN ( STR_AZALIA_DOCK_SUPPORT_HELP    ),
//[-start-120629-IB05330352-modify]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
#else
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
#endif
//[-end-120629-IB05330352-modify]//
        endoneof;
      endif;
      endif;
//[-end-120619-IB10540010-add]//

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Azalia == 0;
        oneof
          varid       = SystemConfig.AzaliaPme,
          prompt      = STRING_TOKEN ( STR_AZALIA_PME_STRING    ),
          help        = STRING_TOKEN ( STR_AZALIA_PME_HELP      ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof
          varid       = SystemConfig.Lan,
//[-start-121129-IB06150263-add]//
          questionid = KEY_LAN_SELECT,
//[-end-121129-IB06150263-add]//
          prompt      = STRING_TOKEN ( STR_LAN_STRING    ),
          help        = STRING_TOKEN ( STR_LAN_HELP      ),
//[-start-121008-IB10370023-modify]//
//[-start-120629-IB05330352-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
//          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
//#else
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
//[-start-121129-IB06150263-modify]//
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT | INTERACTIVE;
//[-end-121129-IB06150263-modify]//
//#endif
//[-end-120629-IB05330352-modify]//
//[-end-121008-IB10370023-modify]//
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Lan == 0;
        oneof
          varid       = SystemConfig.SlpLanLowDc,
          prompt      = STRING_TOKEN ( STR_LAN_LOW_DC_STRING    ),
          help        = STRING_TOKEN ( STR_LAN_LOW_DC_HELP      ),
//[-start-130812-IB05670190-modify]//
#if !FeaturePcdGet(PcdMe5MbSupported)
//[-end-130812-IB05670190-modify]//
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
#else
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
#endif
        endoneof;
      endif;
      endif;

//[-start-130911-IB08620310-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        //
        // PCIe SR-IOV Support
        //
        oneof varid     = SystemConfig.PCIeSRIOVSupport,
          prompt      = STRING_TOKEN(STR_PCIE_SRIOV_SUPPORT_PROMPT),
          help        = STRING_TOKEN(STR_PCIE_SRIOV_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.PCIeSRIOVSupport == 0
        OR
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof varid     = SystemConfig.PCIeAriSupport,
          prompt      = STRING_TOKEN(STR_PCIE_ARI_SUPPORT_PROMPT),
          help        = STRING_TOKEN(STR_PCIE_ARI_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = RESET_REQUIRED;
        endoneof;

//        oneof varid     = SystemConfig.PCIeSupportPageSize,
//          prompt      = STRING_TOKEN(STR_SUPPORT_PAGE_SIZE_PROMPT),
//          help        = STRING_TOKEN(STR_SUPPORT_PAGE_SIZE_HELP),
//          option text = STRING_TOKEN(STR_4K),   value = 0x0001, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
//          option text = STRING_TOKEN(STR_8K),   value = 0x0002, flags = RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_64K),  value = 0x0010, flags = RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_256K), value = 0x0040, flags = RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_1M),   value = 0x0100, flags = RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_4M),   value = 0x0400, flags = RESET_REQUIRED;
//        endoneof;
      endif;
//[-end-130510-IB08620310-add]//

    endform;

//[-start-120807-IB02382253-modify]//
    //
    //  Form 0x23: SATA Configuration
    //
//[-end-120807-IB02382253-modify]//
    form
      formid = 0x23, title = STRING_TOKEN(STR_SATA_CONFIG_STRING);

      subtitle
//[-start-120807-IB02382253-modify]//
        text = STRING_TOKEN(STR_SATA_CONFIG_STRING);
//[-end-120807-IB02382253-modify]//

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.IdeController,
//[-start-120807-IB02382253-modify]//
          prompt      = STRING_TOKEN(STR_SATA_CTRL_STRING),
          help        = STRING_TOKEN(STR_SATA_CTRL_HELP),
//[-end-120807-IB02382253-modify]//
          option text = STRING_TOKEN(STR_DISABLED_TEXT),    value = 0, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),     value = 1, flags = DEFAULT;
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        oneof
          varid       = SystemConfig.SataCnfigure,
          prompt      = STRING_TOKEN(STR_HDC_CONFIGURE_TYPE_STRING),
          help        = STRING_TOKEN(STR_HDC_CONFIGURE_TYPE_HELP),
//[-start-121105-IB06150255-modify]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if !FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
          option text = STRING_TOKEN(STR_HDC_TYPE_IDE_TEXT),               value = 0x00, flags = 0;
#endif
//[-end-121105-IB06150255-modify]//
          option text = STRING_TOKEN(STR_HDC_TYPE_AHCI_TEXT),              value = 0x01, flags = DEFAULT;
          option text = STRING_TOKEN(STR_HDC_TYPE_RAID_TEXT),              value = 0x02, flags = 0;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
          ideqval SystemConfig.SataCnfigure == 0;
        goto HDD_SOFTWARE_FEATURE_MASK_FORM_ID,
          prompt = STRING_TOKEN(STR_SOFTWARE_FEATURE_STRING),
          help = STRING_TOKEN(STR_SOFTWARE_FEATURE_HELP);
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1
         OR
         ideqval SystemConfig.IdeController == 0;
      suppressif
          TRUE;
        oneof
          varid       = SystemConfig.AhciOptionRomSupport,
          questionid = KEY_AHCI_OPROM_CONFIG,
          prompt      = STRING_TOKEN(STR_AHCI_OPTION_ROM_SUPPORT_STRING),
          help        = STRING_TOKEN(STR_AHCI_OPTION_ROM_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT),             value = 0x00, flags = INTERACTIVE;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),              value = 0x01, flags = DEFAULT | INTERACTIVE;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
        NOT ideqvallist SystemConfig.SataCnfigure == 1 2;  //Be selected only in AHCI mode and RAID mode
        oneof
          varid       = SystemConfig.AggressLinkPower,
          prompt      = STRING_TOKEN(STR_AGGRESS_LINK_POWER_STRING),
          help        = STRING_TOKEN(STR_AGGRESS_LINK_POWER_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT),             value = 0x00, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),              value = 0x01, flags = DEFAULT;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
          ideqvallist SystemConfig.SataCnfigure == 0 1;
        oneof
          varid       = SystemConfig.RaidAlternateId,
          prompt      = STRING_TOKEN(STR_ALTERNATE_ID_STRING),
          help        = STRING_TOKEN(STR_ALTERNATE_ID_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT),             value = 0x00, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),              value = 0x01, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP0HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P0_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P0_HOT_PLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP0SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP0DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP0DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP0DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP0EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP0DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP0EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP0DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP0DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
        NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP1HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P1_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P1_HOT_PLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP1SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;


      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP1DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP1DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP1DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP1EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP1DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP1EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP1DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP1DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP2HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P2_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P2_HOT_PLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP2SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP2DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP2DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP1DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP2EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP1DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP1EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP2DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP2DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP3HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P3_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P3_HOT_PLUG_HELP),
//[-start-130411-IB05160435-modify]//
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
//[-end-130411-IB05160435-modify]//
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP3SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP3DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP3DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP3DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP3EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP3DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP3EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP3DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP3DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
        NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP4HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P4_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P4_HOT_PLUG_HELP),
//[-start-130411-IB05160435-modify]//
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
//[-end-130411-IB05160435-modify]//
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP4SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP4DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP4DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP4DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP4EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP4DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP4EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP4DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP4DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
      suppressif
        NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP5HotPlug,
          prompt      = STRING_TOKEN(STR_SATA_P5_HOT_PLUG_STRING),
          help        = STRING_TOKEN(STR_SATA_P5_HOT_PLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.HdcP5SpinUp,
          prompt      = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_STRING),
          help        = STRING_TOKEN(STR_SATA_SPIN_UP_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;


      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP5DeviceType,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_TYPE_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
          option text = STRING_TOKEN(STR_HARD_DISK_DRIVE_TEXT),    value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_SOLID_STATE_DRIVE_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121219-IB05330396-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        OR
        ideqval SystemConfig.IdeController == 0;
        suppressif
          NOT ideqvallist SystemConfig.SataCnfigure == 1 2;
        oneof
          varid       = SystemConfig.SataP5DeviceSleep,
          prompt      = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_STRING),
          help        = STRING_TOKEN(STR_SATA_DEVICE_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      suppressif
          ideqvallist SystemConfig.SataP5DeviceSleep == 0;
        oneof
          varid       = SystemConfig.SataP5EnableDito,
          prompt      = STRING_TOKEN(STR_SATA_DITO_CONFIG_STRING),
          help        = STRING_TOKEN(STR_SATA_DITO_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqvallist SystemConfig.SataP5DeviceSleep == 0
        OR
        ideqval SystemConfig.SataP5EnableDito == 0;
      numeric
        varid       = SystemConfig.SataP5DitoVal,
        prompt      = STRING_TOKEN(STR_SATA_DITO_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DITO_VALUE_HELP),
        minimum     = 0,
        maximum     = 1023,
        step        = 1,
        default     = 625,
      endnumeric;
      numeric
        varid       = SystemConfig.SataP5DmVal,
        prompt      = STRING_TOKEN(STR_SATA_DM_VALUE_STRING),
        help        = STRING_TOKEN(STR_SATA_DM_VALUE_HELP),
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 15,
      endnumeric;
      endif;
#endif
//[-end-121219-IB05330396-add]//
      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);
     //
     // IdeDvicex = 2 indicates this platform doesn't support this port
     //
     grayoutif
       ideqval SystemConfig.IdeDevice0 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice0 == 2;
         goto SERIAL_ATA_PORT0_FORM_ID,
           prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT0_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT0_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice1 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice1 == 2;
         goto SERIAL_ATA_PORT1_FORM_ID,
           prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT1_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT1_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice2 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice2 == 2;
         goto SERIAL_ATA_PORT2_FORM_ID,
           prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT2_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT2_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice3 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice3 == 2;
         goto SERIAL_ATA_PORT3_FORM_ID,
           prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT3_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT3_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice4 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice4 == 2;
       goto SERIAL_ATA_PORT4_FORM_ID,
         prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT4_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT4_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice5 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice5 == 2;
       goto SERIAL_ATA_PORT5_FORM_ID,
         prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT5_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT5_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice6 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice6 == 2;
       goto SERIAL_ATA_PORT6_FORM_ID,
         prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT6_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT6_STRING_HELP);
     endif;
     endif;

     grayoutif
       ideqval SystemConfig.IdeDevice7 == 0
       OR
       ideqval SystemConfig.IdeController == 0;
     suppressif
       ideqval SystemConfig.IdeDevice7 == 2;
       goto SERIAL_ATA_PORT7_FORM_ID,
        prompt = STRING_TOKEN(STR_SERIAL_ATA_PORT7_STRING),
        help = STRING_TOKEN(STR_SERIAL_ATA_PORT7_STRING_HELP);
     endif;
     endif;

     text
      help   = STRING_TOKEN(STR_BLANK_STRING),
      text   = STRING_TOKEN(STR_BLANK_STRING);

      label IDE_UPDATE_LABEL;

//
// add these code is just for declaration that we can use these StringToken in C code.
//
      suppressif ideqvallist SystemConfig.SataCnfigure == 0 1 2 3 4;
        text
          help   = STRING_TOKEN(STR_SERIAL_ATA_PORT0_MODEL_NAME),
          text   = STRING_TOKEN(STR_SERIAL_ATA_PORT1_MODEL_NAME);
        text
          help   = STRING_TOKEN(STR_SERIAL_ATA_PORT2_MODEL_NAME),
          text   = STRING_TOKEN(STR_SERIAL_ATA_PORT3_MODEL_NAME);
        text
          help   = STRING_TOKEN(STR_SERIAL_ATA_PORT4_MODEL_NAME),
          text   = STRING_TOKEN(STR_SERIAL_ATA_PORT5_MODEL_NAME);
        text
          help   = STRING_TOKEN(STR_SERIAL_ATA_PORT6_MODEL_NAME),
          text   = STRING_TOKEN(STR_SERIAL_ATA_PORT7_MODEL_NAME);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_1),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_2);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_3),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_4);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_5),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_6);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_7),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT_8);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_1),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_2);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_3),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_4);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_5),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_6);
        text
          help   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_7),
          text   = STRING_TOKEN(STR_HDD_PASSWORD_CBM_PROMPT_8);
      endif;

    endform;
        //
        //  Sub Form HDD_SOFTWARE_FEATURE_MASK_FORM_ID
        //
        form
          formid = HDD_SOFTWARE_FEATURE_MASK_FORM_ID, title = STRING_TOKEN(STR_SOFTWARE_FEATURE_STRING);
          subtitle
            text = STRING_TOKEN(STR_SOFTWARE_FEATURE_STRING);
          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
                oneof
                  varid       = SystemConfig.HddUnlock,
                  prompt      = STRING_TOKEN(STR_HDD_UNLOCK_STRING),
                  help        = STRING_TOKEN(STR_HDD_UNLOCK_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
                oneof
                  varid       = SystemConfig.LedLocate,
                  prompt      = STRING_TOKEN(STR_LED_LOCATE_STRING),
                  help        = STRING_TOKEN(STR_LED_LOCATE_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.Raid0,
                  prompt      = STRING_TOKEN(STR_RAID0_STRING),
                  help        = STRING_TOKEN(STR_RAID0_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.Raid1,
                  prompt      = STRING_TOKEN(STR_RAID1_STRING),
                  help        = STRING_TOKEN(STR_RAID1_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.Raid10,
                  prompt      = STRING_TOKEN(STR_RAID10_STRING),
                  help        = STRING_TOKEN(STR_RAID10_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.Raid5,
                  prompt      = STRING_TOKEN(STR_RAID5_STRING),
                  help        = STRING_TOKEN(STR_RAID5_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.Irrt,
                  prompt      = STRING_TOKEN(STR_IRRT_STRING),
                  help        = STRING_TOKEN(STR_IRRT_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.OromUiBanner,
                  prompt      = STRING_TOKEN(STR_OROM_UI_STRING),
                  help        = STRING_TOKEN(STR_OROM_UI_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;

          grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqval SystemConfig.SataCnfigure == 1;
                oneof
                  varid       = SystemConfig.IrrtOnly,
                  prompt      = STRING_TOKEN(STR_IRRT_ONLY_STRING),
                  help        = STRING_TOKEN(STR_IRRT_ONLY_HELP),
                  option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
                  option text = STRING_TOKEN(STR_ENABLE_TEXT),   value = 1, flags = DEFAULT;
                endoneof;
            endif;
          endif;
        endform;

        //
        //  Sub Form SERIAL_ATA_PORT0_FORM_ID: SATA PORT0
        //
        form
          formid = SERIAL_ATA_PORT0_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT0_STRING);

          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT0_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT0_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C1MsCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C1MsCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = FixedPcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C1MsCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C1MsCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C1MsCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C1MsCBMUnlockHddPasswordFlag == 0;

            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C1MsSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C1MsUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C1MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-add]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-add]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C1MsMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C1MsSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C1MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_0,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT1_FORM_ID: SATA PORT1
        //
        form
          formid = SERIAL_ATA_PORT1_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT1_STRING);

          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT1_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT1_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C1SlCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C1SlCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C1SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqval SystemConfig.UserAccessLevel == 2
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C1SlCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C1SlCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C1SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C1SlSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C1SlUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C1SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C1SlMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C1SlSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C1SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_1,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = FixedPcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT2_FORM_ID: SATA PORT2
        //
        form
          formid = SERIAL_ATA_PORT2_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT2_STRING);
          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT2_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT2_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C2MsCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C2MsCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C2MsCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqval SystemConfig.UserAccessLevel == 2
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C2MsCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C2MsCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C2MsCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C2MsSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C2MsUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C2MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C2MsMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C2MsSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C2MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_2,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT3_FORM_ID: SATA PORT3
        //
        form
          formid = SERIAL_ATA_PORT3_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT3_STRING);

          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT3_STRING);

           subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT3_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C2SlCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C2SlCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C2SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqval SystemConfig.UserAccessLevel == 2
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C2SlCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C2SlCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C2SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C2SlSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C2SlUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C2SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C2SlMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C2SlSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C2SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_3,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;


        //
        //  Sub Form SERIAL_ATA_PORT4_FORM_ID: SATA PORT4
        //
        form
          formid = SERIAL_ATA_PORT4_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT4_STRING);

          subtitle
           text = STRING_TOKEN(STR_SERIAL_ATA_PORT4_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT4_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);


            //
            //Set CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C3MsCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C3MsCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C3MsCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C3MsCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C3MsCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C3MsCBMUnlockHddPasswordFlag == 0;

            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C3MsSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C3MsUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C3MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C3MsMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C3MsSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C3MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_4,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT5_FORM_ID: SATA PORT5
        //
        form
          formid = SERIAL_ATA_PORT5_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT5_STRING);

          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT5_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT5_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C3SlCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C3SlCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C3SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqval SystemConfig.UserAccessLevel == 2
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C3SlCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C3SlCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C3SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C3SlSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C3SlUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C3SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C3SlMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C3SlSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C3SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_5,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT6_FORM_ID: SATA PORT6
        //
        form
          formid = SERIAL_ATA_PORT6_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT6_STRING);

          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT6_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT6_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);

            //
            //Set CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C4MsCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C4MsCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C4MsCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C4MsCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C4MsCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C4MsCBMUnlockHddPasswordFlag == 0;

            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C4MsSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C4MsUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C4MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C4MsMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C4MsSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C4MsUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_6,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

        //
        //  Sub Form SERIAL_ATA_PORT7_FORM_ID: SATA PORT1
        //
        form
          formid = SERIAL_ATA_PORT7_FORM_ID, title = STRING_TOKEN(STR_SERIAL_ATA_PORT7_STRING);
          subtitle
            text = STRING_TOKEN(STR_SERIAL_ATA_PORT7_STRING);

          subtitle
            text = STRING_TOKEN(STR_BLANK_STRING);

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_IDE_SECURITY_MODE),
              text   = STRING_TOKEN(STR_SERIAL_ATA_PORT7_SECURITY_MODE),
              flags  = 0,
              key    = 0;

            text
              help   = STRING_TOKEN(STR_BLANK_STRING),
              text   = STRING_TOKEN(STR_BLANK_STRING);


            //
            //Set CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C4SlCBMSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C4SlCBMUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_CBM_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable CBM HDD password
            //
            grayoutif
            ideqval SystemConfig.UserAccessLevel == 2
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.C4SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_CBM_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set CBM Master HDD Password
            //
            grayoutif
              ideqval SystemConfig.UserAccessLevel == 2
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C4SlCBMMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 0 3 4
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C4SlCBMSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C4SlCBMUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_CBM_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            //Set HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C4SlSetHddPasswordFlag == 0
              OR
              ideqval SystemConfig.C4SlUnlockHddPasswordFlag == 1;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_SET_HDD_PSW_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Disable HDD password
            //
            grayoutif
            ideqvallist SystemConfig.UserAccessLevel == 2 3
            AND
            ideqval SystemConfig.SetUserPass == 1;
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.C4SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.HddPassword,
              varid    = PasswordNameValueVar[0],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_HDD_CHECK_PASSWORD_STRING),
              help     = STRING_TOKEN(STR_LOCK_ONE_HDD_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_CHECK_HDD_PSW_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

            //
            // Set Master HDD Password
            //
            grayoutif
              ideqvallist SystemConfig.UserAccessLevel == 2 3
              AND
//[-start-131002-IB08520088-modify]//
              ideqval SystemConfig.SetUserPass == 1
              OR
              ideqval PasswordConfig.C4SlMasterHddPasswordFlag == 0;
//[-end-131002-IB08520088-modify]//
            suppressif
              ideqvallist SystemConfig.SataCnfigure == 1 2
              OR
              ideqval SystemConfig.UseMasterPassword == 0
              OR
              ideqval SystemConfig.C4SlSetHddPasswordFlag == 0
              AND
              ideqval SystemConfig.C4SlUnlockHddPasswordFlag == 0;
            password
//[-start-131030-IB08520089-modify]//
//              varid    = SystemConfig.SetMasterHddPassword,
              varid    = PasswordNameValueVar[1],
//[-end-131030-IB08520089-modify]//
              prompt   = STRING_TOKEN(STR_MASTER_HDD_PASSWORD_PROMPT),
              help     = STRING_TOKEN(STR_ONE_HDD_MASTER_SECURITY_TITLE_HELP),
              flags    = INTERACTIVE,
              key      = KEY_HDD_MASTER_PSW_KEY_NUM_7,
//[-start-131031-IB08520089-modify]//
//              minsize  = MIN_PASSWORD_NUMBER,
////[-start-120203-IB08520039-modify]//
////              maxsize  = MAX_PASSWORD_NUMBER,
//              maxsize  = HDD_PASSWORD_MAX_LENGTH,
////[-end-120203-IB08520039-modify]//
              minsize  = PcdGet16 (PcdHddPasswordMinLength),
              maxsize  = PcdGet16 (PcdHddPasswordMaxLength),
//[-end-131031-IB08520089-modify]//
              encoding = 2,
            endpassword;
            endif;
            endif;

        endform;

    //
    //  Form 0x24: Thermal Configuration
    //
    form
      formid = 0x24, title = STRING_TOKEN(STR_THERMAL_CONFIG_STRING);

    subtitle
      text = STRING_TOKEN(STR_THERMAL_CONFIG_STRING);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    goto 0x240,
         prompt = STRING_TOKEN(STR_PLATFORM_THERMAL_CONFIG_STRING),
         help = STRING_TOKEN(STR_PLATFORM_THERMAL_CONFIG_HELP);

    goto 0x241,
         prompt = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_STRING),
         help = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_HELP);
//[-start-130403-IB05330413-add]//
    goto 0x242,
         prompt = STRING_TOKEN(STR_MEMORY_POWER_THERMAL_STRING),
         help = STRING_TOKEN(STR_MEMORY_POWER_THERMAL_HELP);
//[-end-130403-IB05330413-add]//
//[-start-121122-IB05330388-add]//
//[-start-130403-IB05330413-remove]//
//    goto 0x242,
//         prompt = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_STRING),
//         help = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_HELP);
//    goto 0x243,
//         prompt = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_STRING),
//         help = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_HELP);
//    goto 0x244,
//         prompt = STRING_TOKEN(STR_MEMORY_RAPL_STRING),
//         help = STRING_TOKEN(STR_MEMORY_RAPL_CONFIG_HELP);
//[-end-130403-IB05330413-remove]//
//[-end-121122-IB05330388-add]//
//[-start-130222-IB10920016-add]//
#ifdef HARDWARE_MONITOR_SUPPORT
    goto HARDWARE_MONITOR_FORM_ID,
         prompt = STRING_TOKEN(STR_HARDWARE_HEALTH_MONITOR_STRING),
         help = STRING_TOKEN(STR_HARDWARE_HEALTH_MONITOR_HELP);
#endif
//[-end-130222-IB10920016-add]//

  endform;
//
// Platform Thermal Config
//
  form formid = 0x240,
      title   = STRING_TOKEN(STR_PLATFORM_THERMAL_CONFIG_STRING);
      subtitle
        text = STRING_TOKEN(STR_PLATFORM_THERMAL_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
          ideqval SystemConfig.UserAccessLevel == 2
          AND
          ideqval SystemConfig.SetUserPass == 1;

//[-start-120426-IB07360191-add]//
          oneof
            varid       = SystemConfig.AutoThermalReporting,
            prompt      = STRING_TOKEN ( STR_AUTO_THERMAL_REPORT ),
            help        = STRING_TOKEN ( STR_AUTO_THERMAL_REPORT_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ),  value = 0,  flags = 0;
            option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1,  flags = DEFAULT;
            endoneof;

      suppressif
          ideqval SystemConfig.AutoThermalReporting == 1;
//[-end-120426-IB07360191-add]//

//[-start-120426-IB07360191-modify]//
          oneof
            varid       = SystemConfig.CriticalThermalTripPoint,
            prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_STRING ),
            help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = DEFAULT;
            option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
          endoneof;
      endif;

          numeric
            varid       = SystemConfig.Ac0FanSpeed,
            prompt      = STRING_TOKEN(STR_ACTIVE_THERMAL_HIGH_FAN_TEMP_STRING),
            help        = STRING_TOKEN(STR_ACTIVE_THERMAL_HIGH_FAN_TEMP_HELP),
            minimum     = 0,
            maximum     = 100,
            step        = 1,
            default     = 100,
          endnumeric;
      suppressif
          ideqval SystemConfig.AutoThermalReporting == 1;

          oneof
            varid       = SystemConfig.ActiveTripPointHighFanSpeed,
            prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_HIGH_FAN_STRING ),
            help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_HIGH_FAN_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ),  value = 15, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ),  value = 23, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ),  value = 31, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ),  value = 39, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ),  value = 47, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ),  value = 55, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ),  value = 63, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ),  value = 71, flags = DEFAULT;
            option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ),  value = 79, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ),  value = 87, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ),  value = 95, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ), value = 103,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ), value = 111,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ), value = 119,flags = 0;
          endoneof;
      endif;

          numeric
            varid       = SystemConfig.Ac1FanSpeed,
            prompt      = STRING_TOKEN(STR_ACTIVE_THERMAL_LOW_FAN_TEMP_STRING),
            help        = STRING_TOKEN(STR_ACTIVE_THERMAL_LOW_FAN_TEMP_HELP),
            minimum     = 0,
            maximum     = 100,
            step        = 1,
            default     = 75,
          endnumeric;
          oneof
            varid       = SystemConfig.ActiveTripPointLowFanSpeed,
            prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_LOW_FAN_STRING ),
            help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_LOW_FAN_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ),  value = 15, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ),  value = 23, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ),  value = 31, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ),  value = 39, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ),  value = 47, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ),  value = 55, flags = DEFAULT;
            option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ),  value = 63, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ),  value = 71, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ),  value = 79, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ),  value = 87, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ),  value = 95, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ), value = 103,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ), value = 111,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ), value = 119,flags = 0;
          endoneof;
      suppressif
          ideqval SystemConfig.AutoThermalReporting == 1;
          oneof
            varid       = SystemConfig.PassiveThermalTripPoint,
            prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_STRING ),
            help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ),  value = 15, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ),  value = 23, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ),  value = 31, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ),  value = 39, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ),  value = 47, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ),  value = 55, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ),  value = 63, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ),  value = 71, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ),  value = 79, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ),  value = 87, flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ),  value = 95, flags = DEFAULT;
            option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ), value = 103,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ), value = 111,flags = 0;
            option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ), value = 119,flags = 0;
          endoneof;
      endif;

      numeric
        varid       = SystemConfig.PassiveTc1Value,
        prompt      = STRING_TOKEN(STR_PASSIVE_TC1_VALUE_STRING),
        help        = STRING_TOKEN(STR_PASSIVE_TC1_VALUE_HELP),
        minimum     = 1,
        maximum     = 16,
        step        = 1,
        default     = 1,
      endnumeric;
//[-end-120426-IB07360191-modify]//

      numeric
        varid       = SystemConfig.PassiveTc2Value,
        prompt      = STRING_TOKEN(STR_PASSIVE_TC2_VALUE_STRING),
        help        = STRING_TOKEN(STR_PASSIVE_TC2_VALUE_HELP),
        minimum     = 1,
        maximum     = 16,
        step        = 1,
        default     = 5,
      endnumeric;

      numeric
        varid       = SystemConfig.PassiveTspValue,
        prompt      = STRING_TOKEN(STR_PASSIVE_TSP_VALUE_STRING),
        help        = STRING_TOKEN(STR_PASSIVE_TSP_VALUE_HELP),
        minimum     = 2,
        maximum     = 32,
        step        = 1,
        default     = 10,
      endnumeric;
      endif;

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      oneof
        varid       = SystemConfig.TrTSOnDimm,
        prompt      = STRING_TOKEN ( STR_ME_SMBUS_TS_ON_DIMM_STRING ),
        help        = STRING_TOKEN ( STR_ME_SMBUS_TS_ON_DIMM_HELP ),
        option text = STRING_TOKEN ( STR_NO_TS_ON_DIMM_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_TS_ON_DIMM_SLOT0_TEXT ), value = 1, flags = 0;
        option text = STRING_TOKEN ( STR_TS_ON_DIMM_SLOT1_TEXT ), value = 2, flags = 0;
        option text = STRING_TOKEN ( STR_TS_ON_DIMM_SLOT0_SLOT1_TEXT ), value = 3, flags = 0;
      endoneof;

//
//Thermal Device D31F6
//
     subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
//[-start-120403-IB05300308-modify]//
        ideqval SystemConfig.EnableDptf == 1
//[-end-120403-IB05300308-modify]//
        OR
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.ThermalDevice,
          prompt      = STRING_TOKEN ( STR_THERMAL_DEVICE_STRING ),
          help        = STRING_TOKEN ( STR_THERMAL_DEVICE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
        endoneof;
      endif;
  endform;
//
// Cpu Thermal Config
//
  form formid = 0x241,
     title   = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_STRING);

     subtitle text = STRING_TOKEN(STR_CPU_THERMAL_CONFIG_STRING);

     subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.DtsEnable,
          prompt      = STRING_TOKEN ( STR_DTSUPPORT_STRING ),
          help        = STRING_TOKEN ( STR_DTSUPPORT_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
          option text = STRING_TOKEN ( STR_DST_OUT_OF_SPEC_STRING ), value = 2, flags = 0;
        endoneof;
      endif;

      grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableProcHot,
        prompt      = STRING_TOKEN(STR_PROCHOT_STRING),
        help        = STRING_TOKEN(STR_PROCHOT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),       value = 1, flags = DEFAULT;
      endoneof;
      endif;

      grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.TStatesEnable,
        prompt      = STRING_TOKEN(STR_TSTATES_STRING),
        help        = STRING_TOKEN(STR_TSTATES_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),       value = 1, flags = 0;
      endoneof;
      endif;
  endform;
//[-start-130403-IB05330413-add]//
  form formid = 0x242,
     title   = STRING_TOKEN(STR_MEMORY_POWER_THERMAL_STRING);
     subtitle text = STRING_TOKEN(STR_MEMORY_POWER_THERMAL_STRING);
     subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
    goto 0x2421,
         prompt = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_STRING),
         help = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_HELP);

      grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnablePwrDn,
        prompt      = STRING_TOKEN(STR_DDR_POWER_DOWN_AND_IDLE_STRING),
        help        = STRING_TOKEN(STR_DDR_POWER_DOWN_AND_IDLE_HELP),
//[-start-130806-IB10540059-modify]//
        option text = STRING_TOKEN(STR_BIOS_STRING),        value = 1, flags = DEFAULT;
        option text = STRING_TOKEN(STR_PCODE_STRING),       value = 0, flags = 0;
//[-end-130806-IB10540059-modify]//
      endoneof;
//[-start-130513-IB06150294-modify]//
#ifdef ULT_SUPPORT
//[-end-130513-IB06150294-modify]//
      oneof
        varid       = SystemConfig.EnablePwrDnLpddr,
        prompt      = STRING_TOKEN(STR_LPDDR_POWER_DOWN_AND_IDLE_STRING),
        help        = STRING_TOKEN(STR_LPDDR_POWER_DOWN_AND_IDLE_HELP),
//[-start-130806-IB10540059-modify]//
        option text = STRING_TOKEN(STR_BIOS_STRING),        value = 1, flags = 0;
        option text = STRING_TOKEN(STR_PCODE_STRING),       value = 0, flags = DEFAULT;
//[-end-130806-IB10540059-modify]//
      endoneof;
#endif
      oneof
        varid       = SystemConfig.Refresh2X,
        prompt      = STRING_TOKEN(STR_REFRESH_2X_MODE_STRING),
        help        = STRING_TOKEN(STR_REFRESH_2X_MODE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),         value = 1, flags = 0;
      endoneof;

      oneof
        varid       = SystemConfig.LpddrThermalSensor,
        prompt      = STRING_TOKEN(STR_LPDDR_THERMAL_SENSOR_STRING),
        help        = STRING_TOKEN(STR_LPDDR_THERMAL_SENSOR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),         value = 1, flags = DEFAULT;
      endoneof;

      oneof
        varid       = SystemConfig.SrefCfgEna,
        prompt      = STRING_TOKEN(STR_SELF_REFRESH_ENABLE_STRING),
        help        = STRING_TOKEN(STR_SELF_REFRESH_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),         value = 1, flags = DEFAULT;
      endoneof;

      numeric
        varid       = SystemConfig.SrefCfgIdleTmr,
        prompt      = STRING_TOKEN(STR_SELF_REFRESH_IDLE_TIMER_STRING),
        help        = STRING_TOKEN(STR_SELF_REFRESH_IDLE_TIMER_HELP),
        minimum     = 0,
        maximum     = 512,
        step        = 1,
        default     = 512,
      endnumeric;

      oneof
        varid       = SystemConfig.ThrtCkeMinDefeat,
        prompt      = STRING_TOKEN(STR_THROTTLER_CKE_MIN_DEFEATURE_STRING),
        help        = STRING_TOKEN(STR_ENABLE_DISALBE_STRING),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),         value = 1, flags = 0;
      endoneof;
      numeric
        varid       = SystemConfig.ThrtCkeMinTmr,
        prompt      = STRING_TOKEN(STR_THROTTLER_CKE_MIN_TIMER_STRING),
        help        = STRING_TOKEN(STR_THROTTLER_CKE_MIN_TIMER_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 48,
      endnumeric;

//[-start-130513-IB06150294-modify]//
#ifdef ULT_SUPPORT
//[-end-130513-IB06150294-modify]//
      oneof
        varid       = SystemConfig.ThrtCkeMinDefeatLpddr,
        prompt      = STRING_TOKEN(STR_LPDDR_THROTTLER_CKE_MIN_DEFEATURE_STRING),
        help        = STRING_TOKEN(STR_ENABLE_DISALBE_STRING),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),         value = 1, flags = DEFAULT;
      endoneof;
      numeric
        varid       = SystemConfig.ThrtCkeMinTmrLpddr,
        prompt      = STRING_TOKEN(STR_LPDDR_THROTTLER_CKE_MIN_TIMER_STRING),
        help        = STRING_TOKEN(STR_LPDDR_THROTTLER_CKE_MIN_TIMER_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 64,
      endnumeric;
#endif
      endif;
    goto 0x2422,
         prompt = STRING_TOKEN(STR_DRAIN_POWER_METER_STRING),
         help = STRING_TOKEN(STR_DRAIN_POWER_METER_HELP);
    goto 0x2423,
         prompt = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_STRING),
         help = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_HELP);
    goto 0x2424,
         prompt = STRING_TOKEN(STR_MEMORY_RAPL_STRING),
         help = STRING_TOKEN(STR_MEMORY_RAPL_CONFIG_HELP);
  endform;
//[-end-130403-IB05330413-add]//
//[-start-121122-IB05330388-add]//
//[-start-130403-IB05330413-modify]//
  form formid = 0x2421,
//[-end-130403-IB05330413-modify]//
     title   = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_STRING);
     subtitle text = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_STRING);
     subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.MemThermalManage,
          prompt      = STRING_TOKEN ( STR_MEMORY_THERMAL_MANAGE_STRING ),
          help        = STRING_TOKEN ( STR_MEMORY_THERMAL_MANAGE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.MemThermalManage == 0;
        oneof
          varid       = SystemConfig.PeciInjectedTemp,
          prompt      = STRING_TOKEN ( STR_PECI_INJECT_TEMP_STRING ),
          help        = STRING_TOKEN ( STR_PECI_INJECT_TEMP_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.MemThermalManage == 0;
        oneof
          varid       = SystemConfig.ExttsViaTsOnBoard,
          prompt      = STRING_TOKEN ( STR_EXTTS_VIA_BOARD_STRING ),
          help        = STRING_TOKEN ( STR_EXTTS_VIA_BOARD_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.MemThermalManage == 0;
        oneof
          varid       = SystemConfig.ExttsViaTsOnDimm,
          prompt      = STRING_TOKEN ( STR_EXTTS_VIA_DIMM_STRING ),
          help        = STRING_TOKEN ( STR_EXTTS_VIA_DIMM_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.MemThermalManage == 0;
        oneof
          varid       = SystemConfig.VirtualTempSensor,
          prompt      = STRING_TOKEN ( STR_VIRTUAL_TEMP_SENSOR_STRING ),
          help        = STRING_TOKEN ( STR_VIRTUAL_TEMP_SENSOR_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;
      endif;

  endform;
//[-start-130403-IB05330413-add]//
  form formid = 0x2422,
     title   = STRING_TOKEN(STR_DRAIN_POWER_METER_STRING);
     subtitle text = STRING_TOKEN(STR_DRAIN_POWER_METER_STRING);
     subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof
          varid       = SystemConfig.UserPowerWeightsEn,
          prompt      = STRING_TOKEN ( STR_USER_POWER_WEIGHTS_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USER_POWER_WEIGHTS_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      grayoutif
        ideqval SystemConfig.UserPowerWeightsEn == 0;
        numeric
          varid       = SystemConfig.EnergyScaleFact,
          prompt      = STRING_TOKEN(STR_ENERGY_SCALE_FACTOR_STRING),
          help        = STRING_TOKEN(STR_ENERGY_SCALE_FACTOR_HELP),
          minimum     = 0,
          maximum     = 7,
          step        = 1,
          default     = 4,
        endnumeric;
        subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
        subtitle  text = STRING_TOKEN(STR_CH0_DIMM0_STRING);
        numeric
          varid       = SystemConfig.IdleEnergyCh0Dimm0,
          prompt      = STRING_TOKEN(STR_IDLE_ENERGY_CH0_DIMM0_STRING),
          help        = STRING_TOKEN(STR_IDLE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 10,
        endnumeric;

        numeric
          varid       = SystemConfig.PdEnergyCh0Dimm0,
          prompt      = STRING_TOKEN(STR_POWER_DOWN_ENERGY_CH0_DIMM0_STRING),
          help        = STRING_TOKEN(STR_POWER_DOWN_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 6,
        endnumeric;
        numeric
          varid       = SystemConfig.ActEnergyCh0Dimm0,
          prompt      = STRING_TOKEN(STR_ACTIVATE_ENERGY_CH0_DIMM0_STRING),
          help        = STRING_TOKEN(STR_ACTIVATE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 172,
        endnumeric;

        numeric
          varid       = SystemConfig.RdEnergyCh0Dimm0,
          prompt      = STRING_TOKEN(STR_READ_ENERGY_CH0_DIMM0_STRING),
          help        = STRING_TOKEN(STR_READ_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 212,
        endnumeric;

        numeric
          varid       = SystemConfig.WrEnergyCh0Dimm0,
          prompt      = STRING_TOKEN(STR_WRITE_ENERGY_CH0_DIMM0_STRING),
          help        = STRING_TOKEN(STR_WRITE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 221,
        endnumeric;
        subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
        subtitle  text = STRING_TOKEN(STR_CH0_DIMM1_STRING);
        numeric
          varid       = SystemConfig.IdleEnergyCh0Dimm1,
          prompt      = STRING_TOKEN(STR_IDLE_ENERGY_CH0_DIMM1_STRING),
          help        = STRING_TOKEN(STR_IDLE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 10,
        endnumeric;

        numeric
          varid       = SystemConfig.PdEnergyCh0Dimm1,
          prompt      = STRING_TOKEN(STR_POWER_DOWN_ENERGY_CH0_DIMM1_STRING),
          help        = STRING_TOKEN(STR_POWER_DOWN_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 6,
        endnumeric;
        numeric
          varid       = SystemConfig.ActEnergyCh0Dimm1,
          prompt      = STRING_TOKEN(STR_ACTIVATE_ENERGY_CH0_DIMM1_STRING),
          help        = STRING_TOKEN(STR_ACTIVATE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 172,
        endnumeric;

        numeric
          varid       = SystemConfig.RdEnergyCh0Dimm1,
          prompt      = STRING_TOKEN(STR_READ_ENERGY_CH0_DIMM1_STRING),
          help        = STRING_TOKEN(STR_READ_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 212,
        endnumeric;

        numeric
          varid       = SystemConfig.WrEnergyCh0Dimm1,
          prompt      = STRING_TOKEN(STR_WRITE_ENERGY_CH0_DIMM1_STRING),
          help        = STRING_TOKEN(STR_WRITE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 221,
        endnumeric;
        subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
        subtitle  text = STRING_TOKEN(STR_CH1_DIMM0_STRING);
        numeric
          varid       = SystemConfig.IdleEnergyCh1Dimm0,
          prompt      = STRING_TOKEN(STR_IDLE_ENERGY_CH1_DIMM0_STRING),
          help        = STRING_TOKEN(STR_IDLE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 10,
        endnumeric;

        numeric
          varid       = SystemConfig.PdEnergyCh1Dimm0,
          prompt      = STRING_TOKEN(STR_POWER_DOWN_ENERGY_CH1_DIMM0_STRING),
          help        = STRING_TOKEN(STR_POWER_DOWN_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 6,
        endnumeric;
        numeric
          varid       = SystemConfig.ActEnergyCh1Dimm0,
          prompt      = STRING_TOKEN(STR_ACTIVATE_ENERGY_CH1_DIMM0_STRING),
          help        = STRING_TOKEN(STR_ACTIVATE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 172,
        endnumeric;

        numeric
          varid       = SystemConfig.RdEnergyCh1Dimm0,
          prompt      = STRING_TOKEN(STR_READ_ENERGY_CH1_DIMM0_STRING),
          help        = STRING_TOKEN(STR_READ_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 212,
        endnumeric;

        numeric
          varid       = SystemConfig.WrEnergyCh1Dimm0,
          prompt      = STRING_TOKEN(STR_WRITE_ENERGY_CH1_DIMM0_STRING),
          help        = STRING_TOKEN(STR_WRITE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 221,
        endnumeric;
        subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
        subtitle  text = STRING_TOKEN(STR_CH1_DIMM1_STRING);
        numeric
          varid       = SystemConfig.IdleEnergyCh1Dimm1,
          prompt      = STRING_TOKEN(STR_IDLE_ENERGY_CH1_DIMM1_STRING),
          help        = STRING_TOKEN(STR_IDLE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 10,
        endnumeric;

        numeric
          varid       = SystemConfig.PdEnergyCh1Dimm1,
          prompt      = STRING_TOKEN(STR_POWER_DOWN_ENERGY_CH1_DIMM1_STRING),
          help        = STRING_TOKEN(STR_POWER_DOWN_ENERGY_HELP),
          minimum     = 0,
          maximum     = 63,
          step        = 1,
          default     = 6,
        endnumeric;
        numeric
          varid       = SystemConfig.ActEnergyCh1Dimm1,
          prompt      = STRING_TOKEN(STR_ACTIVATE_ENERGY_CH1_DIMM1_STRING),
          help        = STRING_TOKEN(STR_ACTIVATE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 172,
        endnumeric;

        numeric
          varid       = SystemConfig.RdEnergyCh1Dimm1,
          prompt      = STRING_TOKEN(STR_READ_ENERGY_CH1_DIMM1_STRING),
          help        = STRING_TOKEN(STR_READ_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 212,
        endnumeric;

        numeric
          varid       = SystemConfig.WrEnergyCh1Dimm1,
          prompt      = STRING_TOKEN(STR_WRITE_ENERGY_CH1_DIMM1_STRING),
          help        = STRING_TOKEN(STR_WRITE_ENERGY_HELP),
          minimum     = 0,
          maximum     = 255,
          step        = 1,
          default     = 221,
        endnumeric;

      endif;
      endif;
  endform;
//[-end-130403-IB05330413-add]//

//[-start-130403-IB05330413-modify]//
  form formid = 0x2423,
//[-end-130403-IB05330413-modify]//
     title   = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.LockThermalManageRegs,
          prompt      = STRING_TOKEN ( STR_LOCK_THERMAL_MANAGE_REG_STRING ),
          help        = STRING_TOKEN ( STR_LOCK_THERMAL_MANAGE_REG_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
      subtitle  text = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.ExternThermalStatus,
          prompt      = STRING_TOKEN ( STR_EXTERN_THERMAL_STATUS_STRING ),
          help        = STRING_TOKEN ( STR_EXTERN_THERMAL_STATUS_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.ClosedLoopThermalManage,
          prompt      = STRING_TOKEN ( STR_CLOSED_LOOP_THERMAL_MANAGE_STRING ),
          help        = STRING_TOKEN ( STR_CLOSED_LOOP_THERMAL_MANAGE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.OpenLoopThermalManage,
          prompt      = STRING_TOKEN ( STR_OPEN_LOOP_THERMAL_MANAGE_STRING ),
          help        = STRING_TOKEN ( STR_OPEN_LOOP_THERMAL_MANAGE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
      subtitle  text = STRING_TOKEN(STR_THERMAL_THRESHOLD_SETTING_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      numeric
        varid       = SystemConfig.WarmThresholdCh0Dimm0,
        prompt      = STRING_TOKEN(STR_WARM_THRESHOLD_CH0_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.WarmThresholdCh0Dimm1,
        prompt      = STRING_TOKEN(STR_WARM_THRESHOLD_CH0_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;
      numeric
        varid       = SystemConfig.HotThresholdCh0Dimm0,
        prompt      = STRING_TOKEN(STR_HOT_THRESHOLD_CH0_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.HotThresholdCh0Dimm1,
        prompt      = STRING_TOKEN(STR_HOT_THRESHOLD_CH0_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;
      numeric
        varid       = SystemConfig.WarmThresholdCh1Dimm0,
        prompt      = STRING_TOKEN(STR_WARM_THRESHOLD_CH1_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;
      numeric
        varid       = SystemConfig.WarmThresholdCh1Dimm1,
        prompt      = STRING_TOKEN(STR_WARM_THRESHOLD_CH1_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;
      numeric
        varid       = SystemConfig.HotThresholdCh1Dimm0,
        prompt      = STRING_TOKEN(STR_HOT_THRESHOLD_CH1_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;
      numeric
        varid       = SystemConfig.HotThresholdCh1Dimm1,
        prompt      = STRING_TOKEN(STR_HOT_THRESHOLD_CH1_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
      subtitle  text = STRING_TOKEN(STR_THERMAL_THRESHOLD_BUDGET_SETTING_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      numeric
        varid       = SystemConfig.WarmBudgetCh0Dimm0,
        prompt      = STRING_TOKEN(STR_WARM_BUDGET_CH0_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.WarmBudgetCh0Dimm1,
        prompt      = STRING_TOKEN(STR_WARM_BUDGET_CH0_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.HotBudgetCh0Dimm0,
        prompt      = STRING_TOKEN(STR_HOT_BUDGET_CH0_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.HotBudgetCh0Dimm1,
        prompt      = STRING_TOKEN(STR_HOT_BUDGET_CH0_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;


      numeric
        varid       = SystemConfig.WarmBudgetCh1Dimm0,
        prompt      = STRING_TOKEN(STR_WARM_BUDGET_CH1_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.WarmBudgetCh1Dimm1,
        prompt      = STRING_TOKEN(STR_WARM_BUDGET_CH1_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.HotBudgetCh1Dimm0,
        prompt      = STRING_TOKEN(STR_HOT_BUDGET_CH1_DIMM0_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

      numeric
        varid       = SystemConfig.HotBudgetCh1Dimm1,
        prompt      = STRING_TOKEN(STR_HOT_BUDGET_CH1_DIMM1_STRING),
        help        = STRING_TOKEN(STR_THRESHOLD_SETTING_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 255,
      endnumeric;

  endform;

//[-start-130403-IB05330413-modify]//
  form formid = 0x2424,
//[-end-130403-IB05330413-modify]//

     title   = STRING_TOKEN(STR_MEMORY_RAPL_STRING);
     subtitle text = STRING_TOKEN(STR_MEMORY_RAPL_STRING);
     subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
//[-start-130403-IB05330413-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1
        AND
        ideqval SystemConfig.UserPowerWeightsEn == 0;

      numeric
        varid       = SystemConfig.RaplPwrFlCh0,
        prompt      = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CH0_STRING),
        help        = STRING_TOKEN(STR_RAPL_POWER_FLOOR_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 0,
      endnumeric;
      numeric
        varid       = SystemConfig.RaplPwrFlCh1,
        prompt      = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CH1_STRING),
        help        = STRING_TOKEN(STR_RAPL_POWER_FLOOR_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 0,
      endnumeric;
      endif;
//[-end-130403-IB05330413-add]//

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.RaplPLLock,
          prompt      = STRING_TOKEN ( STR_RAPL_PL_LOCK_STRING ),
          help        = STRING_TOKEN ( STR_RAPL_PL_LOCK_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.RaplPL1Enable,
          prompt      = STRING_TOKEN ( STR_RAPL_PL1_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_RAPL_PL1_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      numeric
        varid       = SystemConfig.RaplPL1Power,
        prompt      = STRING_TOKEN(STR_RAPL_PL1_POWER_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL1_POWER_HELP),
        minimum     = 0,
        maximum     = 16383,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric
        varid       = SystemConfig.RaplPL1WindowX,
        prompt      = STRING_TOKEN(STR_RAPL_PL1_WINDOW_X_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL1_WINDOW_X_HELP),
        minimum     = 0,
        maximum     = 3,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric
        varid       = SystemConfig.RaplPL1WindowY,
        prompt      = STRING_TOKEN(STR_RAPL_PL1_WINDOW_Y_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL1_WINDOW_Y_HELP),
        minimum     = 0,
        maximum     = 31,
        step        = 1,
        default     = 0,
      endnumeric;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.RaplPL2Enable,
          prompt      = STRING_TOKEN ( STR_RAPL_PL2_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_RAPL_PL2_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),          value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),           value = 1, flags = 0;
        endoneof;
      endif;

      numeric
        varid       = SystemConfig.RaplPL2Power,
        prompt      = STRING_TOKEN(STR_RAPL_PL2_POWER_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL2_POWER_HELP),
        minimum     = 0,
        maximum     = 16383,
        step        = 1,
        default     = 222,
      endnumeric;

      numeric
        varid       = SystemConfig.RaplPL2WindowX,
        prompt      = STRING_TOKEN(STR_RAPL_PL2_WINDOW_X_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL2_WINDOW_X_HELP),
        minimum     = 0,
        maximum     = 3,
        step        = 1,
        default     = 1,
      endnumeric;

      numeric
        varid       = SystemConfig.RaplPL2WindowY,
        prompt      = STRING_TOKEN(STR_RAPL_PL2_WINDOW_Y_STRING),
        help        = STRING_TOKEN(STR_RAPL_PL2_WINDOW_Y_HELP),
        minimum     = 0,
        maximum     = 31,
        step        = 1,
        default     = 10,
      endnumeric;

  endform;
//[-end-121122-IB05330388-add]//

//[-start-130222-IB10920016-add]//
#ifdef HARDWARE_MONITOR_SUPPORT
#include "HardwareMonitor/HardwareMonitor.hfr"
#endif
//[-end-130222-IB10920016-add]//

  //
  //  Form 0x25: Video Configuration
  //
  form
    formid = 0x25, title = STRING_TOKEN(STR_VIDEO_CONFIG_STRING);

    subtitle
      text = STRING_TOKEN(STR_VIDEO_CONFIG_STRING);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

//[-start-110809-IB07370064-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdSwitchableGraphicsSupported)
//[-end-130812-IB05670190-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
	  oneof
        varid       = SystemConfig.EnSGFunction,
        prompt      = STRING_TOKEN(STR_ENABLED_SG_STRING),
        help        = STRING_TOKEN(STR_ENABLED_SG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),       value = 1, flags = DEFAULT;
	  endoneof;
	  endif;
#endif
//[-start-140224-IB10920078-add]//
#if FeaturePcdGet(PcdIntelSwitchableGraphicsSupported)
//[-end-130812-IB05670190-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    oneof
        varid       = SystemConfig.EnSGFunction,
        prompt      = STRING_TOKEN(STR_ENABLED_SG_STRING),
        help        = STRING_TOKEN(STR_ENABLED_SG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),       value = 1, flags = DEFAULT;
    endoneof;
    endif;
#endif
//[-end-140224-IB10920078-add]//

//[-start-110526-IB07250068-modify]//
    suppressif
      ideqval SystemConfig.UefiDualVgaControllers == 1;
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PrimaryDisplay,
        questionid = KEY_PRIMARY_DISPLAY,
        prompt   = STRING_TOKEN(STR_PRIMARY_DISPALY_PROMPT),
        help     = STRING_TOKEN(STR_PRIMARY_DISPALY_HELP),
//[-start-140224-IB10920078-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdSwitchableGraphicsSupported)
//[-end-130812-IB05670190-modify]//
        option text = STRING_TOKEN(STR_AUTO_TEXT),                    value = 3, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_IGFX_TEXT),                    value = 0, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_TEXT),                     value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_TEXT),                     value = 2, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_SG_TEXT),                      value = 4, flags = DEFAULT | INTERACTIVE;
#elif FeaturePcdGet(PcdIntelSwitchableGraphicsSupported)
        option text = STRING_TOKEN(STR_AUTO_TEXT),                    value = 3, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_IGFX_TEXT),                    value = 0, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_TEXT),                     value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_TEXT),                     value = 2, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_SG_TEXT),                      value = 4, flags = DEFAULT | INTERACTIVE;
#else
        option text = STRING_TOKEN(STR_AUTO_TEXT),                    value = 3, flags = DEFAULT | INTERACTIVE;
        option text = STRING_TOKEN(STR_IGFX_TEXT),                    value = 0, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_TEXT),                     value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PCI_TEXT),                     value = 2, flags = 0 | INTERACTIVE;
#endif
//[-end-140224-IB10920078-modify]//
      endoneof;
    endif;
    endif;
//[-end-110526-IB07250068-modify]//
//[-end-110809-IB07370064-modify]//

//[-start-110830-IB07370065-modify]//
//[-start-110719-IB07370064-add]//
//    grayoutif
//      ideqval SystemConfig.UserAccessLevel == 2
//      AND
//      ideqval SystemConfig.SetUserPass == 1;
//    suppressif
//      ideqval SystemConfig.BootType == 0
//      OR
//      ideqval SystemConfig.BootType == 1;
//    oneof
//      varid    = SystemConfig.UefiDualVgaControllers,
//      questionid = KEY_DUAL_VGA_SUPPORT,
//      prompt   = STRING_TOKEN(STR_UEFI_DUAL_VGA_SUPPORT_PROMPT),
//      help     = STRING_TOKEN(STR_UEFI_DUAL_VGA_SUPPORT_HELP),
//      option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0|INTERACTIVE;
//      option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
//    endoneof;
//    endif;
//    endif;
//[-end-110719-IB07370064-add]//
//[-start-120619-IB08050173-modify]//
      suppressif
        TRUE;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        label DUAL_VGA_SUPPORT_START_LABEL;
        label DUAL_VGA_SUPPORT_END_LABEL;
      endif;
      endif;
//[-end-120619-IB08050173-modify]//
//[-end-110830-IB07370065-modify]//

//[-start-110805-IB07370065-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        label PLUG_IN_DISPLAY_SELECTION_START_LABEL;
        label PLUG_IN_DISPLAY_SELECTION_END_LABEL;
      endif;
//[-end-110805-IB07370065-add]//


    goto 0x250,
         prompt = STRING_TOKEN(STR_INTERNAL_GRAPHIC_DEVICE_STRING),
         help = STRING_TOKEN(STR_INTERNAL_GRAPHIC_DEVICE_HELP);

    goto 0x251,
         prompt = STRING_TOKEN(STR_PCI_EXPRESS_GRAPHIC_STRING),
         help = STRING_TOKEN(STR_PCI_EXPRESS_GRAPHIC_HELP);
    goto 0x252,
         prompt = STRING_TOKEN(STR_SA_DMI_CONFIGURATION_STRING),
         help = STRING_TOKEN(STR_SA_DMI_CONFIGURATION_HELP);
  endform;

  //
  // Form 0x250: Internal Graphic Device
  //
  form formid = 0x250,
    title   = STRING_TOKEN(STR_INTERNAL_GRAPHIC_DEVICE_STRING);
    subtitle
      text = STRING_TOKEN(STR_INTERNAL_GRAPHIC_DEVICE_STRING);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.IGDControl,
        questionid = KEY_IGD_CONTROL,
        prompt   = STRING_TOKEN(STR_IGD_CONTROL_PROMPT),
        help     = STRING_TOKEN(STR_IGD_CONTROL_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT), value = 2, flags = DEFAULT| INTERACTIVE;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0 | INTERACTIVE;
      endoneof;
    endif;
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableRc6,
        prompt      = STRING_TOKEN(STR_IGD_RC6_STRING),
        help        = STRING_TOKEN(STR_IGD_RC6_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.DeepRenderStandby,
        prompt      = STRING_TOKEN ( STR_IGD_DEEP_RENDER_STANDBY_STRING ),
        help        = STRING_TOKEN ( STR_IGD_DEEP_RENDER_STANDBY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.GttSize,
        questionid = KEY_GTT,
        prompt   = STRING_TOKEN(STR_VIDEO_GTT_SIZE_PROMPT),
        help     = STRING_TOKEN(STR_VIDEO_GTT_SIZE_HELP),
        option text = STRING_TOKEN(STR_1MB_TEXT),  value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_2MB_TEXT),  value = 2, flags = DEFAULT | INTERACTIVE;
      endoneof;
    endif;
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.ApertureSize,
        questionid = KEY_APERTURE_SIZE,
        prompt   = STRING_TOKEN(STR_VIDEO_APERTURE_SIZE_PROMPT),
        help     = STRING_TOKEN(STR_VIDEO_APERTURE_SIZE_HELP),
        option text = STRING_TOKEN(STR_128MB_TEXT),  value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_256MB_TEXT),  value = 2, flags = DEFAULT | INTERACTIVE;
        option text = STRING_TOKEN(STR_512MB_TEXT),  value = 3, flags = 0 | INTERACTIVE;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-120606-IB03610423-modify]//
      oneof
        varid       = SystemConfig.DvmtPreAllocated,
        questionid  = KEY_DVMT_PREALLOCATE,
        prompt      = STRING_TOKEN ( STR_DVMT_PRE_ALLOCATED_STRING ),
        help        = STRING_TOKEN ( STR_DVMT_PRE_ALLOCATED_HELP ),
        option text = STRING_TOKEN ( STR_0MB_TEXT    ), value = 0x00, flags = INTERACTIVE | 0;
//[-start-121026-IB06460460-modify]//
//[-start-120629-IB05330352-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN ( STR_32MB_TEXT   ), value = 0x01, flags = INTERACTIVE | DEFAULT;
//        option text = STRING_TOKEN ( STR_64MB_TEXT   ), value = 0x02, flags = INTERACTIVE | 0;
//#else
//[-start-130506-IB10930031-modify]//
        option text = STRING_TOKEN ( STR_32MB_TEXT   ), value = 0x01, flags = INTERACTIVE | DEFAULT;
        option text = STRING_TOKEN ( STR_64MB_TEXT   ), value = 0x02, flags = INTERACTIVE | 0;
//[-end-130506-IB10930031-modify]//
//#endif
//[-end-120629-IB05330352-modify]//
//[-end-121026-IB06460460-modify]//
        option text = STRING_TOKEN ( STR_96MB_TEXT   ), value = 0x03, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_128MB_TEXT  ), value = 0x04, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_160MB_TEXT  ), value = 0x05, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_192MB_TEXT  ), value = 0x06, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_224MB_TEXT  ), value = 0x07, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_256MB_TEXT  ), value = 0x08, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_288MB_TEXT  ), value = 0x09, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_320MB_TEXT  ), value = 0x0A, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_352MB_TEXT  ), value = 0x0B, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_384MB_TEXT  ), value = 0x0C, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_416MB_TEXT  ), value = 0x0D, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_448MB_TEXT  ), value = 0x0E, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_480MB_TEXT  ), value = 0x0F, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_512MB_TEXT  ), value = 0x10, flags = INTERACTIVE | 0;
        option text = STRING_TOKEN ( STR_1024MB_TEXT ), value = 0x11, flags = INTERACTIVE | 0;
      endoneof;
//[-end-120606-IB03610423-modify]//
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-120606-IB03610423-modify]//
      oneof
        varid       = SystemConfig.DvmtTotalGfxMemSize,
        prompt      = STRING_TOKEN ( STR_DVMT_MEMORY_SIZE_STRING ),
        help        = STRING_TOKEN ( STR_DVMT_MEMORY_SIZE_HELP ),
        option text = STRING_TOKEN ( STR_128MB_TEXT ), value = 0x01, flags = 0;
        option text = STRING_TOKEN ( STR_256MB_TEXT ), value = 0x02, flags = 0;
        option text = STRING_TOKEN ( STR_MAX_TEXT   ), value = 0xFF, flags = DEFAULT;
      endoneof;
//[-end-120606-IB03610423-modify]//
    endif;

//[-start-110805-IB07370065-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
        label IGD_DISPLAY_SELECTION_START_LABEL;
        label IGD_DISPLAY_SELECTION_END_LABEL;
      endif;

////[-start-120402-IB03610396-add]//
//    suppressif
//      ideqval SystemConfig.BootType == 2;
////[-end-120402-IB03610396-add]//
//      oneof
//        //
//        // Display Pipe A, can set to duplicate display, for example : CRT + LPT = 0x01 | 0x08
//        //
//        varid       = SystemConfig.IGDBootType,
//        prompt      = STRING_TOKEN(STR_IGD_BOOT_TYPE_STRING),
//        help        = STRING_TOKEN(STR_IGD_BOOT_TYPE_HELP),
//        option text = STRING_TOKEN(STR_VBIOS_DEFAULT_TEXT),   value = 0x00,  flags = DEFAULT;
//        option text = STRING_TOKEN(STR_CRT_TEXT),             value = 0x01,  flags = 0;
//        option text = STRING_TOKEN(STR_EFP_TEXT),             value = 0x04,  flags = 0;
//        option text = STRING_TOKEN(STR_LFP_TEXT),             value = 0x08,  flags = 0;
//        option text = STRING_TOKEN(STR_EFP3_TEXT),            value = 0x20,  flags = 0;
//        option text = STRING_TOKEN(STR_EFP2_TEXT),            value = 0x40,  flags = 0;
//        option text = STRING_TOKEN(STR_LFP2_TEXT),            value = 0x80,  flags = 0;
//      endoneof;
//    endif;
////[-start-120402-IB03610396-add]//
//    endif;
////[-end-120402-IB03610396-add]//
//[-end-110805-IB07370065-modify]//

//[-start-121206-IB04770253-remove]//
//     grayoutif
//       ideqval SystemConfig.UserAccessLevel == 2
//       AND
//       ideqval SystemConfig.SetUserPass == 1;
//     suppressif
//       ideqval SystemConfig.IGDBootType == 0;
//       oneof
//         varid       = SystemConfig.IGDBootTypeSecondary,
//         prompt      = STRING_TOKEN(STR_IGD_BOOT_TYPE2_STRING),
//         help        = STRING_TOKEN(STR_IGD_BOOT_TYPE2_HELP),
//         option text = STRING_TOKEN(STR_DISABLED_TEXT),        value = 0x00,  flags = DEFAULT;
//         option text = STRING_TOKEN(STR_CRT_TEXT),             value = 0x01,  flags = 0;
//         option text = STRING_TOKEN(STR_EFP_TEXT),             value = 0x04,  flags = 0;
//         option text = STRING_TOKEN(STR_LFP_TEXT),             value = 0x08,  flags = 0;
//         option text = STRING_TOKEN(STR_EFP3_TEXT),            value = 0x20,  flags = 0;
//         option text = STRING_TOKEN(STR_EFP2_TEXT),            value = 0x40,  flags = 0;
//         option text = STRING_TOKEN(STR_LFP2_TEXT),            value = 0x80,  flags = 0;
//       endoneof;
//     endif;
//     endif;
//[-end-121206-IB04770253-remove]//

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.PanelType,
        prompt      = STRING_TOKEN(STR_IGD_PANEL_TYPE_STRING),
        help        = STRING_TOKEN(STR_IGD_PANEL_TYPE_HELP),
        option text = STRING_TOKEN(STR_PANEL_640_480_LVDS_TEXT),    value = 1,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_800_600_LVDS_TEXT),    value = 2,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1024_768_LVDS1_TEXT),  value = 3,  flags = DEFAULT; // VBIOS Panel#3
        option text = STRING_TOKEN(STR_PANEL_1280_1024_LVDS_TEXT),  value = 4,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1400_1050_LVDS1_TEXT), value = 5,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1400_1050_LVDS2_TEXT), value = 6,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1600_1200_LVDS_TEXT),  value = 7,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1366_768_LVDS_TEXT),   value = 8,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1680_1050_LVDS_TEXT),  value = 9,  flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1920_1200_LVDS_TEXT),  value = 10, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1440_900_LVDS_TEXT),   value = 11, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1600_900_LVDS_TEXT),   value = 12, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1024_768_LVDS2_TEXT),  value = 13, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1280_800_LVDS_TEXT),   value = 14, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_1920_1080_LVDS_TEXT),  value = 15, flags = 0;
        option text = STRING_TOKEN(STR_PANEL_2048_1536_LVDS_TEXT),  value = 16, flags = 0;
      endoneof;
//[-start-120223-IB05300286-modify]//
      oneof
        varid       = SystemConfig.BacklightControl,
        prompt      = STRING_TOKEN(STR_BACKLIGHT_CONTROL_STRING),
        help        = STRING_TOKEN(STR_BACKLIGHT_CONTROL_HELP),
        option text = STRING_TOKEN(STR_BKLT_PWM_INVERTED_TEXT),     value = 0, flags = 0;
        option text = STRING_TOKEN(STR_BKLT_PWM_NORMAL_TEXT),       value = 2, flags = DEFAULT;
//[-start-120223-IB05300287-remove]//
//        option text = STRING_TOKEN(STR_BKLT_GMBUS_INVERTED_TEXT),   value = 1, flags = 0;
//        option text = STRING_TOKEN(STR_BKLT_GMBUS_NORMAL_TEXT),     value = 3, flags = 0;
//[-end-120223-IB05300287-remove]//
      endoneof;
//[-end-120223-IB05300286-modify]//
      oneof
        varid       = SystemConfig.LFPConfiguration,
        prompt      = STRING_TOKEN(STR_ACTIVE_LFP_STRING),
        help        = STRING_TOKEN(STR_ACTIVE_LFP_HELP),
        option text = STRING_TOKEN(STR_NO_LVDS_TEXT),       value = 0,    flags = 0;
//[-start-120223-IB05300287-remove]//
//        option text = STRING_TOKEN(STR_INT_LVDS_TEXT),      value = 1,    flags = 0;
//        option text = STRING_TOKEN(STR_SDVO_LVDS_TEXT),     value = 2,    flags = 0;
//[-end-120223-IB05300287-remove]//
        option text = STRING_TOKEN(STR_EDP_TEXT),           value = 3,    flags = 0;
        option text = STRING_TOKEN(STR_VBIOS_DEFAULT_TEXT), value = 0xFF, flags = DEFAULT;
      endoneof;
      oneof
        varid       = SystemConfig.PanelColorDepth,
        prompt      = STRING_TOKEN(STR_PANEL_COLOR_STRING),
        help        = STRING_TOKEN(STR_PANEL_COLOR_HELP),
        option text = STRING_TOKEN(STR_COLOR_18_BIT_TEXT),  value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_COLOR_24_BIT_TEXT),  value = 1, flags = 0;
      endoneof;
    endif;

//[-start-121218-IB10540025-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.IuerDockEnable,
        prompt      = STRING_TOKEN ( STR_IUER_DOCK_STRING ),
        help        = STRING_TOKEN ( STR_IUER_DOCK_HELP ),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLE_TEXT), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.IuerButtonEnable,
        prompt      = STRING_TOKEN ( STR_IUER_BUTTON_STRING ),
        help        = STRING_TOKEN ( STR_IUER_BUTTON_HELP ),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLE_TEXT), value = 1, flags = DEFAULT;
      endoneof;
    endif;
//[-end-121218-IB10540025-add]//
//[-start-121224-IB05330401-add]//
    oneof   varid   = SystemConfig.SaAudioEnable,
            prompt      = STRING_TOKEN(STR_SA_AUDIO_DEV_STRING),
            help        = STRING_TOKEN(STR_SA_AUDIO_DEV_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
    endoneof;

    suppressif
      ideqval SystemConfig.SaAudioEnable == 0;
    numeric
      varid       = SystemConfig.AudioDisableBitmap,
      prompt      = STRING_TOKEN(STR_SA_AUDIO_DISABLE_BITMAP_STRING),
      help        = STRING_TOKEN(STR_SA_AUDIO_DISABLE_BITMAP_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,
      default     = 0,
    endnumeric;
    endif;
//[-end-121224-IB05330401-add]//
  endform;

  //
  // Form 0x251: Pci Express Graphic
  //
  form formid = 0x251,
    title   = STRING_TOKEN(STR_PCI_EXPRESS_GRAPHIC_STRING);
    subtitle
      text = STRING_TOKEN(STR_PCI_EXPRESS_GRAPHIC_STRING);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieResetDelay,
        prompt   = STRING_TOKEN(STR_PCIE_RESET_DELAY_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_RESET_DELAY_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),                value = 0,  flags = 0;
        option text = STRING_TOKEN(STR_PCIE_RESET_DELAY_50_MS_TEXT),  value = 5,  flags = 0;
        option text = STRING_TOKEN(STR_PCIE_RESET_DELAY_100_MS_TEXT), value = 10, flags = DEFAULT;
        option text = STRING_TOKEN(STR_PCIE_RESET_DELAY_200_MS_TEXT), value = 20, flags = 0;
        option text = STRING_TOKEN(STR_PCIE_RESET_DELAY_300_MS_TEXT), value = 30, flags = 0;
      endoneof;
//[-start-121121-IB05300360-modify]//
      oneof
        varid    = SystemConfig.PegAspm,
        prompt   = STRING_TOKEN(STR_VIDEO_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_VIDEO_ASPM_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value = 1, flags = 0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value = 2, flags = 0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value = 3, flags = 0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value = 4, flags = DEFAULT;
      endoneof;
//[-end-121121-IB05300360-modify]//
      oneof
        varid    = SystemConfig.PegGenx0,
        questionid = KEY_PEG_FULL_RESET_0,
        prompt   = STRING_TOKEN(STR_PEG0_GENX_STRING),
        help     = STRING_TOKEN(STR_PEG0_GENX_HELP),
        option text = STRING_TOKEN(STR_PEG_AUTO), value = 0, flags = DEFAULT | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN1), value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN2), value = 2, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN3), value = 3, flags = 0 | INTERACTIVE;
      endoneof;
      oneof
        varid    = SystemConfig.PegGenx1,
        questionid = KEY_PEG_FULL_RESET_1,
        prompt   = STRING_TOKEN(STR_PEG1_GENX_STRING),
        help     = STRING_TOKEN(STR_PEG1_GENX_HELP),
        option text = STRING_TOKEN(STR_PEG_AUTO), value = 0, flags = DEFAULT | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN1), value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN2), value = 2, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN3), value = 3, flags = 0 | INTERACTIVE;
      endoneof;
      oneof
        varid    = SystemConfig.PegGenx2,
        questionid = KEY_PEG_FULL_RESET_2,
        prompt   = STRING_TOKEN(STR_PEG2_GENX_STRING),
        help     = STRING_TOKEN(STR_PEG2_GENX_HELP),
        option text = STRING_TOKEN(STR_PEG_AUTO), value = 0, flags = DEFAULT | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN1), value = 1, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN2), value = 2, flags = 0 | INTERACTIVE;
        option text = STRING_TOKEN(STR_PEG_GEN3), value = 3, flags = 0 | INTERACTIVE;
      endoneof;
//[-start-120712-IB06150233-remove]//
//      oneof
//        varid    = SystemConfig.PegGenx3,
//        questionid = KEY_PEG_FULL_RESET_3,
//        prompt   = STRING_TOKEN(STR_PEG3_GENX_STRING),
//        help     = STRING_TOKEN(STR_PEG3_GENX_HELP),
//        option text = STRING_TOKEN(STR_PEG_AUTO), value = 0, flags = DEFAULT | INTERACTIVE;
//        option text = STRING_TOKEN(STR_PEG_GEN1), value = 1, flags = 0 | INTERACTIVE;
//        option text = STRING_TOKEN(STR_PEG_GEN2), value = 2, flags = 0 | INTERACTIVE;
//        option text = STRING_TOKEN(STR_PEG_GEN3), value = 3, flags = 0 | INTERACTIVE;
//      endoneof;
//[-end-120712-IB06150233-remove]//
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqvallist SystemConfig.PegAspm == 0 2 4;
      oneof
        varid    = SystemConfig.PegAspmL0s,
        prompt   = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_ASPM_L0S_HELP),
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),      value = 1, flags = 0;
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),      value = 2, flags = 0;
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),    value = 3, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqvallist SystemConfig.PegAspm == 0 2 4
    	OR
    	ideqval SystemConfig.PegAspmL0s == 2;	// disabled

    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.AlwaysEnablePeg,
        prompt   = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_PROMPT),
        help     = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_HELP),
        option text = STRING_TOKEN(STR_ENABLED_TEXT),                    value = 1, flags = 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),                   value = 0, flags = DEFAULT;
      endoneof;
    endif;
//[-start-121207-IB07250300-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdSwitchableGraphicsSupported)
#if FeaturePcdGet(PcdAmdPowerXpressSupported)
//[-end-130812-IB05670190-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqvallist SystemConfig.PrimaryDisplay == 0 1 2 3
        OR
      ideqval SystemConfig.EnSGFunction == 0;
      oneof
        varid       = SystemConfig.PowerXpress,
        prompt      = STRING_TOKEN(STR_ENABLED_PX_STRING),
        help        = STRING_TOKEN(STR_ENABLED_PX_HELP),
        option text = STRING_TOKEN(STR_MUXLESS_FIXED_TEXT),           value = 5, flags = 0;
        option text = STRING_TOKEN(STR_MUXLESS_DYNAMIC_TEXT),         value = 6, flags = 0;
        option text = STRING_TOKEN(STR_MUXLESS_FIXED_DYNAMIC_TEXT),   value = 7, flags = 0;
        option text = STRING_TOKEN(STR_FULL_DGPU_POWEROFF_DYNAMIC),   value = 8, flags = DEFAULT;
        option text = STRING_TOKEN(STR_FIXED_POWEROFF_DYNAMIC),       value = 13, flags = 0;
      endoneof;
    endif;
    endif;
#endif
#endif
//[-end-121207-IB07250300-modify]//
//[-start-140224-IB10920078-add]//
#if FeaturePcdGet(PcdIntelSwitchableGraphicsSupported)
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqvallist SystemConfig.PrimaryDisplay == 0 1 2 3
        OR
      ideqval SystemConfig.EnSGFunction == 0;
      oneof
        varid       = SystemConfig.PowerXpress,
        prompt      = STRING_TOKEN(STR_ENABLED_PX_STRING),
        help        = STRING_TOKEN(STR_ENABLED_PX_HELP),
        option text = STRING_TOKEN(STR_MUXLESS_FIXED_TEXT),           value = 5, flags = 0;
        option text = STRING_TOKEN(STR_MUXLESS_DYNAMIC_TEXT),         value = 6, flags = 0;
        option text = STRING_TOKEN(STR_MUXLESS_FIXED_DYNAMIC_TEXT),   value = 7, flags = 0;
        option text = STRING_TOKEN(STR_FULL_DGPU_POWEROFF_DYNAMIC),   value = 8, flags = DEFAULT;
        option text = STRING_TOKEN(STR_FIXED_POWEROFF_DYNAMIC),       value = 13, flags = 0;
      endoneof;
    endif;
    endif;
#endif
//[-end-140224-IB10920078-add]//
  endform;

  //
  // Form 0x252:
  //
  form formid = 0x252,
    title   = STRING_TOKEN(STR_SA_DMI_CONFIGURATION_STRING);
    subtitle
      text = STRING_TOKEN(STR_SA_DMI_CONFIGURATION_STRING);

    subtitle
      text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;

      oneof
        varid    = SystemConfig.SaDmiAspm,
        prompt   = STRING_TOKEN(STR_SA_DMI_LINK_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_SA_DMI_LINK_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120629-IB05330352-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value = 1, flags = 0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value = 2, flags = 0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value = 3, flags = 0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value = 1, flags = 0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value = 2, flags = 0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value = 3, flags = DEFAULT;
//#endif
//[-end-120629-IB05330352-modify]//
//[-end-121026-IB06460460-modify]//
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value = 4, flags = 0;
      endoneof;

      oneof
        varid    = SystemConfig.SaDmiExtSync,
        prompt   = STRING_TOKEN(STR_DMI_EXTENDED_SYNCH_CONTROL),
        help     = STRING_TOKEN(STR_DMI_EXTENDED_SYNCH_CONTROL_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
      endoneof;

      oneof
        varid    = SystemConfig.DmiVc1,
        prompt   = STRING_TOKEN(STR_DMI_VC1),
        help     = STRING_TOKEN(STR_DMI_VC1_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
      endoneof;

      oneof
        varid    = SystemConfig.DmiVcp,
        prompt   = STRING_TOKEN(STR_DMI_VCP),
        help     = STRING_TOKEN(STR_DMI_VCP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
      endoneof;

      oneof
        varid    = SystemConfig.DmiVcm,
        prompt   = STRING_TOKEN(STR_DMI_VCM),
        help     = STRING_TOKEN(STR_DMI_VCM_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;

      endoneof;
       oneof
        varid    = SystemConfig.DmiGen2,
        prompt   = STRING_TOKEN(STR_DMI_GEN2),
        help     = STRING_TOKEN(STR_DMI_GEN2_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
        option text = STRING_TOKEN(STR_AUTO_TEXT), value = 2, flags = 0;
      endoneof;
    endif;

  endform;


    //
    //  Form 0x26: USB Configuration
    //
    form
      formid = 0x26, title = STRING_TOKEN(STR_USB_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_USB_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

//[-start-120709-IB02040279-modify]//
        suppressif ideqvallist SystemConfig.BootTypeReserved == 0 1;
          oneof
            varid       = SystemConfig.LegacyUsbSupport,
            prompt      = STRING_TOKEN ( STR_USB_SUPPORT_STRING ),
            help        = STRING_TOKEN ( STR_USB_SUPPORT_UEFI_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ),            value = 0, flags = 0;
            option text = STRING_TOKEN ( STR_ENABLED_TEXT ),             value = 1, flags = DEFAULT;
          endoneof;
        endif;

        suppressif ideqval SystemConfig.BootTypeReserved == 2;
          oneof
            varid       = SystemConfig.LegacyUsbSupport,
            prompt      = STRING_TOKEN ( STR_USB_SUPPORT_STRING ),
            help        = STRING_TOKEN ( STR_USB_SUPPORT_LEGACY_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ),            value = 0, flags = 0;
            option text = STRING_TOKEN ( STR_ENABLED_TEXT ),             value = 1, flags = DEFAULT;
            option text = STRING_TOKEN ( STR_UEFI_ONLY_TEXT ),           value = 2, flags = 0;
          endoneof;
        endif;
//[-end-120709-IB02040279-modify]//

      endif;
//[-start-130714-IB10930040-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.UsbPrecondition,
          prompt      = STRING_TOKEN ( STR_USB_PRECONDITION_STRING ),
          help        = STRING_TOKEN ( STR_USB_PRECONDITION_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ),            value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),             value = 1, flags = DEFAULT;
        endoneof;
      endif;
//[-end-130714-IB10930040-add]//
//[-start-130403-IB02950501-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.XhciPreBootSupport == 0;
        oneof
          varid       = SystemConfig.XHCIMode,
          questionid  = KEY_XHCI_PB_OPTION,
          prompt      = STRING_TOKEN ( STR_USB_XHCI_MODE_STRING ),
          help        = STRING_TOKEN ( STR_USB_XHCI_MODE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_AUTO_TEXT     ), value = 2, flags = DEFAULT | INTERACTIVE;
          option text = STRING_TOKEN ( STR_SMART_AUTO_TEXT ), value = 3, flags = 0 | INTERACTIVE;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
        ideqval SystemConfig.XhciPreBootSupport == 1;
        oneof
          varid       = SystemConfig.XHCIMode,
          questionid  = KEY_XHCI_OPTION,
          prompt      = STRING_TOKEN ( STR_USB_XHCI_MODE_STRING ),
          help        = STRING_TOKEN ( STR_USB_XHCI_MODE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_AUTO_TEXT     ), value = 2, flags = 0 | INTERACTIVE;
        endoneof;
      endif;
      endif;
//[-end-130403-IB02950501-modify]//
//[-start-130205-IB02950497-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.ManualMode,
          questionid  = KEY_XHCI_MANUAL_OPTION,
          prompt      = STRING_TOKEN ( STR_MANUAL_TEXT ),
          help        = STRING_TOKEN ( STR_MANUAL_TEXT_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
        endoneof;
      endif;

//[-start-130714-IB10930040-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ManualMode == 0;
        oneof
          varid       = SystemConfig.XhciPreBootSupport,
          questionid  = KEY_XHCI_PREBOOT_SUPPORT,
          prompt      = STRING_TOKEN ( STR_XHCI_PREBOOT_SUPPORT_STRING ),
          help        = STRING_TOKEN ( STR_XHCI_PREBOOT_SUPPORT_STRING_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT | INTERACTIVE;
        endoneof;
      endif;
      endif;
//[-end-130714-IB10930040-modify]//

//[-start-130403-IB02950501-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ManualMode == 0;

        oneof
          varid       = SystemConfig.USBRouteSwitch,
          questionid  = KEY_USBRS_OPTION,
          prompt      = STRING_TOKEN ( STR_USB_ROUTE_SWITCH_STRING ),
          help        = STRING_TOKEN ( STR_USB_ROUTE_SWITCH_HELP ),
          option text = STRING_TOKEN ( STR_PER_PIN_TEXT ), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ALL_PINS_EHCI_TEXT ), value = 1, flags = DEFAULT | INTERACTIVE;
          option text = STRING_TOKEN ( STR_ALL_PINS_XHCI_TEXT  ), value = 2, flags = 0 | INTERACTIVE;
        endoneof;
      endif;
      endif;
//[-end-130403-IB02950501-modify]//


      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.ManualMode == 0
        OR
        ideqvallist SystemConfig.USBRouteSwitch == 1 2;

        oneof
          varid       = SystemConfig.USB20Pin0,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_0_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin1,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_1_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin2,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_2_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin3,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_3_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin4,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_4_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin5,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_5_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin6,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_6_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin7,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_7_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin8,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_8_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin9,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_9_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin10,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_10_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin11,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_11_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin12,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_12_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB20Pin13,
          prompt      = STRING_TOKEN ( STR_USB20_PIN_13_STRING ),
          help        = STRING_TOKEN ( STR_USB20_PIN_HELP ),
          option text = STRING_TOKEN ( STR_ROUTE_TO_EHCI_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ROUTE_TO_XHCI_TEXT ), value = 1, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.ManualMode == 0;

        oneof
          varid       = SystemConfig.USB30SuperSpeed,
          prompt      = STRING_TOKEN ( STR_USB30_SUPER_SPEED_STRING ),
          help        = STRING_TOKEN ( STR_USB30_SUPER_SPEE_HELP ),
          option text = STRING_TOKEN ( STR_SELECT_PIN_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_DISABLE_PINS_TEXT ), value = 1, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLE_PINS_TEXT  ), value = 2, flags = 0;
        endoneof;
      endif;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.ManualMode == 0
        OR
        ideqvallist SystemConfig.USB30SuperSpeed == 1 2;

        oneof
          varid       = SystemConfig.USB30Pin1,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_1_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB30Pin2,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_2_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB30Pin3,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_3_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB30Pin4,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_4_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB30Pin5,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_5_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;

        oneof
          varid       = SystemConfig.USB30Pin6,
          prompt      = STRING_TOKEN ( STR_USB30_PIN_6_STRING ),
          help        = STRING_TOKEN ( STR_USB30_PIN_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-end-130205-IB02950497-add]//

//[-start-130714-IB10930040-remove]//
//
//  OBSOLETE from USB policy Revision 2 !!! DO NOT USE !!!
//
//      grayoutif
//        ideqval SystemConfig.UserAccessLevel == 2
//        AND
//        ideqval SystemConfig.SetUserPass == 1;
//      suppressif
//        ideqval SystemConfig.XHCIMode == 0;
//
//        oneof
//          varid       = SystemConfig.XhciStreams,
//          prompt      = STRING_TOKEN ( STR_XHCI_STREAMS_STRING ),
//          help        = STRING_TOKEN ( STR_XHCI_STREAMS_HELP ),
//          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
//          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//        endoneof;
//      endif;
//      endif;
//[-end-130714-IB10930040-remove]//

//[-start-130714-IB10930040-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ManualMode == 0;
        oneof
          varid       = SystemConfig.Ehci1Enable,
          prompt      = STRING_TOKEN ( STR_USB_EHCI1_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_EHCI1_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;
      endif;
      endif;

//[-start-121126-IB04320209-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if !FeaturePcdGet(PcdUltFlag)  //ULT platform does not have EHCI controler 2
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
//[-end-121126-IB04320209-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ManualMode == 0;
        oneof
          varid       = SystemConfig.Ehci2Enable,
          prompt      = STRING_TOKEN ( STR_USB_EHCI2_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_EHCI2_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;
      endif;
      endif;
//[-start-121126-IB04320209-add]//
#endif
//[-end-121126-IB04320209-add]//
//[-end-130714-IB10930040-modify]//


      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof
          varid       = SystemConfig.UsbPerPortCtl,
          prompt      = STRING_TOKEN ( STR_USB_PREPORT_CONTROL_STRING ),
          help        = STRING_TOKEN ( STR_USB_PREPORT_CONTROL_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = 0;
        endoneof;

      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci1Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort0,
          prompt      = STRING_TOKEN ( STR_USB_PORT0_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT0_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort1,
          prompt      = STRING_TOKEN ( STR_USB_PORT1_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT1_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci1Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort2,
          prompt      = STRING_TOKEN ( STR_USB_PORT2_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT2_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort3,
          prompt      = STRING_TOKEN ( STR_USB_PORT3_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT3_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci1Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort4,
          prompt      = STRING_TOKEN ( STR_USB_PORT4_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT4_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort5,
          prompt      = STRING_TOKEN ( STR_USB_PORT5_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT5_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci1Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort6,
          prompt      = STRING_TOKEN ( STR_USB_PORT6_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT6_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort7,
          prompt      = STRING_TOKEN ( STR_USB_PORT7_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT7_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci2Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort8,
          prompt      = STRING_TOKEN ( STR_USB_PORT8_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT8_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort9,
          prompt      = STRING_TOKEN ( STR_USB_PORT9_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT9_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci2Enable == 0;

        oneof
          varid       = SystemConfig.UsbPort10,
          prompt      = STRING_TOKEN ( STR_USB_PORT10_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT10_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

        oneof
          varid       = SystemConfig.UsbPort11,
          prompt      = STRING_TOKEN ( STR_USB_PORT11_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT11_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;

      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.UsbPerPortCtl == 0
        OR
        ideqval SystemConfig.Ehci2Enable == 0;
        oneof
          varid       = SystemConfig.UsbPort12,
          prompt      = STRING_TOKEN ( STR_USB_PORT12_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT12_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;
        oneof
          varid       = SystemConfig.UsbPort13,
          prompt      = STRING_TOKEN ( STR_USB_PORT13_ENABLE_STRING ),
          help        = STRING_TOKEN ( STR_USB_PORT13_ENABLE_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT ),  value = 1, flags = DEFAULT;
        endoneof;
      endif;
      endif;

    endform;

    //
    //  Form 0x27: Chipset Configuration
    //
    form
      formid = 0x27, title = STRING_TOKEN(STR_CHIPSET_CONFIG_STRING);

      subtitle text = STRING_TOKEN(STR_CHIPSET_CONFIG_STRING);
      subtitle text = STRING_TOKEN(STR_BLANK_STRING);
      subtitle text = STRING_TOKEN(STR_SETUP_WARNING_TEXT);
      subtitle text = STRING_TOKEN(STR_SETTING_ITEM_STRING);
      subtitle text = STRING_TOKEN(STR_MALFUNCTION_STRING);
      subtitle text = STRING_TOKEN(STR_BLANK_STRING);
        grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          oneof
            varid       = SystemConfig.CRIDEnable,
            prompt      = STRING_TOKEN ( STR_CRID_PROMPT ),
            help        = STRING_TOKEN ( STR_CRID_HELP ),
            option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;
     grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
            varid   = SystemConfig.Port80Route,
            prompt  = STRING_TOKEN(STR_PORT80R_SUPPORT),
            help    = STRING_TOKEN(STR_PORT80R_HELP),
            option text = STRING_TOKEN(STR_TO_LPC_TEXT), value=0, flags=DEFAULT;
            option text = STRING_TOKEN(STR_TO_PCI_TEXT), value=1, flags=0;
        endoneof;
     endif;

   grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof   varid   = SystemConfig.VTD,
              prompt      = STRING_TOKEN(STR_VTD),
              help        = STRING_TOKEN(STR_VTD_HELP),
              option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0 | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags=DEFAULT | RESET_REQUIRED;
      endoneof;
      endif;

   grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
//[-start-121130-IB06150264-remove]//
//   suppressif
//        ideqval SystemConfig.VTD == 0;
//[-end-121130-IB06150264-remove]//

      oneof   varid   = SystemConfig.ChapDeviceEnable,
              prompt      = STRING_TOKEN(STR_CHAP_DEVICE_STRING),
              help        = STRING_TOKEN(STR_CHAP_DEVICE_HELP),
              option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
              option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
      endoneof;

      grayoutif
//[-start-120403-IB05300308-modify]//
        ideqval SystemConfig.EnableDptf == 1;
//[-end-120403-IB05300308-modify]//
        oneof
          varid       = SystemConfig.Device4Enable,
          prompt      = STRING_TOKEN ( STR_DEVICE_4_STRING ),
          help        = STRING_TOKEN ( STR_DEVICE_4_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
        endoneof;
      endif;

//[-start-121130-IB06150264-modify]//
//[-start-121224-IB05330401-remove]//
//      oneof   varid   = SystemConfig.SaAudioEnable,
//              prompt      = STRING_TOKEN(STR_SA_AUDIO_DEV_STRING),
//              help        = STRING_TOKEN(STR_SA_AUDIO_DEV_HELP),
//              option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
//              option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
//      endoneof;
//[-end-121224-IB05330401-remove]//
//[-end-121130-IB06150264-modify]//

      oneof   varid   = SystemConfig.ScramblerEnable,
              prompt      = STRING_TOKEN(STR_SCRAMBLER_STRING),
              help        = STRING_TOKEN(STR_SCRAMBLER_HELP),
//[-start-120716-IB06460416-modify]//
//[-start-120628-IB05330350-modify]//
//[-start-120629-IB05330352-modify]//
              option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
              option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
//[-end-120629-IB05330352-modify]//
//[-end-120628-IB05330350-modify]//
//[-end-120716-IB06460416-modify]//
      endoneof;

//[-start-121130-IB06150264-remove]//
//   endif;
//[-end-121130-IB06150264-remove]//
   endif;

      suppressif
        ideqvallist SystemConfig.UserAccessLevel == 1 3 4
        OR
        ideqval SystemConfig.SetUserPass == 0;
        text
          help   = STRING_TOKEN(STR_BLANK_STRING),
          text   = STRING_TOKEN(STR_BLANK_STRING),
          text   = STRING_TOKEN(STR_BLANK_STRING),
          flags  = 0,
          key    = 0;
      endif;

//[-start-121204-IB05300366-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.MemoryFrequency,
          prompt      = STRING_TOKEN(STR_MEMORY_FREQUENCY_STRING),
          help        = STRING_TOKEN(STR_MEMORY_FREQUENCY_HELP),
          option text = STRING_TOKEN(STR_AUTO_TEXT), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1067_TEXT), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1200_TEXT), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1333_TEXT), value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1400_TEXT), value = 6, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1600_TEXT), value = 7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1800_TEXT), value = 8, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1867_TEXT), value = 9, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2000_TEXT), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2133_TEXT), value = 11, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2200_TEXT), value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2400_TEXT), value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2600_TEXT), value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2667_TEXT), value = 15, flags = RESET_REQUIRED;
        endoneof;
      endif;
//[-end-121204-IB05300366-modify]//
//[-start-121127-IB03780468-remove]//
//      grayoutif
//        ideqval SystemConfig.UserAccessLevel == 2
//        AND
//        ideqval SystemConfig.SetUserPass == 1;
//        oneof
//          varid       = SystemConfig.NModeSupport,
//          prompt      = STRING_TOKEN(STR_N_MODE_SUPPORT_STRING),
//          help        = STRING_TOKEN(STR_N_MODE_SUPPORT_HELP),
//          option text = STRING_TOKEN(STR_AUTO_TEXT),     value = 0, flags = DEFAULT;
//          option text = STRING_TOKEN(STR_1_N_MODE_TEXT), value = 1, flags = 0;
//          option text = STRING_TOKEN(STR_2_N_MODE_TEXT), value = 2, flags = 0;
//        endoneof;
//      endif;
//[-end-121127-IB03780468-remove]//

      grayoutif
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdAntiTheftSupported)
//[-end-130812-IB05670190-modify]//
        ideqval SystemConfig.AtState == 1
        OR
#endif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof
          varid       = SystemConfig.MEReFlash,
          prompt      = STRING_TOKEN ( STR_ME_RE_FLASH_PROMPT      ),
          help        = STRING_TOKEN ( STR_ME_RE_FLASH_HELP ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT            ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLED_TEXT             ), value = 1, flags = 0;
        endoneof;

      endif;

//[-start-121011-IB06150251-add]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdPttSupport)
//[-end-130812-IB05670190-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;

        oneof
          varid       = SystemConfig.FTpmSwitch,
          prompt      = STRING_TOKEN ( STR_FTPM_SWITCH_STRING),
          help        = STRING_TOKEN ( STR_FTPM_SWITCH_HELP ),
          option text = STRING_TOKEN ( STR_FTPM_SWITCH_GPDMA_TEXT    ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_FTPM_SWITCH_MSFT_TEXT     ), value = 1, flags = 0;
        endoneof;

      endif;
#endif
//[-end-121011-IB06150251-add]//

//
// when enable RapidStart , need set sate AFter G3 as S5 state
//
      grayoutif
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdRapidStartSupported)
//[-end-130812-IB05670190-modify]//
        ideqval SystemConfig.EnableRapidStart == 1
        OR
#endif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid   = SystemConfig.StateAfterG3,
          prompt  = STRING_TOKEN(STR_STATE_AFTER_G3_STRING),
          help    = STRING_TOKEN(STR_STATE_AFTER_G3_HELP),
          option text = STRING_TOKEN(STR_S0_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_S5_TEXT), value = 1, flags = 0;
          option text = STRING_TOKEN(STR_LAST_STATE_TEXT), value = 2, flags = 0;
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
//[-start-120331-IB05300303-modify]//
          varid   = SystemConfig.BoardCapability,
//[-end-120331-IB05300303-modify]//
          prompt  = STRING_TOKEN(STR_BOARD_CAP_STRING),
          help    = STRING_TOKEN(STR_BOARD_CAP_CTRL_HELP),
          option text = STRING_TOKEN(STR_SUS_PWR_DN_ACK_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_DEEP_SX_TEXT), value = 1, flags = 0;
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
//[-start-120331-IB05300303-modify]//
        ideqval SystemConfig.BoardCapability == 0;
//[-end-120331-IB05300303-modify]//
        oneof
          varid   = SystemConfig.DeepSlpSx,
          prompt  = STRING_TOKEN(STR_DEEP_SLEEP_STRING),
          help    = STRING_TOKEN(STR_DEEP_SLEEP_HELP),
          option text = STRING_TOKEN(STR_DEEPSLP_DIS_TEXT), value = 0, flags = DEFAULT;
//[-start-130724-IB05160474-modify]//
          option text = STRING_TOKEN(STR_DEEPSLP_EN_S5_TEXT), value = 2, flags = 0;
          option text = STRING_TOKEN(STR_DEEPSLP_EN_S4S5_TEXT), value = 4, flags = 0;
//          option text = STRING_TOKEN(STR_DEEPSLP_EN_S3S4S5_TEXT), value = 6, flags = 0;
//[-end-130724-IB05160474-modify]//
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid   = SystemConfig.GpioLockdown,
          prompt  = STRING_TOKEN(STR_GPIO_LOCKDOWN_STRING),
          help    = STRING_TOKEN(STR_GPIO_LOCKDOWN_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid   = SystemConfig.RtcLock,
          prompt  = STRING_TOKEN(STR_RTC_LOCK_STRING),
          help    = STRING_TOKEN(STR_RTC_LOCK_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120629-IB05330352-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
//          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
//#else
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
//#endif
//[-end-120629-IB05330352-modify]//
//[-end-121026-IB06460460-modify]//
        endoneof;
      endif;
      endif;
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1
        AND
        ideqvallist SystemConfig.MeFwImageType == FW_IMAGE_TYPE_1_5MB FW_IMAGE_TYPE_5MB;
        oneof
          varid       = SystemConfig.IFRUpdate,
          questionid  = KEY_IFR_UPDATE,
          prompt      = STRING_TOKEN(STR_IFR_UPDATE_STRING),
          help        = STRING_TOKEN(STR_IFR_UPDATE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0 | INTERACTIVE;
          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT | INTERACTIVE;
        endoneof;
      endif;
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdDdr3lvSupported)
//[-end-130812-IB05670190-modify]//
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.DDR3Voltage,
          questionid = KEY_DDR3LV_OPTION,
          prompt      = STRING_TOKEN(STR_DDR3LV_OPTION_STRING),
          help        = STRING_TOKEN(STR_DDR3LV_OPTION_HELP),
//[-start-120628-IB05330350-modify]//
          option text = STRING_TOKEN(STR_AUTO_TEXT), value = 0, flags = DEFAULT| INTERACTIVE;
//          option text = STRING_TOKEN(STR_DDR3_TEXT), value = 1, flags = 0| INTERACTIVE;
//          option text = STRING_TOKEN(STR_DDR3L_TEXT), value = 2, flags = 0| INTERACTIVE;
//[-end-120628-IB05330350-modify]//
        endoneof;
      endif;
#endif
//[-start-120726-IB06460426-modify]//
//[-start-120713-IB05330359-add]//
//#if FeaturePcdGet(PcdUltFlag)
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.RuntimeDevice3,
          prompt      = STRING_TOKEN(STR_RUNTIMEDEVICE3_OPTION_STRING),
          help        = STRING_TOKEN(STR_RUNTIMEDEVICE3_OPTION_HELP),
//[-start-120809-IB04770241-modify]//
// #if FeaturePcdGet(PcdUltFlag)
//           option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
//           option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
// #else
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
// #endif
//[-end-120809-IB04770241-modify]//
        endoneof;
      endif;
//#endif
//[-end-120713-IB05330359-add]//
//[-end-120726-IB06460426-modify]//

//[-start-121213-IB10540025-add]//
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.RuntimeDevice3 == 0;

          numeric
            varid       = SystemConfig.Rtd3AudioDeviceDelay,
            prompt      = STRING_TOKEN(STR_RTD3_AUDIO_DEVICE_CODEC_DELAY_STRING),
            help        = STRING_TOKEN(STR_RTD3_AUDIO_DEVICE_CODEC_DELAY_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 210,
          endnumeric;

          numeric
            varid       = SystemConfig.Rtd3AdspDeviceDelay,
            prompt      = STRING_TOKEN(STR_RTD3_ADSP_DEVICE_DELAY_STRING),
            help        = STRING_TOKEN(STR_RTD3_ADSP_DEVICE_DELAY_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 210,
          endnumeric;

          numeric
            varid       = SystemConfig.I2c0DeviceDelayTiming,
            prompt      = STRING_TOKEN(STR_RTD3_I2C0_DEVICE_DELAY_STRING),
            help        = STRING_TOKEN(STR_RTD3_I2C0_DEVICE_DELAY_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 100,
          endnumeric;

          numeric
            varid       = SystemConfig.I2c1DeviceDelayTiming,
            prompt      = STRING_TOKEN(STR_RTD3_I2C1_DEVICE_DELAY_STRING),
            help        = STRING_TOKEN(STR_RTD3_I2C1_DEVICE_DELAY_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 100,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.RuntimeDevice3 == 0;
          oneof
            varid       = SystemConfig.PStateCapping,
            prompt      = STRING_TOKEN(STR_RTD3_P_STATE_CAPPING_STRING),
            help        = STRING_TOKEN(STR_RTD3_P_STATE_CAPPING_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),    value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),     value = 1, flags = 0;
          endoneof;
        endif;
      endif;
//[-end-121213-IB10540025-add]//

//[-start-121029-IB06460462-add]//
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.RuntimeDevice3 == 0;
          oneof
            varid       = SystemConfig.Rtd3UsbSpeed1,
            prompt      = STRING_TOKEN(STR_RTD3_USB_PORT1_STRING),
            help        = STRING_TOKEN(STR_RTD3_USB_PORT1_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),    value = 0, flags = 0;
            option text = STRING_TOKEN(STR_HIGH_SPEED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SUPER_SPEED_TEXT), value = 2, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.RuntimeDevice3 == 0;
          oneof
            varid       = SystemConfig.Rtd3UsbSpeed2,
            prompt      = STRING_TOKEN(STR_RTD3_USB_PORT2_STRING),
            help        = STRING_TOKEN(STR_RTD3_USB_PORT2_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),    value = 0, flags = 0;
            option text = STRING_TOKEN(STR_HIGH_SPEED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SUPER_SPEED_TEXT), value = 2, flags = 0;
          endoneof;
        endif;
      endif;
//[-end-121029-IB06460462-add]//

//[-start-121213-IB10540025-add]//
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.RuntimeDevice3 == 0;
          oneof
            varid       = SystemConfig.Rtd3CongigSetting,
            prompt      = STRING_TOKEN(STR_RTD3_CONFIG_ZPODD_STRING),
            help        = STRING_TOKEN(STR_RTD3_CONFIG_ZPODD_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),    value = 0, flags = 0;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),     value = 1, flags = DEFAULT;
          endoneof;
        endif;
      endif;
//[-end-121213-IB10540025-add]//

//[-start-120220-IB03600472-add]//
      grayoutif
        ideqval     SystemConfig.UserAccessLevel == 2
        AND
        ideqval     SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.MaxTOLUD,
          questionid = KEY_MAX_TOLUD_OPTION,
          prompt      = STRING_TOKEN(STR_MAX_TOLUD_OPTION_STRING),
          help        = STRING_TOKEN(STR_MAX_TOLUD_OPTION_HELP),
//[-start-130108-IB03780478-modify]//
//[-start-120727-IB03780455-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdThunderBoltSupported)
//[-end-130812-IB05670190-modify]//
          option text = STRING_TOKEN(STR_DYNAMIC_TEXT), value = 0, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_GB_TEXT), value = 0xC00, flags = DEFAULT| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_25_GB_TEXT), value = 0xB00, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_5_GB_TEXT), value = 0xA00, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_75_GB_TEXT), value = 0x900, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_GB_TEXT), value = 0x800, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_25_GB_TEXT), value = 0x700, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_5_GB_TEXT), value = 0x600, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_75_GB_TEXT), value = 0x500, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_3_GB_TEXT), value = 0x400, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_3_25_GB_TEXT), value = 0x300, flags = 0| INTERACTIVE;
#else
          option text = STRING_TOKEN(STR_DYNAMIC_TEXT), value = 0, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_GB_TEXT), value = 0xC00, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_25_GB_TEXT), value = 0xB00, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_5_GB_TEXT), value = 0xA00, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_1_75_GB_TEXT), value = 0x900, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_GB_TEXT), value = 0x800, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_25_GB_TEXT), value = 0x700, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_5_GB_TEXT), value = 0x600, flags = DEFAULT| INTERACTIVE;
          option text = STRING_TOKEN(STR_2_75_GB_TEXT), value = 0x500, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_3_GB_TEXT), value = 0x400, flags = 0| INTERACTIVE;
          option text = STRING_TOKEN(STR_3_25_GB_TEXT), value = 0x300, flags = 0| INTERACTIVE;
#endif
//[-end-120727-IB03780455-modify]//
//[-end-130108-IB03780478-modify]//
        endoneof;
      endif;
//[-end-120220-IB03600472-add]//
//[-start-120605-IB03600487-add]//
         numeric
           varid       = SystemConfig.SataP0TimeOut,
           prompt      = STRING_TOKEN(STR_SATA_PORT0_TIME_OUT_OPTION_STRING),
           help        = STRING_TOKEN(STR_SATA_PORT0_TIME_OUT_OPTION_HELP),
           minimum     = 0,
           maximum     = 65535,
           step        = 1,
           default     = 0,
         endnumeric;
//[-end-120605-IB03600487-add]//

//[-start-120907-IB07360220-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
//[-start-120910-IB07360221-modify]//
          varid       = SystemConfig.NfcSelection,
//[-end-120910-IB07360221-modify]//
          prompt      = STRING_TOKEN ( STR_NFC_STRING ),
          help        = STRING_TOKEN ( STR_NFC_HELP   ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_NFC_MGP_TEXT  ), value = 1, flags = 0;
          option text = STRING_TOKEN ( STR_NFC_NXP_TEXT  ), value = 2, flags = 0;
      endoneof;
      endif;
//[-end-120907-IB07360220-add]//

//[-start-140521-IB05400527-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.PciMem64DecodeSupport,
          prompt      = STRING_TOKEN (STR_PCI_MEM64_DECODE_STRING),
          help        = STRING_TOKEN (STR_PCI_MEM64_DECODE_HELP),
          option text = STRING_TOKEN (STR_ENABLED_TEXT), value = 1, flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;
//[-end-140521-IB05400527-add]//

//[-start-140512-IB10300110-add]//
#if FeaturePcdGet(PcdH2OWatchDogSupported)
      oneof
          varid       = SystemConfig.BiosWDT,
          prompt      = STRING_TOKEN ( STR_WATCH_DOG_STRING ),
          help        = STRING_TOKEN ( STR_WATCH_DOG_HELP   ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
          option text = STRING_TOKEN ( STR_ENABLE_TEXT ), value = 1, flags = DEFAULT;
      endoneof;
      suppressif
        ideqval SystemConfig.BiosWDT == 0;
      oneof
          varid       = SystemConfig.WDTOpromScan,
          prompt      = STRING_TOKEN ( STR_WATCH_DOG_OPROM_STRING ),
          help        = STRING_TOKEN ( STR_WATCH_DOG_OPROM__HELP   ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLE_TEXT ), value = 1, flags = 0;
      endoneof;
      endif;
      suppressif
        ideqval SystemConfig.BiosWDT == 0;
      oneof
          varid       = SystemConfig.WDTOsLoad,
          prompt      = STRING_TOKEN ( STR_WATCH_DOG_OS_LOAD_STRING ),
          help        = STRING_TOKEN ( STR_WATCH_DOG_OS_LOAD_HELP   ),
          option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ENABLE_TEXT ), value = 1, flags = 0;
      endoneof;
      endif;
#endif
//[-end-140512-IB10300110-add]//


    endform;

    //
    //  Form 0x28: ACPI Table/Feature Control
    //
    form
      formid = 0x28, title = STRING_TOKEN(STR_ACPI_TABLE_STRING);

      subtitle  text = STRING_TOKEN(STR_ACPI_TABLE_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
//[-start-120604-IB06150223-modify]//
        ideqval SystemConfig.ISCTEnable == 1
//[-end-120604-IB06150223-modify]//
        OR
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.FacpRTCS4Wakeup,
        prompt      = STRING_TOKEN(STR_FACP_RTC_S4_STRING),
        help        = STRING_TOKEN(STR_FACP_RTC_S4__HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.IoApicMode,
        prompt      = STRING_TOKEN(STR_IO_APIC_MODE_STRING),
        help        = STRING_TOKEN(STR_IO_APIC_MODE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
      endoneof;
//[-start-130619-IB05160459-modify]//
//[-start-120816-IB05300312-remove]//
      oneof
        varid       = SystemConfig.TCOWatchDog,
        prompt      = STRING_TOKEN(STR_TCO_WATCHDOG_STRING),
        help        = STRING_TOKEN(STR_TCO_WATCHDOG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
      endoneof;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.TCOWatchDog == 0;

        oneof
          varid       = SystemConfig.WatchDogAcpiTable,
          prompt      = STRING_TOKEN(STR_WATCHDOG_ACPITABLE_STRING),
          help        = STRING_TOKEN(STR_WATCHDOG_ACPITABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = 0;
        endoneof;
      endif;

      endif;
//[-end-120816-IB05300312-remove]//
//[-end-130619-IB05160459-modify]//
      endif;
//[-start-120816-IB05330371-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.EnableACPIDebug,
          prompt      = STRING_TOKEN(STR_APCI_DEBUG_ENABLE_STRING),
          help        = STRING_TOKEN(STR_APCI_DEBUG_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
        endoneof;
      endif;
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.EnableACPIDebug == 0;
        label APCI_DEBUG_ADDRESS_LABEL;
      endif;
      endif;
//[-end-120816-IB05330371-add]//

//[-start-121220-IB10540026-add]//
   grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.NativePCIESupport,
        prompt      = STRING_TOKEN(STR_NATIVE_PCIE_STRING),
        help        = STRING_TOKEN(STR_NATIVE_PCIE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
      endoneof;
    endif;
//[-end-121220-IB10540026-add]//

//[-start-120713-IB06460417-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.AcpiVer == 0 1 2;
      oneof
        varid       = SystemConfig.EnableLowPowerS0Cap,
        prompt      = STRING_TOKEN(STR_FACP_LOW_POWER_S0_IDLE_CAP_STRING),
        help        = STRING_TOKEN(STR_FACP_LOW_POWER_S0_IDLE_CAP_HELP),
//[-start-120725-IB05330362-modify]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
#endif
//[-end-120725-IB05330362-modify]//
      endoneof;
      endif;
      endif;
//[-end-120713-IB06460417-add]//
//[-start-121102-IB03780469-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.AcpiVer == 0 1 2
        OR
        ideqvallist SystemConfig.EnableLowPowerS0Cap == 0;
      oneof
        varid       = SystemConfig.PepGfx,
        prompt      = STRING_TOKEN(STR_PEP_GRAPHICS_STRING),
        help        = STRING_TOKEN(STR_PEP_GRAPHICS_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.AcpiVer == 0 1 2
        OR
        ideqvallist SystemConfig.EnableLowPowerS0Cap == 0;
      oneof
        varid       = SystemConfig.PepSata,
        prompt      = STRING_TOKEN(STR_PEP_SATA_STRING),
        help        = STRING_TOKEN(STR_PEP_SATA_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
      endoneof;
      endif;
      endif;
//[-end-121102-IB03780469-add]//

//[-start-121213-IB10540025-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableLowPowerS0Cap == 0;
      oneof
        varid       = SystemConfig.ECLowPowerS0IdleEnable,
        prompt      = STRING_TOKEN(STR_EC_NOTIFICATION_STRING),
        help        = STRING_TOKEN(STR_EC_NOTIFICATION_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
      endoneof;
      endif;
      endif;
//[-end-121213-IB10540025-add]//
    endform;

     //
     //  Form 0x29: Active Management Technology (AMT) Support
     //
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdMe5MbSupported)
//[-end-130812-IB05670190-modify]//
     form
       formid = 0x29, title = STRING_TOKEN(STR_AMT_CONFIG_STRING);

       subtitle  text = STRING_TOKEN(STR_AMT_CONFIG_STRING);
       subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

       grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1;
         oneof
             varid   = SystemConfig.Amt,
             prompt  = STRING_TOKEN(STR_AMT_SUPPORT),
             help    = STRING_TOKEN(STR_AMT_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;
       endif;

      grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1
         OR
         ideqval SystemConfig.Amt == 0;
         oneof
             varid   = SystemConfig.iAmtbxSelectionScreen,
             prompt  = STRING_TOKEN(STR_AMT_MEBX_SELECTION_SCN_PROMPT),
             help    = STRING_TOKEN(STR_AMT_MEBX_SELECTION_SCN_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;

         oneof
             varid   = SystemConfig.HideUnConfigureMeConfirm,
             prompt  = STRING_TOKEN(STR_AMT_HIDE_UNCONFIGURE_ME_PROMPT),
             help    = STRING_TOKEN(STR_AMT_HIDE_UNCONFIGURE_ME_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;

         oneof
             varid   = SystemConfig.MebxDebugMsg,
             prompt  = STRING_TOKEN(STR_MEBX_DEBUG_MSG),
             help    = STRING_TOKEN(STR_MEBX_DEBUG_MSG_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;

         oneof
             varid   = SystemConfig.UnConfigureME,
             prompt  = STRING_TOKEN(STR_UN_CONFIGURE_ME),
             help    = STRING_TOKEN(STR_UN_CONFIGURE_ME_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;

         oneof
             varid   = SystemConfig.AmtbxPasswordWrite,
             prompt  = STRING_TOKEN(STR_AMT_PASSWORD_WRITE),
             help    = STRING_TOKEN(STR_AMT_PASSWORD_W_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;

         oneof
             varid   = SystemConfig.CiraRequest,
             prompt  = STRING_TOKEN(STR_CIRAREQUEST_TRIG),
             help    = STRING_TOKEN(STR_CIRAREQUEST_TRIG_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;

         oneof
             varid   = SystemConfig.AmtUsbConfigure,
             prompt  = STRING_TOKEN(STR_AMT_USB_CONFIGURE_PROMPT),
             help    = STRING_TOKEN(STR_AMT_USB_CONFIGURE_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;

         oneof
             varid   = SystemConfig.FWProgress,
             prompt  = STRING_TOKEN(STR_AMT_PET_PROGRESS_PROMPT),
             help    = STRING_TOKEN(STR_AMT_PET_PROGRESS_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;

         numeric
           varid       = SystemConfig.CiraTimeout,
           prompt      = STRING_TOKEN(STR_AMT_CIRA_TIMER),
           help        = STRING_TOKEN(STR_AMT_CIRA_TIMER_HELP),
           minimum     = 0,
           maximum     = 100,
           step        = 0,
           default     = 0,
         endnumeric;

       endif;

      subtitle
         text = STRING_TOKEN(STR_BLANK_STRING);

      // ASF
      grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1;

         oneof
             varid   = SystemConfig.Asf,
             prompt  = STRING_TOKEN(STR_ASF_SUPPORT),
             help    = STRING_TOKEN(STR_ASF_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;
       endif;

      grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1
         OR
         ideqval SystemConfig.Asf == 0;
         oneof
             varid   = SystemConfig.WatchDog,
             prompt  = STRING_TOKEN(STR_WATCHDOG),
             help    = STRING_TOKEN(STR_WATCHDOG_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;
      endif;

      grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1
         OR
         ideqval SystemConfig.Asf == 0
         OR
         ideqval SystemConfig.WatchDog == 0;

       numeric
         varid       = SystemConfig.WatchDogTimerOs,
         prompt      = STRING_TOKEN(STR_OS_TIMER),
         help        = STRING_TOKEN(STR_OS_TIMER_HELP),
         minimum     = 0,
         maximum     = 100,
         step        = 0,
         default     = 0,
       endnumeric;

       numeric
         varid       = SystemConfig.WatchDogTimerBios,
         prompt      = STRING_TOKEN(STR_BIOS_TIMER),
         help        = STRING_TOKEN(STR_BIOS_TIMER_HELP),
         minimum     = 0,
         maximum     = 100,
         step        = 0,
         default     = 0,
       endnumeric;
      endif;
     endform;
#endif

     //
     //  Form 0x38: Anti thief Technology Support
     //
//[-start-130812-IB05670190-modify]//
 #if FeaturePcdGet(PcdAntiTheftSupported)
//[-end-130812-IB05670190-modify]//
     form
       formid = 0x38, title = STRING_TOKEN(STR_AT_CONFIG_STRING);
       subtitle  text = STRING_TOKEN(STR_AT_CONFIG_STRING);
       subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
       grayoutif
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1;
      suppressif
         ideqvallist SystemConfig.AtState == 1 2 3;
         oneof
             varid   = SystemConfig.AtConfig,
             prompt  = STRING_TOKEN(STR_AT_SUPPORT),
             help    = STRING_TOKEN(STR_AT_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
         endoneof;
       endif;
       endif;
//[-start-120917-IB06150246-remove]//
//      suppressif
//         ideqval SystemConfig.AtConfig == 0;
//      numeric
//        varid       = SystemConfig.AtRecoveryAttempt,
//        prompt      = STRING_TOKEN(STR_AT_RECOVERY_ATTEMPT),
//        help        = STRING_TOKEN(STR_AT_RECOVERY_ATTEMPT_HELP),
//        minimum     = 1,
//        maximum     = 16,
//        step        = 1,
//        default     = 3,
//      endnumeric;
//      endif;
//[-end-120917-IB06150246-remove]//
      suppressif
        ideqval SystemConfig.AtConfig == 0;
      grayoutif
          ideqvallist SystemConfig.AtState == 0 2 3
          OR
         ideqval SystemConfig.UserAccessLevel == 2
         AND
         ideqval SystemConfig.SetUserPass == 1;
         oneof
             varid   = SystemConfig.AtEnterSuspendState,
             prompt  = STRING_TOKEN(STR_AT_SUSPENDSTATE),
             help    = STRING_TOKEN(STR_AT_SUSPENDSTATE_HELP),
             option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
             option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
         endoneof;
       endif;
       endif;
//[-start-120829-IB04320199-add]//
      //
      // PBA support option
      //
      suppressif
        ideqval SystemConfig.AtConfig == 0;
      grayoutif
        ideqvallist SystemConfig.AtState == 0 2 3
        OR
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid   = SystemConfig.AtPBASupport,
          prompt  = STRING_TOKEN(STR_AT_PBA_SUPPORT),
          help    = STRING_TOKEN(STR_AT_PBA_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
        endoneof;
      endif;
      endif;
//[-end-120829-IB04320199-add]//
     endform;
#endif
  form formid = 0x30,

    title   = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIE_CONFIG_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PchPcieClockGating,
        prompt   = STRING_TOKEN(STR_PCIE_CLOCK_GATINT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CLOCK_GATINT_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
//        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PchDmiAspm,
        prompt   = STRING_TOKEN(STR_PCH_DMI_LINK_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_PCH_DMI_LINK_ASPM_HELP),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
//[-start-120210-IB04320187-modify]//
        option text = STRING_TOKEN ( STR_ENABLED_TEXT ), value = 1, flags = DEFAULT;
//[-end-120210-IB04320187-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PchDmiExtSync,
        prompt   = STRING_TOKEN(STR_DMI_EXTENDED_SYNCH_CONTROL),
        help     = STRING_TOKEN(STR_DMI_EXTENDED_SYNCH_CONTROL_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
      endoneof;
    endif;
    suppressif
      ideqval SystemConfig.Lan == 0;
    grayoutif  TRUE;
      text
        help   = STRING_TOKEN(STR_BLANK_STRING),
        text   = STRING_TOKEN(STR_PCIE_PORT_ASSIGNED_TO_LAN),
        text   = STRING_TOKEN(STR_PCIE_PORT_ASSIGNED_TO_LAN2),
        flags  = 0,
        key    = 0;
    endif;
    endif;

    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
    grayoutif
//[-start-130709-IB05400426-add]//
      ideqval SystemConfig.TbtDevice == 1
      OR
//[-end-130709-IB05400426-add]//
      ideqval SystemConfig.GbePeiEPortSelect == 0
      AND
      ideqval SystemConfig.Lan == 1;
    goto 0x300,
         prompt = STRING_TOKEN(STR_PCIERP1_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP1_OPTIONS_FORM_HELP);
    endif;

    suppressif
//[-start-130709-IB05400426-add]//
      ideqval SystemConfig.TbtDevice == 2
      OR
      ideqvallist SystemConfig.PcieRpStrap0 == 1 2 3
      OR
//[-end-130709-IB05400426-add]//
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 1
      AND
      ideqval SystemConfig.Lan == 1;
    goto 0x301,
         prompt = STRING_TOKEN(STR_PCIERP2_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP2_OPTIONS_FORM_HELP);

    endif;

    suppressif
//[-start-130709-IB05400426-add]//
      ideqval SystemConfig.TbtDevice == 3
      OR
      ideqval SystemConfig.PcieRpStrap0 == 3
      OR
//[-end-130709-IB05400426-add]//
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 2
      AND
      ideqval SystemConfig.Lan == 1;
    goto 0x302,
         prompt = STRING_TOKEN(STR_PCIERP3_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP3_OPTIONS_FORM_HELP);
    endif;

    suppressif
//[-start-130709-IB05400426-modify]//
      ideqval SystemConfig.TbtDevice == 4
      OR
      ideqvallist SystemConfig.PcieRpStrap0 == 2 3
      OR
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 3
      AND
      ideqval SystemConfig.Lan == 1;
//[-end-130709-IB05400426-modify]//
    goto 0x303,
         prompt = STRING_TOKEN(STR_PCIERP4_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP4_OPTIONS_FORM_HELP);
    endif;

//[-start-130709-IB05400426-modify]//
    suppressif
      ideqval SystemConfig.TbtDevice == 5
      OR
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 4
      AND
      ideqval SystemConfig.Lan == 1;
    goto 0x304,
         prompt = STRING_TOKEN(STR_PCIERP5_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP5_OPTIONS_FORM_HELP);
    endif;
//[-end-130709-IB05400426-modify]//

    suppressif
//[-start-130709-IB05400426-modify]//
      ideqval SystemConfig.TbtDevice == 6
      OR
      ideqvallist SystemConfig.PcieRpStrap1 == 1 2 3
      OR
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 5
      AND
      ideqval SystemConfig.Lan == 1;
//[-end-130709-IB05400426-modify]//
    goto 0x305,
         prompt = STRING_TOKEN(STR_PCIERP6_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP6_OPTIONS_FORM_HELP);
    endif;
//[-start-120725-IB05330362-add]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if !FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
//[-end-120725-IB05330362-add]//
    suppressif
//[-start-130709-IB05400426-modify]//
      ideqval SystemConfig.TbtDevice == 7
      OR
      ideqval SystemConfig.PcieRpStrap1 == 3
      OR
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 6
      AND
      ideqval SystemConfig.Lan == 1;
//[-end-130709-IB05400426-modify]//
    goto 0x306,
         prompt = STRING_TOKEN(STR_PCIERP7_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP7_OPTIONS_FORM_HELP);
    endif;

    suppressif
//[-start-130709-IB05400426-modify]//
      ideqval SystemConfig.TbtDevice == 8
      OR
      ideqvallist SystemConfig.PcieRpStrap1 == 2 3
      OR
      ideqval SystemConfig.PcieRootPortEn0 == 0
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect ==0 7
      AND
      ideqval SystemConfig.Lan == 1;
//[-end-130709-IB05400426-modify]//
    goto 0x307,
         prompt = STRING_TOKEN(STR_PCIERP8_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIERP8_OPTIONS_FORM_HELP);
    endif;
//[-start-120725-IB05330362-add]//
#endif
//[-end-120725-IB05330362-add]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdThunderBoltSupported)
//[-end-130812-IB05670190-modify]//
//[-start-130709-IB05400426-modify]//
//    suppressif
//      ideqval SystemConfig.PcieRootPortEn0 == 0
//      OR
//      ideqvallist SystemConfig.GbePeiEPortSelect ==0 4
//      AND
//      ideqval SystemConfig.Lan == 1;
    goto 0x308,
         prompt = STRING_TOKEN(STR_TBT_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_TBT_OPTIONS_FORM_HELP);
//    endif;
//[-end-130709-IB05400426-modify]//
#endif
  endform;

    // my homework
    //  
    //  Form 0x31: Test Configuration
    //
    form
      formid = 0x31, title = STRING_TOKEN(STR_TEST_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_TEST_CONFIG_STRING);

      subtitle
        text = STRING_TOKEN(STR_BLANK_STRING);
      
      suppressif
        ideqval SystemConfig.SuppressBtn == 1;
      oneof
        varid       = SystemConfig.SuppressBtn,
        prompt      = STRING_TOKEN(STR_SUPPRESS_STRING),
        help        = STRING_TOKEN(STR_SUPPRESS_HELP),
        option text = STRING_TOKEN(STR_SUPPRESS_OFF_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_SUPPRESS_ON_TEXT),  value = 1, flags = 0;
      endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.GrayOutBtn == 1;
      oneof
        varid       = SystemConfig.GrayOutBtn,
        prompt      = STRING_TOKEN(STR_GRAYOUT_STRING),
        help        = STRING_TOKEN(STR_GRAYOUT_HELP),
        option text = STRING_TOKEN(STR_GRAYOUT_OFF_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_GRAYOUT_ON_TEXT),  value = 1, flags = 0;
      endoneof;
      endif;

      oneof
        varid       = SystemConfig.CallBackBtn,
        questionid  = KEY_TEST_CALLBACK_SET,
        prompt      = STRING_TOKEN(STR_CALLBACK_STRING),
        help        = STRING_TOKEN(STR_CALLBACK_HELP),
        option text = STRING_TOKEN(STR_CALLBACK_OFF_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_CALLBACK_ON_TEXT),  value = 1, flags = INTERACTIVE;
      endoneof;

    endform;

  form formid = 0x300,

    title   = STRING_TOKEN(STR_PCIERP1_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP1_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn0,
        prompt   = STRING_TOKEN(STR_PCIERP1_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn0 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm0,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn0 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortURR0,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER0,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER0,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER0,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO0,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE0,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE0,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE0,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt0,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci0,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
//[-start-130709-IB05400426-modify]//
////[-start-130513-IB10300037-modify]//
//#if FeaturePcdGet(PcdThunderBoltSupported)
//      TRUE;
//#else
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//#endif
////[-end-130513-IB10300037-modify]//
    suppressif
      ideqval SystemConfig.PcieRootPortEn0 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug0,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
////[-start-130513-IB10300037-modify]//
//#if FeaturePcdGet(PcdThunderBoltSupported)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
//        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
//#else
//[-start-130307-IB03780481-modify]//
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0;
//[-end-130307-IB03780481-modify]//
//#endif
////[-end-130513-IB10300037-modify]//
//[-end-130709-IB05400426-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed0,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= 0;
//        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= DEFAULT;
//        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0;
//#else
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;
    endif;
    endif;


  endform;// end of form 0x300


  form formid = 0x301,

    title   = STRING_TOKEN(STR_PCIERP2_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP2_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn1,
        prompt   = STRING_TOKEN(STR_PCIERP2_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn1 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm1,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR1,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER1,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER1,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER1,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO1,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE1,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE1,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE1,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt1,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci1,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn1 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug1,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed1,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x301


  form formid = 0x302,

    title   = STRING_TOKEN(STR_PCIERP3_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP3_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn2,
        prompt   = STRING_TOKEN(STR_PCIERP3_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn2 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm2,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR2,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER2,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER2,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER2,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO2,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE2,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE2,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE2,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt2,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci2,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn2 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug2,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed2,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x302

  form formid = 0x303,

    title   = STRING_TOKEN(STR_PCIERP4_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP4_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn3,
        prompt   = STRING_TOKEN(STR_PCIERP4_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn3 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm3,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR3,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER3,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER3,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER3,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO3,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE3,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE3,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE3,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt3,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci3,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
     endif;
     endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn3 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug3,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed3,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;

  endform;// end of form 0x303


  form formid = 0x304,

    title   = STRING_TOKEN(STR_PCIERP5_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP5_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn4,
        prompt   = STRING_TOKEN(STR_PCIERP5_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn4 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm4,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR4,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER4,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER4,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER4,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO4,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE4,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE4,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE4,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt4,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci4,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
     endif;
     endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-130709-IB05400426-modify]//
//[-start-130513-IB10300037-modify]//
//#if FeaturePcdGet(PcdThunderBoltSupported)
//      TRUE;
//#else
      ideqval SystemConfig.PcieRootPortEn4 == 0;
//#endif
////[-end-130513-IB10300037-modify]//
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug4,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
////[-start-130513-IB10300037-modify]//
//#if FeaturePcdGet(PcdThunderBoltSupported)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= 0;
//        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = DEFAULT ;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
//#endif
////[-end-130513-IB10300037-modify]//
//[-end-130709-IB05400426-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed4,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x304


  form formid = 0x305,

    title   = STRING_TOKEN(STR_PCIERP6_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP6_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn5,
        prompt   = STRING_TOKEN(STR_PCIERP6_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn5 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm5,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
//[-start-121026-IB06460460-modify]//
//[-start-120725-IB05330362-modify]//
//#if FeaturePcdGet(PcdUltFlag)
//        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
//        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
//        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
//        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
//        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=0;
//#else
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
//#endif
//[-end-120725-IB05330362-modify]//
//[-end-121026-IB06460460-modify]//
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR5,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER5,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER5,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER5,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO5,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE5,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE5,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE5,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt5,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci5,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
     endif;
     endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn5 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug5,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed5,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x305


  form formid = 0x306,

    title   = STRING_TOKEN(STR_PCIERP7_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP7_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn6,
        prompt   = STRING_TOKEN(STR_PCIERP7_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn6 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm6,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR6,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER6,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER6,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER6,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO6,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE6,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE6,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE6,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt6,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci6,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
     endif;
     endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn6 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug6,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed6,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x306


  form formid = 0x307,

    title   = STRING_TOKEN(STR_PCIERP8_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_PCIERP8_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid    = SystemConfig.PcieRootPortEn7,
        prompt   = STRING_TOKEN(STR_PCIERP8_PROMPT),
        help     = STRING_TOKEN(STR_PCIERP_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn7 == 0;
      oneof
        varid =  SystemConfig.PcieRootPortAspm7,
        prompt   = STRING_TOKEN(STR_AUTOMATIC_ASPM_PROMPT),
        help     = STRING_TOKEN(STR_AUTOMATIC_ASPM_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_L0S_TEXT),      value=1, flags=0;
        option text = STRING_TOKEN(STR_L1_TEXT),       value=2, flags=0;
        option text = STRING_TOKEN(STR_L0SL1_TEXT),    value=3, flags=0;
        option text = STRING_TOKEN(STR_AUTO_TEXT),     value=4, flags=DEFAULT;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortURR7,
        prompt   = STRING_TOKEN(STR_PCIE_URR_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_URR_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortFER7,
        prompt   = STRING_TOKEN(STR_PCIE_FER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_FER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortNFER7,
        prompt   = STRING_TOKEN(STR_PCIE_NFER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_NFER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCER7,
        prompt   = STRING_TOKEN(STR_PCIE_CER_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CER_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortCTO7,
        prompt   = STRING_TOKEN(STR_PCIE_CTO_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_CTO_HELP),
        option text = STRING_TOKEN(STR_DEFAULT_TEXT),    value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_16_55_MS_TEXT),   value=3, flags= 0;
        option text = STRING_TOKEN(STR_65_210_MS_TEXT),  value=4, flags= 0;
        option text = STRING_TOKEN(STR_260_900_MS_TEXT), value=5, flags= 0;
        option text = STRING_TOKEN(STR_1_3P5_S_TEXT),    value=6, flags= 0;
        option text = STRING_TOKEN(STR_DISABLED_TEXT),   value=9, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSEFE7,
        prompt   = STRING_TOKEN(STR_PCIE_SEFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SEFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSENFE7,
        prompt   = STRING_TOKEN(STR_PCIE_SENFE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SENFE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortSECE7,
        prompt   = STRING_TOKEN(STR_PCIE_SECE_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_SECE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeInt7,
        prompt   = STRING_TOKEN(STR_PCIE_PME_INT_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_INT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= 0;
      endoneof;

      oneof
        varid    = SystemConfig.PcieRootPortPmeSci7,
        prompt   = STRING_TOKEN(STR_PCIE_PME_SCI_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_PME_SCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags=0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1, flags= DEFAULT;
      endoneof;
     endif;
     endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.PcieRootPortEn7 == 0;
      oneof
        varid    = SystemConfig.PcieRootPortHotPlug7,
        prompt   = STRING_TOKEN(STR_PCIE_HOT_PLUG_PROMPT),
        help     = STRING_TOKEN(STR_PCIE_HOT_PLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_TEXT), value=1,  flags = 0 ;
      endoneof;

      oneof
        varid    = SystemConfig.PcieSpeed7,
        prompt   = STRING_TOKEN(STR_PCIE_SPEED_STRING),
        help     = STRING_TOKEN(STR_PCIE_SPEED_HELP),
        option text = STRING_TOKEN(STR_AUTO_TEXT),   value=0, flags= DEFAULT;
        option text = STRING_TOKEN(STR_GEN_1_TEXT),  value=1, flags= 0;
        option text = STRING_TOKEN(STR_GEN_2_TEXT),  value=2,  flags = 0 ;
      endoneof;
    endif;
    endif;


  endform;// end of form 0x307

//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdThunderBoltSupported)
//[-end-130812-IB05670190-modify]//
  form formid = 0x308,

    title   = STRING_TOKEN(STR_TBT_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_TBT_OPTIONS_FORM_TITLE);
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

//[-start-130709-IB05400426-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.TbtDevice,
      prompt      = STRING_TOKEN(STR_TBT_ROOT_PORT_PROMPT),
      help        = STRING_TOKEN(STR_TBT_ROOT_PORT_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = DEFAULT;
    suppressif
      ideqval SystemConfig.GbePeiEPortSelect == 0;
      option text = STRING_TOKEN(STR_PCIERP1_OPTIONS),    value = 1, flags = 0;
    endif
    suppressif
      ideqvallist SystemConfig.PcieRpStrap0 == 1 2 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 1;
      option text = STRING_TOKEN(STR_PCIERP2_OPTIONS),    value = 2, flags = 0;
    endif
    suppressif
      ideqval SystemConfig.PcieRpStrap0 == 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 2;
      option text = STRING_TOKEN(STR_PCIERP3_OPTIONS),    value = 3, flags = 0;
    endif
    suppressif
      ideqvallist SystemConfig.PcieRpStrap0 == 2 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 3;
      option text = STRING_TOKEN(STR_PCIERP4_OPTIONS),    value = 4, flags = 0;
    endif
    suppressif
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 4;
      option text = STRING_TOKEN(STR_PCIERP5_OPTIONS),    value = 5, flags = 0;
    endif
    suppressif
      ideqvallist SystemConfig.PcieRpStrap1 == 1 2 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 5;
      option text = STRING_TOKEN(STR_PCIERP6_OPTIONS),    value = 6, flags = 0;
    endif
    suppressif
      ideqval SystemConfig.PcieRpStrap1 == 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 6;
      option text = STRING_TOKEN(STR_PCIERP7_OPTIONS),    value = 7, flags = 0;
    endif
    suppressif
      ideqvallist SystemConfig.PcieRpStrap1 == 2 3
      OR
      ideqvallist SystemConfig.GbePeiEPortSelect == 0 7;
      option text = STRING_TOKEN(STR_PCIERP8_OPTIONS),    value = 8, flags = 0;
    endif
    endoneof;
    endif;

    subtitle text = STRING_TOKEN (STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.TbtDevice == 0;
    oneof
      varid       = SystemConfig.TbtChip,
      prompt      = STRING_TOKEN(STR_TBT_CHIP_PROMPT),
      help        = STRING_TOKEN(STR_TBT_CHIP_HELP),
      option text = STRING_TOKEN(STR_TBT_CHIP1_OPTIONS),    value = 0, flags = 0;
      option text = STRING_TOKEN(STR_TBT_CHIP2_OPTIONS),    value = 1, flags = DEFAULT;
    endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.TbtDevice == 0;
    oneof
      varid       = SystemConfig.TbtHotPlug,
      prompt      = STRING_TOKEN(STR_TBT_HOT_PLUG_PROMPT),
      help        = STRING_TOKEN(STR_TBT_HOT_PLUG_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = 0;
    endoneof;
    endif;
    endif;
//[-end-130709-IB05400426-add]//
//[-start-130307-IB03780481-modify]//
//[-start-130124-IB04770265-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0;
//[-end-130709-IB05400426-add]//
    oneof
      varid       = SystemConfig.TbtWakeFromDevice,
      questionid  = KEY_TBT_SX_OPTION,
      prompt      = STRING_TOKEN(STR_TBT_WAKE_FROM_DEV_PROMPT),
      help        = STRING_TOKEN(STR_TBT_WAKE_FROM_DEV_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT | INTERACTIVE;
    endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;
//[-end-130124-IB04770265-add]//
//[-end-130307-IB03780481-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0;
//[-end-130709-IB05400426-add]//
    oneof
      varid       = SystemConfig.TBTSmiEnable,
      prompt      = STRING_TOKEN(STR_TBT_SMI_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_TBT_SMI_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
    endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-130709-IB05400426-add]//
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0
      OR
//[-end-130709-IB05400426-add]//
      ideqval SystemConfig.TBTSmiEnable == 0;
      oneof
        varid    = SystemConfig.TBTCacheLineSize,
        prompt   = STRING_TOKEN(STR_TBT_CLS_PROMPT),
        help     = STRING_TOKEN(STR_TBT_CLS_HELP),
        option text = STRING_TOKEN(STR_CACHE_LINE_SIZE_10_TEXT), value = 0x10, flags = DEFAULT;
        option text = STRING_TOKEN(STR_CACHE_LINE_SIZE_20_TEXT), value = 0x20, flags = 0;
      endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;

//[-start-130131-IB03780481-modify]//
//[-start-120417-IB03780438-add]//
//[-start-130124-IB04770265-modify]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0;
//[-end-130709-IB05400426-add]//
    oneof
      varid       = SystemConfig.TBTSecurityLevel,
      questionid  = KEY_TBT_SECURITY_OPTION,
      prompt      = STRING_TOKEN (STR_TBT_SECURITY_LEVEL_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RR_SECURITY_LEVEL_HELP),
      option text = STRING_TOKEN (STR_TBT_NO_SECURITY_TEXT),        value = 0, flags = INTERACTIVE;
      option text = STRING_TOKEN (STR_TBT_USER_AUTHORIZATION_TEXT), value = 1, flags = DEFAULT | INTERACTIVE;
      option text = STRING_TOKEN (STR_TBT_DISPLAYPORT_ONLY_TEXT),   value = 3, flags = INTERACTIVE;
    endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;
//[-end-130124-IB04770265-modify]//

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0;
//[-end-130709-IB05400426-add]//
    oneof
      varid       = SystemConfig.TBTGpio3,
      prompt      = STRING_TOKEN (STR_TBT_GPIO3_PROMPT),
      help        = STRING_TOKEN (STR_TBT_GPIO3_HELP),
      option text = STRING_TOKEN (STR_TBT_GPIO3_ZERO),  value = 0, flags = DEFAULT;
      option text = STRING_TOKEN (STR_TBT_GPIO3_ONE),   value = 1, flags = 0;
    endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;
//[-end-120417-IB03780438-add]//
//[-end-130131-IB03780481-modify]//

//[-start-130124-IB04770265-remove]//
// //[-start-120507-IB03780437-add]//
//     grayoutif
//       ideqval SystemConfig.UserAccessLevel == 2
//       AND
//       ideqval SystemConfig.SetUserPass == 1;
//     numeric
//       varid       = SystemConfig.TbtSxWakeTimer,
//       prompt      = STRING_TOKEN (STR_TBT_SX_WAKE_TIMER_PROMPT),
//       help        = STRING_TOKEN (STR_TBT_SX_WAKE_TIMER_HELP),
//       minimum     = 0,
//       maximum     = 99,
//       step        = 1,
//       default     = 2,
//     endnumeric;
//     endif;
// //[-end-120507-IB03780437-add]//
//[-end-130124-IB04770265-remove]//

//[-start-120524-IB03780444-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0;
//[-end-130709-IB05400426-add]//
    oneof
      varid       = SystemConfig.TbtWorkaround,
      prompt      = STRING_TOKEN (STR_TBT_WORKAROUND_PROMPT),
      help        = STRING_TOKEN (STR_TBT_WORKAROUND_HELP),
      option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
      option text = STRING_TOKEN (STR_ENABLED_TEXT),  value = 1, flags = 0;
    endoneof;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;
//[-end-120524-IB03780444-add]//
//[-start-120727-IB03780455-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0;
//[-end-130709-IB05400426-add]//
    numeric
      varid       = SystemConfig.ReserveMemoryPerSlot,
      prompt      = STRING_TOKEN (STR_TBT_RSV_MEM_PER_SLOT_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSV_MEM_PER_SLOT_HELP),
      minimum     = 0,
      maximum     = 512,
      step        = 1,
      default     = 32,
    endnumeric;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0;
//[-end-130709-IB05400426-add]//
    numeric
      varid       = SystemConfig.ReservePMemoryPerSlot,
      prompt      = STRING_TOKEN (STR_TBT_RSV_PMEM_PER_SLOT_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSV_PMEM_PER_SLOT_HELP),
      minimum     = 0,
      maximum     = 512,
      step        = 1,
      default     = 32,
    endnumeric;
//[-start-130709-IB05400426-add]//
    endif;
//[-end-130709-IB05400426-add]//
    endif;

//[-start-130124-IB04770265-remove]//
//    grayoutif
//      ideqval SystemConfig.UserAccessLevel == 2
//      AND
//      ideqval SystemConfig.SetUserPass == 1;
//    numeric
//      varid       = SystemConfig.ReserveIOPerSlot,
//      prompt      = STRING_TOKEN (STR_TBT_RSV_IO_PER_SLOT_PROMPT),
//      help        = STRING_TOKEN (STR_TBT_RSV_IO_PER_SLOT_HELP),
//      minimum     = 0,
//      maximum     = 64,
//      step        = 1,
//      default     = 4,
//    endnumeric;
//    endif;
//[-end-130124-IB04770265-remove]//
//[-end-120727-IB03780455-add]//

//[-start-130206-IB03780481-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
//[-start-130709-IB05400426-add]//
    suppressif
      ideqval SystemConfig.TbtDevice == 0
      OR
      ideqval SystemConfig.TbtHotPlug == 0;
//[-end-130709-IB05400426-add]//
    numeric
      varid       = SystemConfig.TbtRsvdBus,
      prompt      = STRING_TOKEN (STR_TBT_RSVD_BUS_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSVD_BUS_HELP),
      minimum     = 0,
      maximum     = 250,
      step        = 1,
      default     = 106,
    endnumeric;
    numeric
      varid       = SystemConfig.TbtRsvdMem,
      prompt      = STRING_TOKEN (STR_TBT_RSVD_MEM_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSVD_MEM_HELP),
      minimum     = 0,
      maximum     = 4096,
      step        = 1,
      default     = 737,
    endnumeric;
    numeric
      varid       = SystemConfig.TbtRsvdPmem,
      prompt      = STRING_TOKEN (STR_TBT_RSVD_PMEM_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSVD_PMEM_HELP),
      minimum     = 0,
      maximum     = 4096,
      step        = 1,
      default     = 1184,
    endnumeric;
    numeric
      varid       = SystemConfig.TbtRsvdMemAlign,
      prompt      = STRING_TOKEN (STR_TBT_RSVD_MEM_ALIGN_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSVD_MEM_ALIGN_HELP),
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 25,
    endnumeric;
    numeric
      varid       = SystemConfig.TbtRsvdPmemAlign,
      prompt      = STRING_TOKEN (STR_TBT_RSVD_PMEM_ALIGN_PROMPT),
      help        = STRING_TOKEN (STR_TBT_RSVD_PMEM_ALIGN_HELP),
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28,
    endnumeric;
    endif;
//[-end-130206-IB03780481-add]//

    endif;
  endform;// end of form 0x308
#endif

//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdH2OConsoleRedirectionSupported)
//[-end-130812-IB05670190-modify]//
    //
    //  Form 0x36: Console Redirection
    //
//[-start-131202-IB09740048-modify]//
    form
      formid = 0x36, title = STRING_TOKEN(STR_TBT_OPTIONS_FORM_TITLE);

      subtitle  text = STRING_TOKEN(STR_TERMINAL_SETUP_TITLE);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);
//[-start-130708-IB09740033-modify]//
      oneof
          varid       = SystemConfig.CREnable,
          prompt      = STRING_TOKEN(STR_CR_CONSOLE_REDIRECTION),
          help        = STRING_TOKEN(STR_CR_CONSOLE_REDIRECTION_HELP),
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
      endoneof;

      suppressif
        ideqval SystemConfig.CREnable == 0;
      grayoutif ideqval SystemConfig.UserAccessLevel == 2
                AND
                ideqval SystemConfig.SetUserPass == 1;

        /*oneof
            varid       = SystemConfig.CRSerialPort,
            prompt      = STRING_TOKEN(STR_CR_SERIAL_PORT),
            help        = STRING_TOKEN(STR_CR_SERIAL_PORT_HELP),
            option text = STRING_TOKEN(STR_CR_SERIAL_PORTA), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_CR_SERIAL_PORTB), value = 1, flags = 0;
            option text = STRING_TOKEN(STR_CR_SERIAL_PORTC), value = 2, flags = 0;
            option text = STRING_TOKEN(STR_CR_SERIAL_PORTD), value = 3, flags = 0;
            option text = STRING_TOKEN(STR_CR_PCI_ONLY),     value = 128, flags = 0;
            option text = STRING_TOKEN(STR_CR_SERIAL_ALL),   value = 255, flags = 0;
        endoneof;*/

        oneof
            varid       = CrConfig.GlobalTerminalType,
            questionid  = KEY_CONSOLE_REDIRECTION_1,
            prompt      = STRING_TOKEN(STR_CR_TERMINAL_TYPE),
            help        = STRING_TOKEN(STR_CR_TERMINAL_TYPE_HELP),
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VT100),  value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VT100P), value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VTUTF8), value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_ANSI),   value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.GlobalBaudRate,
            questionid  = KEY_CONSOLE_REDIRECTION_2,
            prompt      = STRING_TOKEN(STR_CR_BAUD_RATE),
            help        = STRING_TOKEN(STR_CR_BAUD_RATE_HELP),
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_115200), value = 7, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_57600),  value = 6, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_38400),  value = 5, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_19200),  value = 4, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_9600),   value = 3, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_4800),   value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_2400),   value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_1200),   value = 0, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.GlobalDataBits,
            questionid  = KEY_CONSOLE_REDIRECTION_3,
            prompt      = STRING_TOKEN(STR_CR_DATA_BIT),
            help        = STRING_TOKEN(STR_CR_DATA_BIT_HELP),
            option text = STRING_TOKEN(STR_CR_DATA_BIT_7),  value = 7, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_DATA_BIT_8),  value = 8, flags = INTERACTIVE | DEFAULT;
        endoneof;

        oneof
            varid       = CrConfig.GlobalParity,
            questionid  = KEY_CONSOLE_REDIRECTION_4,
            prompt      = STRING_TOKEN(STR_CR_PARITY),
            help        = STRING_TOKEN(STR_CR_PARITY_HELP),
            option text = STRING_TOKEN(STR_CR_PARITY_NONE), value = 1, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_PARITY_EVEN), value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_PARITY_ODD),  value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.GlobalStopBits,
            questionid  = KEY_CONSOLE_REDIRECTION_5,
            prompt      = STRING_TOKEN(STR_CR_STOP_BIT),
            help        = STRING_TOKEN(STR_CR_STOP_BIT_HELP),
            option text = STRING_TOKEN(STR_CR_STOP_BIT_1),  value = 1, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_STOP_BIT_2),  value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.GlobalFlowControl,
            questionid  = KEY_CONSOLE_REDIRECTION_6,
            prompt      = STRING_TOKEN(STR_CR_FLOW_CONTROL),
            help        = STRING_TOKEN(STR_CR_FLOW_CONTROL_HELP),
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_NONE),     value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_HARDWARE), value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_SOFTWARE), value = 2, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = SystemConfig.CRInfoWaitTime,
            prompt      = STRING_TOKEN(STR_CR_LOGO_WAIT_TIME),
            help        = STRING_TOKEN(STR_CR_LOGO_WAIT_TIME_HELP),
            option text = STRING_TOKEN(STR_CR_LOGO_WAIT_0_SECOND), value = 0, flags = 0;
            option text = STRING_TOKEN(STR_CR_LOGO_WAIT_2_SECOND), value = 2, flags = 0;
            option text = STRING_TOKEN(STR_CR_LOGO_WAIT_5_SECOND), value = 5, flags = DEFAULT;
            option text = STRING_TOKEN(STR_CR_LOGO_WAIT_10_SECOND), value = 10, flags = 0;
            option text = STRING_TOKEN(STR_CR_LOGO_WAIT_30_SECOND), value = 30, flags = 0;
        endoneof;

        oneof
            varid       = SystemConfig.CRAfterPost,
            prompt      = STRING_TOKEN(STR_CR_AFTER_POST),
            help        = STRING_TOKEN(STR_CR_AFTER_POST_HELP),
            option text = STRING_TOKEN(STR_YES_TEXT),        value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_NO_TEXT),         value = 0, flags = 0;
        endoneof;

        oneof
            varid       = SystemConfig.CRTextModeResolution,
            prompt      = STRING_TOKEN(STR_CR_TEXT_MODE_RES),
            help        = STRING_TOKEN(STR_CR_TEXT_MODE_RES_HELP),
            option text = STRING_TOKEN(STR_CR_TEXT_MODE_AUTO),        value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_CR_TEXT_MODE_80X25),       value = 1, flags = 0;
            option text = STRING_TOKEN(STR_CR_TEXT_MODE_80X24_DF),    value = 2, flags = 0;
            option text = STRING_TOKEN(STR_CR_TEXT_MODE_80X24_DL),    value = 3, flags = 0;
        endoneof;

        oneof
            varid       = CrConfig.AutoRefresh,
            questionid  = KEY_CONSOLE_REDIRECTION_7,
            prompt      = STRING_TOKEN(STR_CR_AUTO_REFRESH),
            help        = STRING_TOKEN(STR_CR_AUTO_REFRESH_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0,flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1,flags = INTERACTIVE | DEFAULT;
        endoneof;

        oneof
            varid       = CrConfig.FailSaveBaudRate,
            questionid  = KEY_CONSOLE_REDIRECTION_8,
            prompt      = STRING_TOKEN(STR_CR_FAIL_SAFE_BAUDRATE),
            help        = STRING_TOKEN(STR_CR_FAIL_SAFE_BAUDRATE_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0,flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1,flags = INTERACTIVE;
        endoneof;

      endif;
      endif;

      oneof
          varid       = SystemConfig.ACPISpcr,
          prompt      = STRING_TOKEN(STR_SPCR_SUPPORT_STRING),
          help        = STRING_TOKEN(STR_SPCR_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0,flags = DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1,flags = 0;
      endoneof;

      suppressif
        ideqval SystemConfig.CREnable == 0;
      grayoutif ideqval SystemConfig.UserAccessLevel == 2
                AND
                ideqval SystemConfig.SetUserPass == 1;

      label CR_SERIAL_PORT_LABEL;

      endif;
      endif;

    endform;

    form

        formid = CONSOLE_REDIRECTION_FORM_ID, title = STRING_TOKEN(STR_EFI_SETUP_UTILITY_TITLE);

        label CR_SERIAL_DEV_FORM_SUBTITTLE_LABEL;

        oneof
            varid       = CrConfig.CrPortConfig.PortEnable,
            questionid  = KEY_CONSOLE_REDIRECTION_9,
            prompt      = STRING_TOKEN(STR_CR_PORT_ENABLE),
            help        = STRING_TOKEN(STR_BLANK_STRING),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.UseGlobalSetting,
            questionid  = KEY_CONSOLE_REDIRECTION_10,
            prompt      = STRING_TOKEN(STR_CR_USE_GLOBAL_SETTING),
            help        = STRING_TOKEN(STR_BLANK_STRING),
            option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.TerminalType,
            questionid  = KEY_CONSOLE_REDIRECTION_11,
            prompt      = STRING_TOKEN(STR_CR_TERMINAL_TYPE),
            help        = STRING_TOKEN(STR_CR_TERMINAL_TYPE_HELP),
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VT100),  value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VT100P), value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_VTUTF8), value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_TERMINAL_TYPE_ANSI),   value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.BaudRate,
            questionid  = KEY_CONSOLE_REDIRECTION_12,
            prompt      = STRING_TOKEN(STR_CR_BAUD_RATE),
            help        = STRING_TOKEN(STR_CR_BAUD_RATE_HELP),
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_115200), value = 7, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_57600),  value = 6, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_38400),  value = 5, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_19200),  value = 4, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_9600),   value = 3, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_4800),   value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_2400),   value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_BAUD_RATE_1200),   value = 0, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.DataBits,
            questionid  = KEY_CONSOLE_REDIRECTION_13,
            prompt      = STRING_TOKEN(STR_CR_DATA_BIT),
            help        = STRING_TOKEN(STR_CR_DATA_BIT_HELP),
            option text = STRING_TOKEN(STR_CR_DATA_BIT_7),  value = 7, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_DATA_BIT_8),  value = 8, flags = INTERACTIVE | DEFAULT;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.Parity,
            questionid  = KEY_CONSOLE_REDIRECTION_14,
            prompt      = STRING_TOKEN(STR_CR_PARITY),
            help        = STRING_TOKEN(STR_CR_PARITY_HELP),
            option text = STRING_TOKEN(STR_CR_PARITY_NONE), value = 1, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_PARITY_EVEN), value = 2, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_PARITY_ODD),  value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.StopBits,
            questionid  = KEY_CONSOLE_REDIRECTION_15,
            prompt      = STRING_TOKEN(STR_CR_STOP_BIT),
            help        = STRING_TOKEN(STR_CR_STOP_BIT_HELP),
            option text = STRING_TOKEN(STR_CR_STOP_BIT_1),  value = 1, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_STOP_BIT_2),  value = 3, flags = INTERACTIVE;
        endoneof;

        oneof
            varid       = CrConfig.CrPortConfig.FlowControl,
            questionid  = KEY_CONSOLE_REDIRECTION_16,
            prompt      = STRING_TOKEN(STR_CR_FLOW_CONTROL),
            help        = STRING_TOKEN(STR_CR_FLOW_CONTROL_HELP),
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_NONE),     value = 0, flags = INTERACTIVE | DEFAULT;
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_HARDWARE), value = 1, flags = INTERACTIVE;
            option text = STRING_TOKEN(STR_CR_FLOW_CONTROL_SOFTWARE), value = 2, flags = INTERACTIVE;
        endoneof;

   endform;
//[-end-131202-IB09740048-modify]//
#endif

//[-start-121031-IB03780468-modify]//
    //
    //  Form 0x37: Overclocking Performance Menu
    //
    form
      formid = 0x37, title = STRING_TOKEN (STR_OVERCLOCKING_CONFIG_STRING);

      subtitle text = STRING_TOKEN (STR_OVERCLOCKING_CONFIG_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.Overclocking,
          prompt      = STRING_TOKEN (STR_OVERCLOCKING_FEATURE),
          help        = STRING_TOKEN (STR_OVERCLOCKING_FEATURE_HELP),
          flags       = INTERACTIVE,
          option text = STRING_TOKEN (STR_DISABLED_TEXT),  value = 0, flags = DEFAULT;
          option text = STRING_TOKEN (STR_ENABLED_TEXT),  value = 1, flags = 0;
        endoneof;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_PROCESSOR_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.FlexRatioOverride,
            prompt      = STRING_TOKEN (STR_NON_TURBO_FLEX_SUPPORT),
            help        = STRING_TOKEN (STR_NON_TURBO_FLEX_SUPPORT_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_DISABLED_TEXT), value=0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_ENABLED_TEXT), value=1,  flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        (ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1)
        OR
        ideqval SystemConfig.FlexRatioOverride == 0;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          label RATIO_LABEL;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.EnableTurboMode == 0
          OR
          ideqval SystemConfig.OcCapXe == 0;
          oneof
            varid       = SystemConfig.ExtremeEdition,
            prompt      = STRING_TOKEN (STR_EXTREME_EDITION_STRING),
            help        = STRING_TOKEN (STR_EXTREME_EDITION_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_ENABLED_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        (ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1)
        OR
        ideqval SystemConfig.ExtremeEdition == 0;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.EnableTurboMode == 0
          OR
          ideqval SystemConfig.OcCapXe == 0;
          label CORE_RATIO_LIMIT_LABEL;
        endif;
      endif;


      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapIaCore == 0;
          numeric
            varid       = SystemConfig.CoreMaxOcRatio,
            prompt      = STRING_TOKEN (STR_CORE_MAX_OC_RATIO_STRING),
            help        = STRING_TOKEN (STR_CORE_MAX_OC_RATIO_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 80,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapIaCore == 0;
          oneof
            varid       = SystemConfig.CoreVoltageMode,
            prompt      = STRING_TOKEN (STR_CORE_VOLTAGE_MODE_STRING),
            help        = STRING_TOKEN (STR_CORE_VOLTAGE_MODE_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_ADAPTIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_OVERRIDE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapIaCore == 0
          OR
          ideqval SystemConfig.CoreVoltageMode == 1;
          numeric
            varid       = SystemConfig.CoreExtraTurboVoltage,
            prompt      = STRING_TOKEN (STR_CORE_EXTRA_TURBO_VOLTAGE_STRING),
            help        = STRING_TOKEN (STR_CORE_EXTRA_TURBO_VOLTAGE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 1200,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapIaCore == 0
          OR
          ideqval SystemConfig.CoreVoltageMode == 0;
          numeric
            varid       = SystemConfig.CoreVoltageOverride,
            prompt      = STRING_TOKEN (STR_CORE_VOLTAGE_OVERRIDE_STRING),
            help        = STRING_TOKEN (STR_CORE_VOLTAGE_OVERRIDE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 1200,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapIaCore == 0;
          numeric
            varid       = SystemConfig.CoreVoltageOffset,
            prompt      = STRING_TOKEN (STR_CORE_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_CORE_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.CoreVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_CLR_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapClr == 0;
          numeric
            varid       = SystemConfig.ClrMaxOcRatio,
            prompt      = STRING_TOKEN (STR_CLR_MAX_OC_RATIO_STRING),
            help        = STRING_TOKEN (STR_CLR_MAX_OC_RATIO_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 80,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapClr == 0;
          oneof
            varid       = SystemConfig.ClrVoltageMode,
            prompt      = STRING_TOKEN (STR_CLR_VOLTAGE_MODE_STRING),
            help        = STRING_TOKEN (STR_CLR_VOLTAGE_MODE_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_ADAPTIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_OVERRIDE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapClr == 0
          OR
          ideqval SystemConfig.ClrVoltageMode == 1;
          numeric
            varid       = SystemConfig.ClrExtraTurboVoltage,
            prompt      = STRING_TOKEN (STR_CLR_EXTRA_TURBO_VOLTAGE_STRING),
            help        = STRING_TOKEN (STR_CLR_EXTRA_TURBO_VOLTAGE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapClr == 0
          OR
          ideqval SystemConfig.ClrVoltageMode == 0;
          numeric
            varid       = SystemConfig.ClrVoltageOverride,
            prompt      = STRING_TOKEN (STR_CLR_VOLTAGE_OVERRIDE_STRING),
            help        = STRING_TOKEN (STR_CLR_VOLTAGE_OVERRIDE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.OcCapClr == 0;
          numeric
            varid       = SystemConfig.ClrVoltageOffset,
            prompt      = STRING_TOKEN (STR_CLR_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_CLR_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.ClrVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_SVID_FIVR_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.SvidSupport,
            prompt      = STRING_TOKEN (STR_SVID_SUPPORT_STRING),
            help        = STRING_TOKEN (STR_SVID_SUPPORT_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = 0;
            option text = STRING_TOKEN (STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
          endoneof;
        endif;
      endif;

      grayoutif
        (ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1)
        OR
        ideqval SystemConfig.SvidSupport == 0;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.SvidVoltageOverride,
            prompt      = STRING_TOKEN (STR_SVID_VOLTAGE_OVERRIDE_STRING),
            help        = STRING_TOKEN (STR_SVID_VOLTAGE_OVERRIDE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2500,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.FivrFaults,
            prompt      = STRING_TOKEN (STR_FIVR_FAULTS_STRING),
            help        = STRING_TOKEN (STR_FIVR_FAULTS_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = 0;
            option text = STRING_TOKEN (STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
          endoneof;
          oneof
            varid       = SystemConfig.FivrEfficiencyManagement,
            prompt      = STRING_TOKEN (STR_FIVR_EFFICIENCY_MANAGEMENT_STRING),
            help        = STRING_TOKEN (STR_FIVR_EFFICIENCY_MANAGEMENT_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_DISABLED_TEXT), value = 0, flags = 0;
            option text = STRING_TOKEN (STR_ENABLED_TEXT), value = 1, flags = DEFAULT;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_GT_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapGt == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.GtOverclockFreq,
            prompt      = STRING_TOKEN (STR_GT_OVER_CLOCK_FREQ),
            help        = STRING_TOKEN (STR_GT_OVER_CLOCK_FREQ_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 99,
            step        = 1,
            default     = 16,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapGt == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.GtVoltageMode,
            prompt      = STRING_TOKEN (STR_GT_VOLTAGE_MODE_STRING),
            help        = STRING_TOKEN (STR_GT_VOLTAGE_MODE_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_ADAPTIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_OVERRIDE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapGt == 0
          OR
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.GtVoltageMode == 1;
          numeric
            varid       = SystemConfig.GtExtraTurboVoltage,
            prompt      = STRING_TOKEN (STR_GT_EXTRA_TURBO_VOLTAGE_STRING),
            help        = STRING_TOKEN (STR_GT_EXTRA_TURBO_VOLTAGE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 0,
          endnumeric;
          endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapGt == 0
          OR
          ideqval SystemConfig.Overclocking == 0
          OR
          ideqval SystemConfig.GtVoltageMode == 0;
          numeric
            varid       = SystemConfig.GtVoltageOverride,
            prompt      = STRING_TOKEN (STR_GT_VOLTAGE_OVERRIDE_STRING),
            help        = STRING_TOKEN (STR_GT_VOLTAGE_OVERRIDE_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 2000,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapGt == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.GtVoltageOffset,
            prompt      = STRING_TOKEN (STR_GT_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_GT_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.GtVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_UNCORE_IOA_IOD_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapUncore == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.UncoreVoltageOffset,
            prompt      = STRING_TOKEN (STR_UNCORE_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_UNCORE_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.UncoreVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapIoa == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.IoaVoltageOffset,
            prompt      = STRING_TOKEN (STR_IOA_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_IOA_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.IoaVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.OcCapIod == 0
          OR
          ideqval SystemConfig.Overclocking == 0;
          numeric
            varid       = SystemConfig.IodVoltageOffset,
            prompt      = STRING_TOKEN (STR_IOD_VOLTAGE_OFFSET_STRING),
            help        = STRING_TOKEN (STR_IOD_VOLTAGE_OFFSET_HELP),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 1000,
            step        = 1,
            default     = 0,
          endnumeric;
          oneof
            varid       = SystemConfig.IodVoltageOffsetPrefix,
            prompt      = STRING_TOKEN (STR_OC_OFFSET_PREFIX_STRING),
            help        = STRING_TOKEN (STR_OC_OFFSET_PREFIX_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_OC_PREFIX_POSITIVE_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_OC_PREFIX_NEGATIVE_TEXT), value = 1, flags = 0;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN (STR_BLANK_STRING);
      suppressif
        ideqval SystemConfig.Overclocking == 0;
        text
          help = STRING_TOKEN (STR_BLANK_STRING),
          text = STRING_TOKEN (STR_OC_MEMORY_STRING);
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.XmpProfileSetting,
            prompt      = STRING_TOKEN (STR_MEM_PROFILE_STRING),
            help        = STRING_TOKEN (STR_MEM_PROFILE_HELP_STRING),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_MEM_XMP_DEFAULT) , value=0,  flags = DEFAULT; // 0, Default SPD
            option text = STRING_TOKEN (STR_MEM_XMP_CUSTOM)  , value=1,  flags = 0;       // 1, User defined profile
            option text = STRING_TOKEN (STR_MEM_XMP_PROFILE1), value=2,  flags = 0;       // 2, XMP Profile 1
            option text = STRING_TOKEN (STR_MEM_XMP_PROFILE2), value=3,  flags = 0;       // 3, XMP Profile 2
          endoneof;
        endif;
      endif;

      grayoutif
        (ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1)
        OR
        ideqvallist SystemConfig.XmpProfileSetting == 0 2 3;
        suppressif
          ideqval SystemConfig.Overclocking == 0;
          oneof
            varid       = SystemConfig.MemoryRefClk,
            prompt      = STRING_TOKEN (STR_MEMORY_REF_CLOCK_STRING),
            help        = STRING_TOKEN (STR_MEMORY_REF_CLOCK_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_AUTO_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_REF_CLOCK_100), value = 1, flags = 0;
            option text = STRING_TOKEN (STR_REF_CLOCK_133), value = 2, flags = 0;
          endoneof;
          oneof
            varid       = SystemConfig.MemoryRatio,
            prompt      = STRING_TOKEN (STR_MEMORY_RATIO_STRING),
            help        = STRING_TOKEN (STR_MEMORY_RATIO_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_AUTO_TEXT), value = 3, flags = 0;
            option text = STRING_TOKEN (STR_3_TEXT), value = 4, flags = 0;
            option text = STRING_TOKEN (STR_4_TEXT), value = 5, flags = 0;
            option text = STRING_TOKEN (STR_5_TEXT), value = 6, flags = DEFAULT;
            option text = STRING_TOKEN (STR_6_TEXT), value = 7, flags = 0;
            option text = STRING_TOKEN (STR_7_TEXT), value = 8, flags = 0;
            option text = STRING_TOKEN (STR_8_TEXT), value = 9, flags = 0;
            option text = STRING_TOKEN (STR_9_TEXT), value = 10, flags = 0;
            option text = STRING_TOKEN (STR_10_TEXT), value = 11, flags = 0;
          endoneof;
          numeric
            varid       = SystemConfig.MemoryTcl,
            prompt      = STRING_TOKEN (STR_TCL_STRING),
            help        = STRING_TOKEN (STR_TCL_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 4,
            maximum     = 18,
            step        = 1,
            default     = 9,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrcd,
            prompt      = STRING_TOKEN (STR_TRCD_STRING),
            help        = STRING_TOKEN (STR_TRCD_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 9,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrp,
            prompt      = STRING_TOKEN (STR_TRP_STRING),
            help        = STRING_TOKEN (STR_TRP_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 9,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTras,
            prompt      = STRING_TOKEN (STR_TRAS_STRING),
            help        = STRING_TOKEN (STR_TRAS_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 586,
            step        = 1,
            default     = 24,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTcwl,
            prompt      = STRING_TOKEN (STR_TCWL_STRING),
            help        = STRING_TOKEN (STR_TCWL_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 586,
            step        = 1,
            default     = 24,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTfaw,
            prompt      = STRING_TOKEN (STR_TFAW_STRING),
            help        = STRING_TOKEN (STR_TFAW_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 586,
            step        = 1,
            default     = 20,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrc,
            prompt      = STRING_TOKEN (STR_TRC_STRING),
            help        = STRING_TOKEN (STR_TRC_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 586,
            step        = 1,
            default     = 0,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrefi,
            prompt      = STRING_TOKEN (STR_TRC_STRING),
            help        = STRING_TOKEN (STR_TRC_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 0,
            maximum     = 586,
            step        = 1,
            default     = 0,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrfc,
            prompt      = STRING_TOKEN (STR_TRFC_STRING),
            help        = STRING_TOKEN (STR_TRFC_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 9363,
            step        = 1,
            default     = 74,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrpab,
            prompt      = STRING_TOKEN (STR_TRPAB_STRING),
            help        = STRING_TOKEN (STR_TRPAB_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 9363,
            step        = 1,
            default     = 74,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrrd,
            prompt      = STRING_TOKEN (STR_TRRD_STRING),
            help        = STRING_TOKEN (STR_TRRD_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 4,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTrtp,
            prompt      = STRING_TOKEN (STR_TRTP_STRING),
            help        = STRING_TOKEN (STR_TRTP_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 5,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTwr,
            prompt      = STRING_TOKEN (STR_TWR_STRING),
            help        = STRING_TOKEN (STR_TWR_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 10,
          endnumeric;
          numeric
            varid       = SystemConfig.MemoryTwtr,
            prompt      = STRING_TOKEN (STR_TWTR_STRING),
            help        = STRING_TOKEN (STR_TWRT_HELP_STRING),
            flags       = INTERACTIVE,
            minimum     = 1,
            maximum     = 38,
            step        = 1,
            default     = 5,
          endnumeric;
          oneof
            varid       = SystemConfig.NModeSupport,
            prompt      = STRING_TOKEN (STR_N_MODE_SUPPORT_STRING),
            help        = STRING_TOKEN (STR_N_MODE_SUPPORT_HELP),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (STR_AUTO_TEXT),     value = 0, flags = DEFAULT;
            option text = STRING_TOKEN (STR_1_N_MODE_TEXT), value = 1, flags = 0;
            option text = STRING_TOKEN (STR_2_N_MODE_TEXT), value = 2, flags = 0;
          endoneof;
        endif;
      endif;
    endform;
//[-end-121031-IB03780468-modify]//

    //
    //  Form EXTENDED_ICC_FORM_ID (0x40): ICC Config Control
    //
    form
      formid = EXTENDED_ICC_FORM_ID, title = STRING_TOKEN(STR_ICC_CONFIG_STRING);

      subtitle  text = STRING_TOKEN(STR_ICC_CONFIG_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.IccWatchDog,
        prompt      = STRING_TOKEN(STR_ICC_WATCHDOG_STRING),
        help        = STRING_TOKEN(STR_ICC_WATCHDOG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE_TEXT),  value = 1, flags = 0;
      endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.IccUnusedPci,
        prompt      = STRING_TOKEN(STR_ICC_UNUSED_PCI_STRING),
        help        = STRING_TOKEN(STR_ICC_UNUSED_PCI_HELP),
//[-start-130124-IB04770265-modify]//
        option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE_TEXT),  value = 1, flags = 0;
//[-end-130124-IB04770265-modify]//
      endoneof;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
        oneof
          varid       = SystemConfig.IccLockRegisters,
          prompt      = STRING_TOKEN ( STR_ICC_LOCK_REGISTER_STRING ),
          help        = STRING_TOKEN ( STR_ICC_LOCK_REGISTER_HELP ),
//[-start-121221-IB06460481-modify]//
          option text = STRING_TOKEN ( STR_ICC_LOCK_STATIC_TEXT      ), value = ICC_LOCK_STATIC_REG      , flags = DEFAULT;
          option text = STRING_TOKEN ( STR_ICC_LOCK_ALL_TEXT         ), value = ICC_LOCK_ALL_REG         ,    flags = 0;
          option text = STRING_TOKEN ( STR_ICC_LOCK_ALL_UNLOCKED_TEXT), value = ICC_LOCK_ALL_UNLOCKED_REG,    flags = 0;
//[-end-121221-IB06460481-modify]//
        endoneof;
      endif;

//[-start-120315-IB06460374-modify]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.IccCapabilities == ICC_SOFT_STRAP_SUPPORT;
//      oneof
//        varid       = SystemConfig.IccProfile,
//        prompt      = STRING_TOKEN(STR_ICC_PROFILE_STRING),
//        help        = STRING_TOKEN(STR_ICC_PROFILE_HELP),
//        option text = STRING_TOKEN(STR_ICC_PROFILE_0_TEXT), value = 0, flags = DEFAULT;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_1_TEXT),  value = 1, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_2_TEXT),  value = 2, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_3_TEXT),  value = 3, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_4_TEXT),  value = 4, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_5_TEXT),  value = 5, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_6_TEXT),  value = 6, flags = 0;
//        option text = STRING_TOKEN(STR_ICC_PROFILE_7_TEXT),  value = 7, flags = 0;
//      endoneof;
        label ICC_PROFILE_LABEL;
      endif;
      endif;
//[-end-120315-IB06460374-modify]//

      grayoutif  TRUE;
        text
          help   = STRING_TOKEN(STR_BLANK_STRING),
          text   = STRING_TOKEN(STR_ICC_LIB_DISABLE_STRING),
          flags  = 0,
          key    = 0;
      endif;

      grayoutif  TRUE;
        text
          help   = STRING_TOKEN(STR_BLANK_STRING),
          text   = STRING_TOKEN(STR_ICC_LIB_VERSION_STRING),
          text   = STRING_TOKEN(STR_ICC_LIB_VERSION),
          flags  = 0,
          key    = 0;
      endif;

      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      grayoutif
        ideqval SystemConfig.IccOperable == 0;
        goto ICC_CLOCK_GEN1_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN1_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_1;
        goto ICC_CLOCK_GEN2_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN2_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_2;
        goto ICC_CLOCK_GEN3_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN3_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_3;
        goto ICC_CLOCK_GEN4_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN4_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_4;
        goto ICC_CLOCK_GEN5_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN5_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_5;
        goto ICC_CLOCK_GEN6_FORM_ID,
          prompt = STRING_TOKEN(STR_ICC_CLOCK_GEN6_STRING),
          help = STRING_TOKEN(STR_ICC_CLOCK_GEN_HELP),
          flags = INTERACTIVE,
          key = KEY_ICC_CLOCK_6;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN1_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN1_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN1_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN1_LABEL;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN2_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN2_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN2_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN2_LABEL;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN3_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN3_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN3_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN3_LABEL;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN4_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN4_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN4_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN4_LABEL;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN5_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN5_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN5_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN5_LABEL;
      endif;
    endform;

    //
    //  Form ICC_CLOCK_GEN6_FORM_ID
    //
    form
      formid = ICC_CLOCK_GEN6_FORM_ID, title = STRING_TOKEN(STR_ICC_CLOCK_GEN6_STRING);
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
          label ICC_CLOCK_GEN6_LABEL;
      endif;
    endform;

//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdRapidStartSupported)
//[-end-130812-IB05670190-modify]//
    //
    //  Form 0x40: RapidStart setting
    //
    form
      formid = 0x40, title = STRING_TOKEN(STR_RAPID_START_STRING);

      subtitle  text = STRING_TOKEN(STR_RAPID_START_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      oneof
          varid       = SystemConfig.EnableRapidStart,
          questionid = KEY_RAPID_START_ENABLE,
          prompt      = STRING_TOKEN(STR_RAPID_START_SUPPORT_STRING),
          help        = STRING_TOKEN(STR_RAPID_START_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0|INTERACTIVE;
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT | INTERACTIVE;
      endoneof;
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdRapidStartSupported)
//[-end-130812-IB05670190-modify]//
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
          subtitle  text = STRING_TOKEN(STR_RAPID_START_STORE_ERROR_STRING);
      endif;
#endif
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.EntryOnS3RtcWake,
            prompt      = STRING_TOKEN(STR_RAPID_START_S3_RTC_WAKE_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_S3_RTC_WAKE_HELP),
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        endoneof;
      endif;

//[-start-120320-IB05300301-modify]//
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0
        OR
        ideqval SystemConfig.EntryOnS3RtcWake == 0;
        oneof
            varid       = SystemConfig.S3WakeTimerMin,
            prompt      = STRING_TOKEN(STR_RAPID_START_S3_TIMER_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_S3_TIMER_HELP),
            option text = STRING_TOKEN(STR_IMMEDIATELY_STRING), value = 0,   flags = 0;
            option text = STRING_TOKEN(STR_1_MIN_STRING),       value = 1,   flags = 0;
            option text = STRING_TOKEN(STR_2_MINS_STRING),      value = 2,   flags = 0;
            option text = STRING_TOKEN(STR_5_MINS_STRING),      value = 5,   flags = 0;
            option text = STRING_TOKEN(STR_10_MINS_STRING),     value = 10,  flags = DEFAULT;
            option text = STRING_TOKEN(STR_15_MINS_STRING),     value = 15,  flags = 0;
            option text = STRING_TOKEN(STR_30_MINS_STRING),     value = 30,  flags = 0;
            option text = STRING_TOKEN(STR_1_HOUR_STRING),      value = 60,  flags = 0;
            option text = STRING_TOKEN(STR_2_HOURS_STRING),     value = 120, flags = 0;
            option text = STRING_TOKEN(STR_12_HOURS_STRING),    value = 720, flags = 0;
            option text = STRING_TOKEN(STR_24_HOURS_STRING),    value = 1440, flags = 0;
        endoneof;
      endif;
//[-end-120320-IB05300301-modify]//

      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.EntryOnS3CritBattWake,
            prompt      = STRING_TOKEN(STR_RAPID_START_S3_CRITICAL_BAT_EVENT_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_S3_CRITICAL_BAT_EVENT_HELP),
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.CritticalBatWakeThres,
            prompt      = STRING_TOKEN(STR_RAPID_START_CRITICAL_BAT_WAKE_THERS_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_CRITICAL_BAT_WAKE_THERS_HELP),
            option text = STRING_TOKEN(STR_10_TEXT), value = 10, flags = DEFAULT;
            option text = STRING_TOKEN(STR_20_TEXT), value = 20, flags = 0;
            option text = STRING_TOKEN(STR_30_TEXT), value = 30, flags = 0;
            option text = STRING_TOKEN(STR_40_TEXT), value = 40, flags = 0;
            option text = STRING_TOKEN(STR_50_TEXT), value = 50, flags = 0;
            option text = STRING_TOKEN(STR_60_TEXT), value = 60, flags = 0;
            option text = STRING_TOKEN(STR_70_TEXT), value = 70, flags = 0;
            option text = STRING_TOKEN(STR_80_TEXT), value = 80, flags = 0;
            option text = STRING_TOKEN(STR_90_TEXT), value = 90, flags = 0;
            option text = STRING_TOKEN(STR_100_TEXT), value = 100, flags = 0;
        endoneof;
      endif;
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.ActivePageThresholdEnable,
            prompt      = STRING_TOKEN(STR_RAPID_START_ACTIVE_PAGE_THRESHOLD_SUPPORT_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_ACTIVE_PAGE_THRESHOLD_SUPPORT_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
        endoneof;
      endif;

      suppressif
        ideqval SystemConfig.EnableRapidStart == 0
        OR
        ideqval SystemConfig.ActivePageThresholdEnable == 0;
        numeric
          varid       = SystemConfig.ActivePageThresholdSize,
          prompt      = STRING_TOKEN(STR_RAPID_START_ACTIVE_MEMORY_THRESHOLD_STRING),
          help        = STRING_TOKEN(STR_RAPID_START_ACTIVE_MEMORY_THRESHOLD_HELP),
          minimum     = 0,
          maximum     = 1650065408,
          step        = 1,
          default     = 0,
        endnumeric;
      endif;
//[-start-121009-IB10370024-add]//
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.HybridHardDisk,
            prompt      = STRING_TOKEN(STR_RAPID_START_HYBRID_HARD_DISK_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_HYBRID_HARD_DISK_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
        endoneof;
      endif;
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0;
        oneof
            varid       = SystemConfig.DisplaySaveRestore,
            prompt      = STRING_TOKEN(STR_RAPID_START_DISPLAY_SAVE_RESTORE_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_DISPLAY_SAVE_RESTORE_HELP),
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = 0;
        endoneof;
      endif;
      suppressif
        ideqval SystemConfig.EnableRapidStart == 0
        OR
        ideqval SystemConfig.DisplaySaveRestore == 0;
        oneof
            varid       = SystemConfig.DisplayType,
            prompt      = STRING_TOKEN(STR_RAPID_START_DISPLAY_TYPE_STRING),
            help        = STRING_TOKEN(STR_RAPID_START_DISPLAY_TYPE_HELP),
//[-start-130527-IB01831023-modify]//
            option text = STRING_TOKEN(STR_DESKTOP_SAVE_TEXT), value = 1, flags = 0;
            option text = STRING_TOKEN(STR_BIOS_SAVE_TEXT), value = 0, flags = DEFAULT;
//[-end-130527-IB01831023-modify]//
        endoneof;
      endif;
//[-end-121009-IB10370024-add]//
    endform;
#endif

//[-start-120606-IB06460402-modify]//
  form
    formid = DPTF_FORM_ID, title = STRING_TOKEN ( STR_DPTF_FORM_STRING );

    subtitle  text = STRING_TOKEN ( STR_DPTF_FORM_STRING );
    subtitle  text = STRING_TOKEN ( STR_BLANK_STRING );

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
//[-start-120403-IB05300308-modify]//
        varid       = SystemConfig.EnableDptf,
//[-end-120403-IB05300308-modify]//
        questionid  = KEY_DPTF,
        prompt      = STRING_TOKEN ( STR_DPTF_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = INTERACTIVE | DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = INTERACTIVE | 0;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-120403-IB05300308-modify]//
      ideqval SystemConfig.EnableDptf == 0;
//[-end-120403-IB05300308-modify]//
      oneof
        varid       = SystemConfig.DptfProcessorThermalDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_PROCESSOR_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_PROCESSOR_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT                            ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_DPTF_PROCESSOR_THERMAL_DEVICE_SA_STRING  ), value = 1, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_DPTF_PROCESSOR_THERMAL_DEVICE_CPU_STRING ), value = 2, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointMCH,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointMCH,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointSa,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointSa,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_98C_TEXT ), value = 98,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.PPCCStepSize,
        prompt      = STRING_TOKEN ( STR_PPCC_STEP_SIZE_STRING ),
        help        = STRING_TOKEN ( STR_PPCC_STEP_SIZE_HELP ),
        option text = STRING_TOKEN ( STR_0_5_WATTS_TEXT ), value = 500,   flags = DEFAULT;
        option text = STRING_TOKEN ( STR_1_0_WATTS_TEXT ), value = 1000,  flags = 0;
        option text = STRING_TOKEN ( STR_1_5_WATTS_TEXT ), value = 1500,  flags = 0;
        option text = STRING_TOKEN ( STR_2_0_WATTS_TEXT ), value = 2000,  flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.LPOEnable,
        prompt      = STRING_TOKEN ( STR_CLPO_EN_STRING ),
        help        = STRING_TOKEN ( STR_CLPO_EN_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      numeric
        varid       = SystemConfig.LPOStartPState,
        prompt      = STRING_TOKEN(STR_CLPO_START_PSTATE_STRING),
        help        = STRING_TOKEN(STR_CLPO_START_PSTATE_HELP),
        minimum     = 0,
        maximum     = 16,
        step        = 1,
        default     = 16,
      endnumeric;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      numeric
        varid       = SystemConfig.LPOStepSize,
        prompt      = STRING_TOKEN(STR_CLPO_STEP_SIZE_STRING),
        help        = STRING_TOKEN(STR_CLPO_STEP_SIZE_HELP),
        minimum     = 0,
        maximum     = 100,
        step        = 1,
//[-start-121126-IB05330389-modify]//
        default     = 50,
//[-end-121126-IB05330389-modify]//
      endnumeric;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.LPOPowerControlSetting,
        prompt      = STRING_TOKEN ( STR_CLPO_POWER_CTL_STRING ),
        help        = STRING_TOKEN ( STR_CLPO_POWER_CTL_HELP ),
//[-start-121126-IB05330389-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags =  0;
        option text = STRING_TOKEN ( STR_SMT_OFF_LINING_STRING  ), value = 1, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_CORE_OFF_LINING_STRING  ), value = 2, flags = 0;
//[-end-121126-IB05330389-modify]//
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.LPOPerformanceControlSetting,
        prompt      = STRING_TOKEN ( STR_CLPO_PERF_CTL_STRING ),
        help        = STRING_TOKEN ( STR_CLPO_PERF_CTL_HELP ),
//[-start-121126-IB05330389-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags =  0;
        option text = STRING_TOKEN ( STR_SMT_OFF_LINING_STRING  ), value = 1, flags = 0;
        option text = STRING_TOKEN ( STR_CORE_OFF_LINING_STRING  ), value = 2, flags = DEFAULT;
//[-end-121126-IB05330389-modify]//
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-120403-IB05300308-modify]//
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
//[-end-120403-IB05300308-modify]//
      oneof
        varid       = SystemConfig.LPM,
        prompt      = STRING_TOKEN ( STR_LPM_STRING ),
        help        = STRING_TOKEN ( STR_LPM_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-120403-IB05300308-modify]//
      ideqval SystemConfig.EnableDptf == 0
//[-end-120403-IB05300308-modify]//
      OR
      ideqval SystemConfig.LPM == 0
      OR
      ideqval SystemConfig.DptfProcessorThermalDevice == 0;
      oneof
        varid       = SystemConfig.CurrentLowPowerMode,
        prompt      = STRING_TOKEN ( STR_CLPM_STRING ),
        help        = STRING_TOKEN ( STR_CLPM_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT                    ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT                     ), value = 1, flags = 0;
        option text = STRING_TOKEN ( STR_CLPM_APPLICATION_SPECIFIC_STRING ), value = 2, flags = 0;
        option text = STRING_TOKEN ( STR_CLPM_OS_REQUESTED_STRING         ), value = 3, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-120403-IB05300308-modify]//
      ideqval SystemConfig.EnableDptf == 0
//[-end-120403-IB05300308-modify]//
      OR
      ideqval SystemConfig.ConfigTDPCapability == 0;
      oneof
        varid       = SystemConfig.cTDP,
        prompt      = STRING_TOKEN ( STR_CTDP_STRING ),
        help        = STRING_TOKEN ( STR_CTDP_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
//[-start-120403-IB05300308-modify]//
      ideqval SystemConfig.EnableDptf == 0;
//[-end-120403-IB05300308-modify]//
      oneof
        varid       = SystemConfig.DptfPchThermalDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_PCH_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_PCH_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfPchThermalDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointPCH,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfPchThermalDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointPCH,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfPchThermalDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointPch,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.DptfPchThermalDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointPch,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_98C_TEXT ), value = 98,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableMemoryDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_MEMORY_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_MEMORY_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableMemoryDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointTMEM,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_43C_TEXT ), value = 43,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableMemoryDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointTMEM,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableMemoryDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointTMEM,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_53C_TEXT ), value = 53,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableMemoryDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointTMEM,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_51C_TEXT ), value = 51,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableFan1Device,
        prompt      = STRING_TOKEN ( STR_DPTF_FAN_DEVICE_1_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_FAN_DEVICE_1_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableFan2Device,
        prompt      = STRING_TOKEN ( STR_DPTF_FAN_DEVICE_2_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_FAN_DEVICE_2_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableAmbientDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_AMBIENT_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_AMBIENT_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableAmbientDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointAmbient,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableAmbientDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointAmbient,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableAmbientDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointAmbient,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableAmbientDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointAmbient,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableSkinDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_SKIN_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_SKIN_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableSkinDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointSkin,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableSkinDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointSkin,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableSkinDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointSkin,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableSkinDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointSkin,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableExhaustFanDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_EXHAUST_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_EXHAUST_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableExhaustFanDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointExhaustFan,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableExhaustFanDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointExhaustFan,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableExhaustFanDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointExhaustFan,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableExhaustFanDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointExhaustFan,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableVRDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_VR_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_VR_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableVRDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointVR,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableVRDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointVR,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableVRDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointVR,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableVRDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointVR,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

//[-start-120712-IB07360204-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.FullGenericParticipant,
        prompt      = STRING_TOKEN ( STR_FULL_GEN_PARTICIPANT ),
        help        = STRING_TOKEN ( STR_FULL_GEN_PARTICIPANT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;
//[-end-120712-IB07360204-add]//
//[-start-121126-IB05330389-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableDisplayParticipant,
        prompt      = STRING_TOKEN ( STR_ENABLE_DISPALY_PARTICIPANT_STRING ),
        help        = STRING_TOKEN ( STR_ENABLE_DISPALY_PARTICIPAN_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnableWifiDevice,
        prompt      = STRING_TOKEN ( STR_DPTF_WIFI_THERMAL_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_DPTF_WIFI_THERMAL_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableWifiDevice == 0;
      oneof
        varid       = SystemConfig.ActiveThermalTripPointWifi,
        prompt      = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableWifiDevice == 0;
      oneof
        varid       = SystemConfig.PassiveThermalTripPointWifi,
        prompt      = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableWifiDevice == 0;
      oneof
        varid       = SystemConfig.CriticalThermalTripPointWifi,
        prompt      = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnableWifiDevice == 0;
      oneof
        varid       = SystemConfig.HotThermalTripPointWifi,
        prompt      = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_STRING ),
        help        = STRING_TOKEN ( STR_HOT_THERMAL_TRIP_POINT_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 255,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_15C_TEXT ), value = 15,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_23C_TEXT ), value = 23,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_31C_TEXT ), value = 31,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_39C_TEXT ), value = 39,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_47C_TEXT ), value = 47,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_55C_TEXT ), value = 55,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_63C_TEXT ), value = 63,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_71C_TEXT ), value = 71,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_79C_TEXT ), value = 79,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_87C_TEXT ), value = 87,  flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_95C_TEXT ), value = 95,  flags = DEFAULT;
        option text = STRING_TOKEN ( STR_THERMAL_103C_TEXT ),value = 103, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_111C_TEXT ),value = 111, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_119C_TEXT ),value = 119, flags = 0;
        option text = STRING_TOKEN ( STR_THERMAL_127C_TEXT ),value = 127, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      oneof
        varid       = SystemConfig.EnablePowerDevice,
        prompt      = STRING_TOKEN ( STR_ENABLE_POWER_PARTICIPANT_STRING ),
        help        = STRING_TOKEN ( STR_ENABLE_POWER_PARTICIPAN_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnableDptf == 0
      OR
      ideqval SystemConfig.EnablePowerDevice == 0;
      oneof
        varid       = SystemConfig.EnablePowerPolicy,
        prompt      = STRING_TOKEN ( STR_ENABLE_POWER_POLICY_STRING ),
        help        = STRING_TOKEN ( STR_ENABLE_POWER_POLICY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

//[-end-121126-IB05330389-add]//
    subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    suppressif
      ideqval SystemConfig.EnableDptf == 0;
      goto DPTF_POLICCY_FORM_ID,
        prompt = STRING_TOKEN(STR_DPTF_POLICY_STRING),
        help = STRING_TOKEN(STR_DPTF_POLICY_HELP);
    endif;
  endform;

    form
      formid = DPTF_POLICCY_FORM_ID, title = STRING_TOKEN(STR_DPTF_POLICY_STRING);

      subtitle  text = STRING_TOKEN(STR_DPTF_POLICY_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableActivePolicy,
        prompt      = STRING_TOKEN ( STR_ACTIVE_POLICY_STRING ),
        help        = STRING_TOKEN ( STR_ACTIVE_POLICY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnablePassivePolicy,
        prompt      = STRING_TOKEN ( STR_PASSIVE_POLICY_STRING ),
        help        = STRING_TOKEN ( STR_PASSIVE_POLICY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
    suppressif
      ideqval SystemConfig.EnablePassivePolicy == 0;
      oneof
        varid       = SystemConfig.TrtRevision,
        prompt      = STRING_TOKEN ( STR_TRT_REVISION_STRING ),
        help        = STRING_TOKEN ( STR_TRT_REVISION_HELP ),
        option text = STRING_TOKEN ( STR_TRT_TRAD_TEXT ),      value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_TRT_PRIORITY_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableCriticalPolicy,
        prompt      = STRING_TOKEN ( STR_CRITICAL_POLICY_STRING ),
        help        = STRING_TOKEN ( STR_CRITICAL_POLICY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableCoolingModePolicy,
        prompt      = STRING_TOKEN ( STR_COOLING_MODE_POLICY_STRING ),
        help        = STRING_TOKEN ( STR_COOLING_MODE_POLICY_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
      endoneof;
    endif;
    endform;
//[-end-120606-IB06460402-modify]//


//[-start-120604-IB06150223-modify]//
    //
    //  Form ISCT setting
    //
    form
      formid = ISCT_FORM_ID, title = STRING_TOKEN(STR_ISCT_STRING);

      subtitle  text = STRING_TOKEN(STR_ISCT_STRING);
      subtitle  text = STRING_TOKEN(STR_BLANK_STRING);

      oneof
          varid       = SystemConfig.ISCTEnable,
          questionid  = KEY_ISCT_ENABLE,
          prompt      = STRING_TOKEN(STR_ISCT_CONFIC_STRING),
          help        = STRING_TOKEN(STR_ISCT_CONFIC_HELP),
          option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = 0|INTERACTIVE;
          option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = DEFAULT|INTERACTIVE;
      endoneof;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ISCTEnable == 0;
        oneof
            varid       = SystemConfig.ISCTNotify,
            prompt      = STRING_TOKEN(STR_ISCT_NOTIFY_STRING),
            help        = STRING_TOKEN(STR_ISCT_NOTIFY_HELP),
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ISCTEnable == 0;
        oneof
            varid       = SystemConfig.ISCTWLanPower,
            prompt      = STRING_TOKEN(STR_ISCT_WLAN_POWER_STRING),
            help        = STRING_TOKEN(STR_ISCT_WLAN_POWER_HELP),
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        endoneof;
      endif;
      endif;

      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ISCTEnable == 0;
        oneof
            varid       = SystemConfig.ISCTWWLanPower,
            prompt      = STRING_TOKEN(STR_ISCT_WWLAN_POWER_STRING),
            help        = STRING_TOKEN(STR_ISCT_WWLAN_POWER_HELP),
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = 0, flags = 0;
        endoneof;
      endif;
      endif;
//[-start-121226-IB10920002-modify]//
//[-start-120831-IB05330376-add]//
      grayoutif
        ideqval SystemConfig.UserAccessLevel == 2
        AND
        ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqval SystemConfig.ISCTEnable == 0;
        oneof
            varid       = SystemConfig.IsctTimerChoice,
            prompt      = STRING_TOKEN(STR_ISCT_TIMER_SELECT_STRING),
            help        = STRING_TOKEN(STR_ISCT_TIMER_SELECT_HELP),
#ifndef ISCT_PLATFORM_IS_DESKTOP
            option text = STRING_TOKEN(STR_ISCT_EC_TIMER_STRING),  value = 0, flags = 0;
#endif
            option text = STRING_TOKEN(STR_ISCT_RTC_TIMER_STRING), value = 1, flags = DEFAULT;
        endoneof;
      endif;
      endif;
//[-end-120831-IB05330376-add]//
//[-end-121226-IB10920002-modify]//
    endform;
//[-end-120604-IB06150223-modify]//

//[-start-120713-IB06460418-add]//
//[-start-121115-IB06150259-modify]//
//[-start-130523-IB05160449-modify]//
//[-start-130812-IB05670190-modify]//
#if FeaturePcdGet(PcdUltFlag)
//[-end-130812-IB05670190-modify]//
//[-end-130523-IB05160449-modify]//
  form
    formid = SERIAL_IO_FORM_ID, title = STRING_TOKEN ( STR_SERIAL_IO_FORM_STRING );

    subtitle  text = STRING_TOKEN ( STR_SERIAL_IO_FORM_STRING );
    subtitle  text = STRING_TOKEN ( STR_BLANK_STRING );

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoDma,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_DMA_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_DMA_HELP ),
//[-start-120725-IB05330362-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoI2c0,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_I2C0_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_I2C0_HELP ),
//[-start-120725-IB05330362-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;
//[-start-121219-IB10540025-remove]//
////[-start-121102-IB06150254-add]//
//          numeric
//            varid       = SystemConfig.I2c0SensorDeviceSelection,
//            prompt      = STRING_TOKEN(STR_SERIAL_IO_I2C0_SENSER_DEV_SEL_STRING),
//            help        = STRING_TOKEN(STR_SERIAL_IO_I2C0_SENSER_DEV_SEL_HELP),
//            minimum     = 0,
//            maximum     = 15,
//            step        = 1,
//            default     = 0,
//          endnumeric;
////[-end-121102-IB06150254-add]//
//[-end-121219-IB10540025-remove]//

//[-start-121214-IB10540025-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c0 == 0;
      oneof
        varid       = SystemConfig.I2c0IntelSensorHub,
        prompt      = STRING_TOKEN ( STR_I2C0_SENSORHUB_STRING ),
        help        = STRING_TOKEN ( STR_I2C0_SENSORHUB_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x01, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c0 == 0;
      oneof
        varid       = SystemConfig.I2c0WITTDevice,
        prompt      = STRING_TOKEN ( STR_I2C0_WITT_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_I2C0_WITT_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x02, flags = 0;
      endoneof;
      endif;
    endif;
//[-end-121214-IB10540025-add]//

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoI2c1,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_I2C1_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_I2C1_HELP ),
//[-start-120725-IB05330362-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

//[-start-121214-IB10540025-remove]//
////[-start-121102-IB06150254-add]//
//          numeric
//            varid       = SystemConfig.I2c1SensorDeviceSelection,
//            prompt      = STRING_TOKEN(STR_SERIAL_IO_I2C1_SENSER_DEV_SEL_STRING),
//            help        = STRING_TOKEN(STR_SERIAL_IO_I2C1_SENSER_DEV_SEL_HELP),
//            minimum     = 0,
//            maximum     = 15,
//            step        = 1,
//            default     = 0,
//          endnumeric;
////[-end-121102-IB06150254-add]//
//[-end-121214-IB10540025-remove]//

//[-start-121214-IB10540025-add]//
    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1AtmelTouchPanel,
        prompt      = STRING_TOKEN ( STR_I2C1_ATMEL_TOUCHPANEL_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_ATMEL_TOUCHPANEL_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x01, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1ElantechTouchPanel,
        prompt      = STRING_TOKEN ( STR_I2C1_ELANTECH_TOUCHPANEL_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_ELANTECH_TOUCHPANEL_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x02, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1ElantechTouchPad,
        prompt      = STRING_TOKEN ( STR_I2C1_ELANTECH_TOUCHPAD_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_ELANTECH_TOUCHPAD_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x04, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1SynapticsTouchPad,
        prompt      = STRING_TOKEN ( STR_I2C1_SYNAPTICS_TOUCHPAD_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_SYNAPTICS_TOUCHPAD_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x08, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1WITTDevice,
        prompt      = STRING_TOKEN ( STR_I2C1_WITT_DEVICE_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_WITT_DEVICE_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x10, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1NTrigDigitizer,
        prompt      = STRING_TOKEN ( STR_I2C1_NTRIG_DIGITIZER_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_NTRIG_DIGITIZER_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x20, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1EETITouchPanel,
        prompt      = STRING_TOKEN ( STR_I2C1_EETI_TOUCHPANEL_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_EETI_TOUCHPANEL_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x40, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1AlpsTouchPad,
        prompt      = STRING_TOKEN ( STR_I2C1_ALPS_TOUCHPAD_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_ALPS_TOUCHPAD_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x80, flags = 0;
      endoneof;
      endif;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      suppressif
        ideqvallist SystemConfig.EnableSerialIoI2c1 == 0;
      oneof
        varid       = SystemConfig.I2c1CypressTouchPad,
        prompt      = STRING_TOKEN ( STR_I2C1_CYPRESS_TOUCHPAD_STRING ),
        help        = STRING_TOKEN ( STR_I2C1_CYPRESS_TOUCHPAD_HELP ),
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 0x100, flags = 0;
      endoneof;
      endif;
    endif;
//[-end-121214-IB10540025-add]//

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoSpi0,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_SPI0_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_SPI0_HELP ),
//[-start-120725-IB05330362-modify]//
//[-start-121130-IB06150264-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
//[-end-121130-IB06150264-modify]//
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoSpi1,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_SPI1_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_SPI1_HELP ),
//[-start-120725-IB05330362-modify]//
//[-start-121130-IB06150264-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
//[-end-121130-IB06150264-modify]//
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoUart0,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_UART0_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_UART0_HELP ),
//[-start-120925-IB03780461-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
//[-end-120925-IB03780461-modify]//
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoUart1,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_UART1_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_UART1_HELP ),
//[-start-120725-IB05330362-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.EnableSerialIoSdio,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_SDIO_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_SDIO_HELP ),
//[-start-120725-IB05330362-modify]//
        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
//[-end-120725-IB05330362-modify]//
      endoneof;
    endif;

//[-start-121002-IB06150249-remove]//
//    grayoutif
//      ideqval SystemConfig.UserAccessLevel == 2
//      AND
//      ideqval SystemConfig.SetUserPass == 1;
//      oneof
//        varid       = SystemConfig.EnableSerialIoAudioDsp,
////[-start-120920-IB05330379-add]//
//        questionid  = KEY_DSP_CHANGE,
////[-end-120920-IB05330379-add]//
//        prompt      = STRING_TOKEN ( STR_SERIAL_IO_AUDIO_DSP_STRING ),
//        help        = STRING_TOKEN ( STR_SERIAL_IO_AUDIO_DSP_HELP ),
////[-start-120725-IB05330362-modify]//
////[-start-120808-IB04770241-modify]//
////[-start-120920-IB05330379-modify]//
//        option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT | INTERACTIVE;
//        option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0 | INTERACTIVE;
////[-end-120920-IB05330379-modify]//
////[-end-120808-IB04770241-modify]//
////[-end-120725-IB05330362-modify]//
//      endoneof;
//    endif;
//[-end-121002-IB06150249-remove]//

    grayoutif
      ideqval SystemConfig.UserAccessLevel == 2
      AND
      ideqval SystemConfig.SetUserPass == 1;
      oneof
        varid       = SystemConfig.SerialIoMode,
        prompt      = STRING_TOKEN ( STR_SERIAL_IO_MODE_STRING ),
        help        = STRING_TOKEN ( STR_SERIAL_IO_MODE_HELP ),
        option text = STRING_TOKEN (STR_ACPI_MODE_TEXT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN (STR_PCI_MODE_TEXT),  value = 1, flags = 0;
      endoneof;
    endif;

//[-start-121113-IB06150259-remove]//
//    grayoutif
//      ideqval SystemConfig.UserAccessLevel == 2
//      AND
//      ideqval SystemConfig.SetUserPass == 1;
//      oneof
//        varid       = SystemConfig.SerialIoInterruptMode,
//        prompt      = STRING_TOKEN ( STR_SERIAL_IO_INTERRUPT_MODE_STRING ),
//        help        = STRING_TOKEN ( STR_SERIAL_IO_INTERRUPT_MODE_HELP ),
//        option text = STRING_TOKEN (STR_ACPI_MODE_TEXT), value = 0, flags = 0;
//        option text = STRING_TOKEN (STR_PCI_MODE_TEXT),  value = 1, flags = DEFAULT;
//      endoneof;
//    endif;
//[-end-121113-IB06150259-remove]//

  endform;

//[-start-121002-IB06150249-add]//
  form
  formid = ADSP_FORM_ID, title = STRING_TOKEN ( STR_ADSP_FORM_STRING );

  subtitle  text = STRING_TOKEN ( STR_ADSP_FORM_STRING );
  subtitle  text = STRING_TOKEN ( STR_BLANK_STRING );

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.EnableSerialIoAudioDsp,
      questionid  = KEY_DSP_CHANGE,
      prompt      = STRING_TOKEN ( STR_SERIAL_IO_AUDIO_DSP_STRING ),
      help        = STRING_TOKEN ( STR_SERIAL_IO_AUDIO_DSP_HELP ),
      option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0 | INTERACTIVE;
      option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT | INTERACTIVE;
    endoneof;
  endif;
//[-end-121115-IB06150259-modify]//

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.AudioDspD3PowerGating,
      prompt      = STRING_TOKEN ( STR_ADSP_D3_POWER_GATING_STRING ),
      help        = STRING_TOKEN ( STR_ADSP_D3_POWER_GATING_HELP ),
      option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = 0;
      option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = DEFAULT;
    endoneof;
  endif;

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.AudioCodecSelect,
      prompt      = STRING_TOKEN ( STR_ADSP_CODEC_SEL_STRING ),
      help        = STRING_TOKEN ( STR_ADSP_CODEC_SEL_HELP ),
//[-start-121126-IB06460466-modify]//
      option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0xFF, flags = 0;
      option text = STRING_TOKEN ( STR_REALTEC_TEXT ), value = 0, flags = DEFAULT;
      option text = STRING_TOKEN ( STR_CIRRUS_TEXT  ), value = 1, flags = 0;
      option text = STRING_TOKEN ( STR_IDT_TEXT  ), value = 2, flags = 0;
//[-end-121126-IB06460466-modify]//
    endoneof;
  endif;

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.AudioDspBluetoothSupport,
      prompt      = STRING_TOKEN ( STR_ADSP_BLUETOOTH_SUPPORT_STRING ),
      help        = STRING_TOKEN ( STR_ADSP_BLUETOOTH_SUPPORT_HELP ),
      option text = STRING_TOKEN ( STR_DISABLED_TEXT ), value = 0, flags = DEFAULT;
      option text = STRING_TOKEN ( STR_ENABLED_TEXT  ), value = 1, flags = 0;
    endoneof;
  endif;

  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid       = SystemConfig.AudioDspAcpiMode,
      prompt      = STRING_TOKEN ( STR_ADSP_ACPI_MODE_STRING ),
      help        = STRING_TOKEN ( STR_ADSP_ACPI_MODE_HELP ),
      option text = STRING_TOKEN (STR_ACPI_MODE_TEXT), value = 1, flags = DEFAULT;
      option text = STRING_TOKEN (STR_PCI_MODE_TEXT),  value = 0, flags = 0;
    endoneof;
  endif;

//[-start-121008-IB10370023-remove]//
//  grayoutif
//    ideqval SystemConfig.UserAccessLevel == 2
//    AND
//    ideqval SystemConfig.SetUserPass == 1;
//    numeric
//      varid       = SystemConfig.AudioDspSafeMode,
//      prompt      = STRING_TOKEN ( STR_ADSP_SAFE_MODE_STRING ),
//      help        = STRING_TOKEN ( STR_ADSP_SAFE_MODE_HELP ),
//      minimum     = 0,
//      maximum     = 15,
//      step        = 1,
//      default     = 2,
//    endnumeric;
//  endif;
//[-end-121008-IB10370023-remove]//

  endform;
//[-end-121002-IB06150249-add]//
#endif
//[-end-120713-IB06460418-add]//

//[-start-130611-IB11120016-add]//
#include "IpmiConfig/IpmiConfig.hfr"
//[-end-130611-IB11120016-add]//

//[-start-130617-IB04560405-add]//
//[-start-131122-IB08400219-modify]//
//[-start-140318-IB08400253-modify]//
#if FeaturePcdGet(PcdH2OEventLogSupport)
  #include "BiosEventLog.hfr"
#endif

//[-end-131122-IB08400219-modify]//

#if FeaturePcdGet(PcdH2OPostMessageSupport)
#include "PostMessage.hfr"
#endif
//[-end-140318-IB08400253-modify]//
//[-end-130617-IB04560405-add]//

//[-start-131225-IB08620313-add]//
#ifdef APEI_SUPPORT
#include "APEI/APEI.hfr"
#endif
//[-end-131225-IB08620313-add]//

endformset;
//[-end-120316-IB06460376-modify]//
